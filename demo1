‡§†‡•Ä‡§ï ‡§Ü‡§π‡•á! üöÄ ‡§Ü‡§§‡§æ ‡§Ü‡§™‡§£ ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•Ç Filter Rooms Page ‚Äî ‡§ú‡•ç‡§Ø‡§æ‡§§ user specific criteria (‡§â‡§¶‡§æ. availability, price, hotel) ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® rooms filter ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã backend ‡§ö‡•ç‡§Ø‡§æ GET /api/rooms/filter ‡§ï‡§ø‡§Ç‡§µ‡§æ GET /api/rooms/available routes ‡§µ‡§æ‡§™‡§∞‡•Ç‡§®.


---

4Ô∏è‚É£ Filter Rooms Page

Folder Structure

features/room/filter-rooms/
 ‚îú‚îÄ filter-rooms.component.ts
 ‚îú‚îÄ filter-rooms.component.html
 ‚îú‚îÄ filter-rooms.component.css


---

1. filter-rooms.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { RoomService } from '../../../core/services/roomservice';
import { Room } from '../../../core/models/room.model';

@Component({
  selector: 'app-filter-rooms',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './filter-rooms.component.html',
  styleUrls: ['./filter-rooms.component.css']
})
export class FilterRoomsComponent implements OnInit {
  filterForm!: FormGroup;
  filteredRooms: Room[] = [];
  errorMessage = '';

  constructor(private fb: FormBuilder, private roomService: RoomService) {}

  ngOnInit(): void {
    this.filterForm = this.fb.group({
      minPrice: [''],
      maxPrice: [''],
      availability: [''],
      hotelId: ['']
    });
  }

  filterRooms(): void {
    const filters = this.filterForm.value;
    // Convert empty strings to undefined
    const params: any = {};
    if (filters.minPrice) params.minPrice = filters.minPrice;
    if (filters.maxPrice) params.maxPrice = filters.maxPrice;
    if (filters.availability !== '') params.availability = filters.availability;
    if (filters.hotelId) params.hotelId = filters.hotelId;

    this.roomService.filterRooms(params).subscribe({
      next: (rooms) => {
        this.filteredRooms = rooms;
        this.errorMessage = '';
      },
      error: () => {
        this.filteredRooms = [];
        this.errorMessage = 'No rooms found for the given filters.';
      }
    });
  }
}


---

2. filter-rooms.component.html

<div class="filter-rooms-container">
  <h2>Filter Rooms</h2>

  <form [formGroup]="filterForm" (ngSubmit)="filterRooms()">
    <div class="form-group">
      <label>Min Price:</label>
      <input type="number" formControlName="minPrice" placeholder="Min Price" />
    </div>

    <div class="form-group">
      <label>Max Price:</label>
      <input type="number" formControlName="maxPrice" placeholder="Max Price" />
    </div>

    <div class="form-group">
      <label>Availability:</label>
      <select formControlName="availability">
        <option value="">Any</option>
        <option [value]="true">Available</option>
        <option [value]="false">Not Available</option>
      </select>
    </div>

    <div class="form-group">
      <label>Hotel ID:</label>
      <input type="number" formControlName="hotelId" placeholder="Hotel ID" />
    </div>

    <button type="submit">Filter Rooms</button>
  </form>

  <p class="error" *ngIf="errorMessage">{{ errorMessage }}</p>

  <div *ngIf="filteredRooms.length > 0" class="room-list">
    <h3>Filtered Rooms</h3>
    <ul>
      <li *ngFor="let room of filteredRooms">
        <strong>ID:</strong> {{ room.roomId }},
        <strong>Type:</strong> {{ room.type }},
        <strong>Price:</strong> {{ room.price }},
        <strong>Availability:</strong> {{ room.availability ? 'Yes' : 'No' }},
        <strong>Hotel ID:</strong> {{ room.hotelId }}
      </li>
    </ul>
  </div>
</div>


---

3. filter-rooms.component.css

.filter-rooms-container {
  max-width: 500px;
  margin: 40px auto;
  padding: 25px;
  border-radius: 12px;
  box-shadow: 0 0 12px rgba(0,0,0,0.1);
  background-color: #fff;
}

h2 {
  text-align: center;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 15px;
  display: flex;
  flex-direction: column;
}

label {
  font-weight: 600;
  margin-bottom: 5px;
}

input, select {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 8px;
}

button {
  width: 100%;
  padding: 10px;
  background-color: #17a2b8;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
}

button:hover {
  background-color: #138496;
}

.error {
  color: red;
  text-align: center;
  margin-top: 10px;
}

.room-list {
  margin-top: 20px;
  border-top: 1px solid #ddd;
  padding-top: 15px;
}

.room-list ul {
  list-style-type: none;
  padding-left: 0;
}

.room-list li {
  margin-bottom: 8px;
  padding: 6px;
  background-color: #f8f9fa;
  border-radius: 6px;
}


---

4Ô∏è‚É£ RoomService.ts Method

filterRooms(params: any): Observable<Room[]> {
  return this.http.get<Room[]>(`${this.apiUrl}/filter`, { params });
}

> Note: Backend should accept query params like ?minPrice=100&maxPrice=500&availability=true&hotelId=1.




---

5Ô∏è‚É£ Routing (app.routes.ts)

{ path: 'filter-rooms', component: FilterRoomsComponent }


---

‚úÖ Usage

1. Browser ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ú‡§æ:



http://localhost:4200/filter-rooms

2. Filters ‡§≠‡§∞‡§æ ‚Üí Filter Rooms ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§æ.


3. Filtered rooms list ‡§ñ‡§æ‡§≤‡•Ä display ‡§π‡•ã‡§à‡§≤.




---

‡§Æ‡§ó ‡§™‡•Å‡§¢‡•á ‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ Get Rooms By Hotel ID Page ‡§™‡§£ ‡§¶‡•á‡§ä ‡§∂‡§ï‡§§‡•ã, ‡§ú‡•ç‡§Ø‡§æ‡§§ ‡§´‡§ï‡•ç‡§§ ‡§è‡§ï‡§æ hotel ‡§Æ‡§ß‡•Ä‡§≤ rooms show ‡§π‡•ã‡§§‡•Ä‡§≤.

‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ ‡§§‡•á setup ‡§¶‡•ç‡§Ø‡§æ‡§Ø‡§ö‡§Ç ‡§ï‡§æ?












‡§†‡•Ä‡§ï ‡§Ü‡§π‡•á! üöÄ ‡§Æ‡§ó ‡§Ü‡§™‡§£ ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•Ç Delete Room Page ‚Äî ‡§ú‡•ç‡§Ø‡§æ‡§§ Angular frontend ‡§µ‡§∞ user room delete ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã backend ‡§ö‡•ç‡§Ø‡§æ DELETE /api/rooms/{id} route ‡§µ‡§æ‡§™‡§∞‡•Ç‡§®.


---

3Ô∏è‚É£ Delete Room Page

Folder Structure

features/room/delete-room/
 ‚îú‚îÄ delete-room.component.ts
 ‚îú‚îÄ delete-room.component.html
 ‚îú‚îÄ delete-room.component.css


---

1. delete-room.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { RoomService } from '../../../core/services/roomservice';

@Component({
  selector: 'app-delete-room',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './delete-room.component.html',
  styleUrls: ['./delete-room.component.css']
})
export class DeleteRoomComponent implements OnInit {
  deleteForm!: FormGroup;
  successMessage = '';
  errorMessage = '';

  constructor(private fb: FormBuilder, private roomService: RoomService) {}

  ngOnInit(): void {
    this.deleteForm = this.fb.group({
      roomId: [null, [Validators.required, Validators.min(1)]]
    });
  }

  deleteRoom(): void {
    if (this.deleteForm.valid) {
      const roomId = this.deleteForm.value.roomId;
      this.roomService.deleteRoom(roomId).subscribe({
        next: () => {
          this.successMessage = 'Room deleted successfully!';
          this.errorMessage = '';
          this.deleteForm.reset();
        },
        error: () => {
          this.errorMessage = 'Failed to delete room.';
          this.successMessage = '';
        }
      });
    }
  }
}


---

2. delete-room.component.html

<div class="delete-room-container">
  <h2>Delete Room</h2>

  <form [formGroup]="deleteForm" (ngSubmit)="deleteRoom()">
    <div class="form-group">
      <label>Room ID:</label>
      <input type="number" formControlName="roomId" placeholder="Enter Room ID to delete" />
    </div>

    <button type="submit" [disabled]="deleteForm.invalid">Delete Room</button>
  </form>

  <p class="success" *ngIf="successMessage">{{ successMessage }}</p>
  <p class="error" *ngIf="errorMessage">{{ errorMessage }}</p>
</div>


---

3. delete-room.component.css

.delete-room-container {
  max-width: 400px;
  margin: 40px auto;
  padding: 25px;
  border-radius: 12px;
  box-shadow: 0 0 12px rgba(0,0,0,0.1);
  background-color: #fff;
}

h2 {
  text-align: center;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 15px;
  display: flex;
  flex-direction: column;
}

label {
  font-weight: 600;
  margin-bottom: 5px;
}

input {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 8px;
}

button {
  width: 100%;
  padding: 10px;
  background-color: #dc3545;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
}

button:hover {
  background-color: #c82333;
}

.success { color: green; text-align: center; margin-top: 10px; }
.error { color: red; text-align: center; margin-top: 10px; }


---

4Ô∏è‚É£ RoomService.ts Method

deleteRoom(id: number): Observable<any> {
  return this.http.delete(`${this.apiUrl}/${id}`);
}


---

5Ô∏è‚É£ Routing (app.routes.ts)

{ path: 'delete-room', component: DeleteRoomComponent }


---

‚úÖ Usage

1. Browser ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ú‡§æ:



http://localhost:4200/delete-room

2. Room ID ‡§ü‡§æ‡§ï‡§æ ‚Üí Delete Room ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§æ.


3. Success/Failure message display ‡§π‡•ã‡§à‡§≤.




---

‡§ú‡§∞ ‡§π‡§µ‡§Ç ‡§§‡§∞ ‡§™‡•Å‡§¢‡•á ‡§Æ‡•Ä Get Rooms By Hotel ID Page ‡§™‡§£ full Angular setup ready ‡§¶‡•á‡§ä ‡§∂‡§ï‡§§‡•ã, ‡§ú‡•ç‡§Ø‡§æ‡§§ hotel-wise rooms display ‡§π‡•ã‡§§‡•Ä‡§≤.

‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§™‡•Å‡§¢‡•á Get Rooms By Hotel setup ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§ï‡§æ?







‡§õ‡§æ‡§®! üòé ‡§Æ‡§ó ‡§™‡•Å‡§¢‡•á Update Room Page ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•Ç, ‡§ú‡•ç‡§Ø‡§æ‡§§ ‡§§‡•Å‡§≤‡§æ backend ‡§ö‡§æ PUT /api/rooms/{id} route Angular frontend ‡§Æ‡§ß‡•ç‡§Ø‡•á fully work ‡§ï‡§∞‡§£‡§æ‡§∞‡§æ setup ‡§Æ‡§ø‡§≥‡•á‡§≤ ‚Äî TS + HTML + CSS ‡§∏‡§π‡§ø‡§§.


---

2Ô∏è‚É£ Update Room Page

Folder Structure

features/room/update-room/
 ‚îú‚îÄ update-room.component.ts
 ‚îú‚îÄ update-room.component.html
 ‚îú‚îÄ update-room.component.css


---

1. update-room.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { RoomService } from '../../../core/services/roomservice';
import { Room } from '../../../core/models/room.model';

@Component({
  selector: 'app-update-room',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './update-room.component.html',
  styleUrls: ['./update-room.component.css']
})
export class UpdateRoomComponent implements OnInit {
  roomForm!: FormGroup;
  successMessage = '';
  errorMessage = '';

  constructor(private fb: FormBuilder, private roomService: RoomService) {}

  ngOnInit(): void {
    this.roomForm = this.fb.group({
      roomId: [null, [Validators.required, Validators.min(1)]],
      type: ['', Validators.required],
      price: [null, [Validators.required, Validators.min(1)]],
      availability: [true, Validators.required],
      features: ['', Validators.required],
      hotelId: [null, Validators.required]
    });
  }

  updateRoom(): void {
    if (this.roomForm.valid) {
      const roomId = this.roomForm.value.roomId;
      const updateData = {
        type: this.roomForm.value.type,
        price: this.roomForm.value.price,
        availability: this.roomForm.value.availability,
        features: this.roomForm.value.features,
        hotelId: this.roomForm.value.hotelId
      };

      this.roomService.updateRoom(roomId, updateData).subscribe({
        next: () => {
          this.successMessage = 'Room updated successfully!';
          this.errorMessage = '';
        },
        error: () => {
          this.errorMessage = 'Failed to update room.';
          this.successMessage = '';
        }
      });
    } else {
      this.errorMessage = 'Please fill all required fields.';
      this.successMessage = '';
    }
  }
}


---

2. update-room.component.html

<div class="update-room-container">
  <h2>Update Room</h2>

  <form [formGroup]="roomForm" (ngSubmit)="updateRoom()">
    <div class="form-group">
      <label>Room ID:</label>
      <input type="number" formControlName="roomId" placeholder="Enter Room ID" />
    </div>

    <div class="form-group">
      <label>Room Type:</label>
      <input type="text" formControlName="type" placeholder="Deluxe, Suite..." />
    </div>

    <div class="form-group">
      <label>Price:</label>
      <input type="number" formControlName="price" placeholder="Enter price" />
    </div>

    <div class="form-group">
      <label>Availability:</label>
      <select formControlName="availability">
        <option [value]="true">Available</option>
        <option [value]="false">Not Available</option>
      </select>
    </div>

    <div class="form-group">
      <label>Features:</label>
      <input type="text" formControlName="features" placeholder="AC, WiFi, TV..." />
    </div>

    <div class="form-group">
      <label>Hotel ID:</label>
      <input type="number" formControlName="hotelId" placeholder="Associated hotel ID" />
    </div>

    <button type="submit" [disabled]="roomForm.invalid">Update Room</button>
  </form>

  <p class="success" *ngIf="successMessage">{{ successMessage }}</p>
  <p class="error" *ngIf="errorMessage">{{ errorMessage }}</p>
</div>


---

3. update-room.component.css

.update-room-container {
  max-width: 450px;
  margin: 40px auto;
  padding: 25px;
  border-radius: 12px;
  box-shadow: 0 0 12px rgba(0,0,0,0.1);
  background-color: #fff;
}

h2 {
  text-align: center;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 15px;
  display: flex;
  flex-direction: column;
}

label {
  font-weight: 600;
  margin-bottom: 5px;
}

input, select {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 8px;
}

button {
  width: 100%;
  padding: 10px;
  background-color: #28a745;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
}

button:hover {
  background-color: #218838;
}

.success { color: green; text-align: center; margin-top: 10px; }
.error { color: red; text-align: center; margin-top: 10px; }


---

4Ô∏è‚É£ RoomService.ts Method

updateRoom(id: number, roomData: any): Observable<any> {
  return this.http.put(`${this.apiUrl}/${id}`, roomData);
}


---

5Ô∏è‚É£ Routing (app.routes.ts)

{ path: 'update-room', component: UpdateRoomComponent }


---

‚úÖ Usage

1. Browser ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ú‡§æ:



http://localhost:4200/update-room

2. Room ID ‡§ü‡§æ‡§ï‡§æ, ‡§¨‡§æ‡§ï‡•Ä fields ‡§≠‡§∞‡•Ç‡§® Update Room click ‡§ï‡§∞‡§æ.


3. Backend call ‡§π‡•ã‡§à‡§≤, success/error message display ‡§π‡•ã‡§à‡§≤.




---

‡§§‡•Å‡§≤‡§æ ‡§π‡§µ‡§Ç ‡§§‡§∞ ‡§™‡•Å‡§¢‡•á Delete Room Page ‡§Ü‡§£‡§ø Get Rooms By Hotel Page ‡§™‡§£ full code ready-to-run ‡§¶‡•á‡§ä ‡§∂‡§ï‡§§‡•ã, ‡§§‡§∏‡§Ç‡§ö Available Rooms Page ‡§™‡§£ ‡§§‡§Ø‡§æ‡§∞.

‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§™‡•Å‡§¢‡•á Delete Room setup ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§ï‡§æ?











‡§¨‡§∞‡•ã‡§¨‡§∞! üôÇ ‡§Ü‡§™‡§£ step-by-step, full Angular frontend setup ‡§¶‡•á‡§ä ‚Äî ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï backend route ‡§∏‡§æ‡§†‡•Ä TS + HTML + CSS ready-to-run.

‡§Ü‡§™‡§£ ‡§∏‡•Å‡§∞‡•Å ‡§ï‡§∞‡•Ç Get Room By ID ‡§™‡§æ‡§∏‡•Ç‡§®.


---

1Ô∏è‚É£ Get Room By ID Page

Folder Structure

features/room/get-room/
 ‚îú‚îÄ get-room.component.ts
 ‚îú‚îÄ get-room.component.html
 ‚îú‚îÄ get-room.component.css


---

1. get-room.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { RoomService } from '../../../core/services/roomservice';
import { Room } from '../../../core/models/room.model';

@Component({
  selector: 'app-get-room',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './get-room.component.html',
  styleUrls: ['./get-room.component.css']
})
export class GetRoomComponent implements OnInit {
  roomForm!: FormGroup;
  roomDetails: Room | null = null;
  errorMessage = '';

  constructor(private fb: FormBuilder, private roomService: RoomService) {}

  ngOnInit(): void {
    this.roomForm = this.fb.group({
      id: [null, [Validators.required, Validators.min(1)]]
    });
  }

  fetchRoom(): void {
    if (this.roomForm.valid) {
      const roomId = this.roomForm.value.id;
      this.roomService.getRoomById(roomId).subscribe({
        next: (room) => {
          this.roomDetails = room;
          this.errorMessage = '';
        },
        error: () => {
          this.roomDetails = null;
          this.errorMessage = 'Room not found.';
        }
      });
    }
  }
}


---

2. get-room.component.html

<div class="get-room-container">
  <h2>Get Room By ID</h2>

  <form [formGroup]="roomForm" (ngSubmit)="fetchRoom()">
    <div class="form-group">
      <label>Room ID:</label>
      <input type="number" formControlName="id" placeholder="Enter Room ID" />
    </div>

    <button type="submit" [disabled]="roomForm.invalid">Fetch Room</button>
  </form>

  <p class="error" *ngIf="errorMessage">{{ errorMessage }}</p>

  <div *ngIf="roomDetails" class="room-details">
    <h3>Room Details</h3>
    <p><strong>Room ID:</strong> {{ roomDetails.roomId }}</p>
    <p><strong>Type:</strong> {{ roomDetails.type }}</p>
    <p><strong>Price:</strong> {{ roomDetails.price }}</p>
    <p><strong>Availability:</strong> {{ roomDetails.availability ? 'Available' : 'Not Available' }}</p>
    <p><strong>Features:</strong> {{ roomDetails.features }}</p>
    <p><strong>Hotel ID:</strong> {{ roomDetails.hotelId }}</p>
  </div>
</div>


---

3. get-room.component.css

.get-room-container {
  max-width: 450px;
  margin: 40px auto;
  padding: 25px;
  border-radius: 12px;
  box-shadow: 0 0 12px rgba(0,0,0,0.1);
  background-color: #fff;
}

h2 {
  text-align: center;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 15px;
  display: flex;
  flex-direction: column;
}

label {
  font-weight: 600;
  margin-bottom: 5px;
}

input {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 8px;
}

button {
  width: 100%;
  padding: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
}

button:hover {
  background-color: #0056b3;
}

.error {
  color: red;
  margin-top: 10px;
  text-align: center;
}

.room-details {
  margin-top: 20px;
  border-top: 1px solid #ddd;
  padding-top: 15px;
}

.room-details p {
  margin: 5px 0;
}


---

4Ô∏è‚É£ RoomService.ts Method

getRoomById(id: number): Observable<Room> {
  return this.http.get<Room>(`${this.apiUrl}/${id}`);
}


---

5Ô∏è‚É£ Routing (app.routes.ts)

{ path: 'get-room', component: GetRoomComponent }


---

‚úÖ ‡§Ü‡§§‡§æ browser ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ú‡§æ:

http://localhost:4200/get-room

Room ID ‡§¶‡•ç‡§Ø‡§æ ‚Üí Fetch Room

Response display ‡§π‡•ã‡§à‡§≤.



---

‡§§‡•Å‡§≤‡§æ ‡§π‡§µ‡§Ç ‡§§‡§∞ ‡§™‡•Å‡§¢‡•á 2Ô∏è‚É£ Update Room Page setup ‡§¶‡•á‡§§‡•ã TS + HTML + CSS ‡§™‡•Ç‡§∞‡•ç‡§£ style ‡§Æ‡§ß‡•ç‡§Ø‡•á.

‡§¶‡•á‡§ä ‡§ï‡§æ ‡§™‡•Å‡§¢‡•á Update Room?









Perfect! üî• ‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ final, fully corrected, standalone + reactive form + routing ready-to-run Angular setup ‡§¶‡•á‡§§‡•ã. ‡§π‡•ç‡§Ø‡§æ setup ‡§Æ‡§ß‡•ç‡§Ø‡•á BrowserModule misuse ‡§®‡§æ‡§π‡•Ä, [formGroup] ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§≤, ‡§Ü‡§£‡§ø Create Room + Get All Rooms ‡§¶‡•ã‡§®‡•ç‡§π‡•Ä ‡§ö‡§æ‡§≤‡§§‡•Ä‡§≤.


---

1Ô∏è‚É£ app.component.ts (Standalone Root)

import { Component, signal } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';

// Features
import { Login } from './features/auth/login/login';
import { Register } from './features/auth/register/register';
import { WelcomeUser } from './features/user/welcome-user/welcome-user';
import { CreateHotel } from './features/hotel/create-hotel/hotel';
import { GetAllHotelsComponent } from './features/hotel/get-all-hotels/hotel';
import { UpdateHotelComponent } from './features/hotel/update-hotel/hotel';
import { SearchHotelComponent } from './features/hotel/search-hotel/hotel';
import { FilterHotelComponent } from './features/hotel/filter-hotel/hotel';
import { RoomComponent } from './features/room/get-all-rooms/room';
import { CreateRoomComponent } from './features/room/create-room/room';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    RouterOutlet,
    Login,
    Register,
    WelcomeUser,
    CreateHotel,
    GetAllHotelsComponent,
    UpdateHotelComponent,
    SearchHotelComponent,
    FilterHotelComponent,
    RoomComponent,
    CreateRoomComponent
  ],
  templateUrl: './app.html',
  styleUrls: ['./app.css']
})
export class App {
  protected readonly title = signal('SmartHotelBookingSystem');
}


---

2Ô∏è‚É£ create-room.component.ts (Standalone)

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { RoomService } from '../../../core/services/roomservice';

@Component({
  selector: 'app-create-room',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './create-room.component.html',
  styleUrls: ['./create-room.component.css']
})
export class CreateRoomComponent implements OnInit {
  roomForm!: FormGroup;
  successMessage = '';
  errorMessage = '';

  constructor(private fb: FormBuilder, private roomService: RoomService) {}

  ngOnInit(): void {
    this.roomForm = this.fb.group({
      type: ['', Validators.required],
      price: [null, [Validators.required, Validators.min(1)]],
      availability: [true, Validators.required],
      features: ['', Validators.required],
      hotelId: [null, Validators.required]
    });
  }

  createRoom(): void {
    if (this.roomForm.valid) {
      this.roomService.createRoom(this.roomForm.value).subscribe({
        next: () => {
          this.successMessage = 'Room created successfully!';
          this.errorMessage = '';
          this.roomForm.reset();
        },
        error: () => {
          this.errorMessage = 'Failed to create room.';
          this.successMessage = '';
        }
      });
    } else {
      this.errorMessage = 'Please fill all required fields.';
      this.successMessage = '';
    }
  }
}


---

3Ô∏è‚É£ create-room.component.html

<div class="room-container">
  <h2>Create New Room</h2>

  <form [formGroup]="roomForm" (ngSubmit)="createRoom()">
    <div class="form-group">
      <label>Room Type:</label>
      <input type="text" formControlName="type" placeholder="Deluxe, Suite..." />
    </div>

    <div class="form-group">
      <label>Price:</label>
      <input type="number" formControlName="price" placeholder="Enter price" />
    </div>

    <div class="form-group">
      <label>Availability:</label>
      <select formControlName="availability">
        <option [value]="true">Available</option>
        <option [value]="false">Not Available</option>
      </select>
    </div>

    <div class="form-group">
      <label>Features:</label>
      <input type="text" formControlName="features" placeholder="AC, WiFi, TV..." />
    </div>

    <div class="form-group">
      <label>Hotel ID:</label>
      <input type="number" formControlName="hotelId" placeholder="Associated hotel ID" />
    </div>

    <button type="submit" [disabled]="roomForm.invalid">Create Room</button>
  </form>

  <p class="success" *ngIf="successMessage">{{ successMessage }}</p>
  <p class="error" *ngIf="errorMessage">{{ errorMessage }}</p>
</div>


---

4Ô∏è‚É£ create-room.component.css

.room-container {
  max-width: 450px;
  margin: 40px auto;
  padding: 25px;
  border-radius: 12px;
  box-shadow: 0 0 12px rgba(0, 0, 0, 0.1);
  background-color: #fff;
}

h2 {
  text-align: center;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 15px;
  display: flex;
  flex-direction: column;
}

label {
  font-weight: 600;
  margin-bottom: 5px;
}

input, select {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 8px;
}

button {
  width: 100%;
  padding: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-size: 16px;
}

button:hover {
  background-color: #0056b3;
}

.success { color: green; text-align: center; margin-top: 10px; }
.error { color: red; text-align: center; margin-top: 10px; }


---

5Ô∏è‚É£ RoomService Method

createRoom(roomData: any): Observable<any> {
  return this.http.post(`${this.apiUrl}/rooms`, roomData);
}


---

6Ô∏è‚É£ Routing (app.routes.ts)

{ path: 'create-room', component: CreateRoomComponent },
{ path: 'get-all-rooms', component: RoomComponent }


---

‚úÖ Key Points

[formGroup] works (ReactiveFormsModule imported in standalone component)

BrowserModule only root bootstrap ‡§Æ‡§ß‡•ç‡§Ø‡•á, standalone components ‡§Æ‡§ß‡•ç‡§Ø‡•á CommonModule

Create Room + Get All Rooms ready-to-run



---

7Ô∏è‚É£ Run

ng serve

Browser:

http://localhost:4200/create-room

Form ‡§¶‡§ø‡§∏‡•á‡§≤, submit ‡§ï‡§∞‡•á‡§≤, backend call ‡§π‡•ã‡§à‡§≤.


---

‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ ‡§π‡§µ‡•á ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§Æ‡•Ä ‡§™‡•Å‡§¢‡•á Rooms List page + Create Room page navigation button ready setup ‡§™‡§£ ‡§¶‡•á‡§ä ‡§∂‡§ï‡§§‡•ã, ‡§ú‡•á ‡§è‡§ï‡§¶‡§Æ smooth user experience ‡§¶‡•á‡§à‡§≤.

‡§ï‡§∞‡•Ç ‡§ï‡§æ?












mport { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { RoomService } from '../../../core/services/roomservice';

@Component({
  selector: 'app-create-room',
  standalone: true, // üëà standalone
  imports: [CommonModule, ReactiveFormsModule], // üëà ‡§á‡§•‡•á import ‡§ï‡§∞‡§æ
  templateUrl: './create-room.component.html',
  styleUrls: ['./create-room.component.css']
})
export class CreateRoomComponent implements OnInit {
  roomForm!: FormGroup;
  successMessage = '';
  errorMessage = '';

  constructor(private fb: FormBuilder, private roomService: RoomService) {}

  ngOnInit(): void {
    this.roomForm = this.fb.group({
      type: ['', Validators.required],
      price: [null, [Validators.required, Validators.min(1)]],
      availability: [true, Validators.required],
      features: ['', Validators.required],
      hotelId: [null, Validators.required]
    });
  }

  createRoom(): void {
    if (this.roomForm.valid) {
      this.roomService.createRoom(this.roomForm.value).subscribe({
        next: () => {
          this.successMessage = 'Room created successfully!';
          this.errorMessage = '';
          this.roomForm.reset();
        },
        error: () => {
          this.errorMessage = 'Failed to create room.';
          this.successMessage = '';
        }
      });
    } else {
      this.errorMessage = 'Please fill all required fields.';
      this.successMessage = '';
    }
  }
}







import { Component, signal } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { BrowserModule } from '@angular/platform-browser';
import { ReactiveFormsModule } from '@angular/forms';

// Features
import { Login } from './features/auth/login/login';
import { WelcomeUser } from './features/user/welcome-user/welcome-user';
import { Register } from './features/auth/register/register';
import { CreateHotel } from './features/hotel/create-hotel/hotel';
import { GetAllHotelsComponent } from './features/hotel/get-all-hotels/hotel';
import { UpdateHotelComponent } from './features/hotel/update-hotel/hotel';
import { SearchHotelComponent } from './features/hotel/search-hotel/hotel';
import { FilterHotelComponent } from './features/hotel/filter-hotel/hotel';
import { RoomComponent } from './features/room/get-all-rooms/room';
import { CreateRoomComponent } from './features/room/create-room/room';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    BrowserModule,
    ReactiveFormsModule,
    RouterOutlet,
    Login,
    Register,
    WelcomeUser,
    CreateHotel,
    GetAllHotelsComponent,
    UpdateHotelComponent,
    SearchHotelComponent,
    FilterHotelComponent,
    RoomComponent,
    CreateRoomComponent
  ],
  templateUrl: './app.html',
  styleUrls: ['./app.css']
})
export class App {
  protected readonly title = signal('SmartHotelBookingSystem');
}







Perfect üî• ‡§§‡•Å‡§ù‡§Ç ‡§Æ‡•ç‡§π‡§£‡§£‡§Ç ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‚Äî ‚ÄúRoom create‚Äù ‡§ö‡§Ç code ‡§ï‡•ã‡§£‡§§‡•ç‡§Ø‡§æ file ‡§Æ‡§ß‡•ç‡§Ø‡•á add ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§π‡•á direct ‡§∏‡§æ‡§Ç‡§ó.
‡§ö‡§≤, step-by-step clear ‡§∏‡§æ‡§Ç‡§ó‡§§‡•ã üëá


---

üß≠ ‡§§‡•Å‡§≤‡§æ ‡§π‡•á file create ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§Ü‡§π‡•á

üìÅ Path (Angular frontend):

frontend/
 ‚îî‚îÄ‚îÄ SmartHotelBookingSystem/
     ‚îî‚îÄ‚îÄ src/
         ‚îî‚îÄ‚îÄ app/
             ‚îî‚îÄ‚îÄ features/
                 ‚îî‚îÄ‚îÄ room/
                     ‚îî‚îÄ‚îÄ create-room/
                         ‚û§ create-room.component.ts
                         ‚û§ create-room.component.html
                         ‚û§ create-room.component.css


---

üß© Step 1: create-room.component.ts  (üëâ ‡§π‡•Ä file copy ‡§ï‡§∞)

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { RoomService } from '../../../core/services/roomservice';

@Component({
  selector: 'app-create-room',
  templateUrl: './create-room.component.html',
  styleUrls: ['./create-room.component.css']
})
export class CreateRoomComponent implements OnInit {
  roomForm!: FormGroup;
  successMessage: string = '';
  errorMessage: string = '';

  constructor(private fb: FormBuilder, private roomService: RoomService) {}

  ngOnInit(): void {
    this.roomForm = this.fb.group({
      type: ['', Validators.required],
      price: [null, [Validators.required, Validators.min(1)]],
      availability: [true, Validators.required],
      features: ['', Validators.required],
      hotelId: [null, Validators.required]
    });
  }

  createRoom(): void {
    if (this.roomForm.valid) {
      this.roomService.createRoom(this.roomForm.value).subscribe({
        next: (response) => {
          this.successMessage = 'Room created successfully!';
          this.errorMessage = '';
          this.roomForm.reset();
        },
        error: (err) => {
          console.error(err);
          this.errorMessage = 'Failed to create room. Please try again.';
          this.successMessage = '';
        }
      });
    } else {
      this.errorMessage = 'Please fill all required fields correctly.';
      this.successMessage = '';
    }
  }
}


---

üñºÔ∏è Step 2: create-room.component.html

<div class="room-container">
  <h2>Create New Room</h2>

  <form [formGroup]="roomForm" (ngSubmit)="createRoom()">
    <div class="form-group">
      <label>Room Type:</label>
      <input type="text" formControlName="type" placeholder="e.g. Deluxe, Suite, Standard" />
    </div>

    <div class="form-group">
      <label>Price:</label>
      <input type="number" formControlName="price" placeholder="Enter room price" />
    </div>

    <div class="form-group">
      <label>Availability:</label>
      <select formControlName="availability">
        <option [value]="true">Available</option>
        <option [value]="false">Not Available</option>
      </select>
    </div>

    <div class="form-group">
      <label>Features:</label>
      <input type="text" formControlName="features" placeholder="AC, WiFi, TV, etc." />
    </div>

    <div class="form-group">
      <label>Hotel ID:</label>
      <input type="number" formControlName="hotelId" placeholder="Enter associated hotel ID" />
    </div>

    <button type="submit" [disabled]="roomForm.invalid">Create Room</button>
  </form>

  <p class="success" *ngIf="successMessage">{{ successMessage }}</p>
  <p class="error" *ngIf="errorMessage">{{ errorMessage }}</p>
</div>


---

üé® Step 3: create-room.component.css

.room-container {
  max-width: 450px;
  margin: 40px auto;
  padding: 25px;
  border-radius: 12px;
  box-shadow: 0 0 12px rgba(0, 0, 0, 0.1);
  background-color: #fff;
}

h2 {
  text-align: center;
  color: #333;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 15px;
  display: flex;
  flex-direction: column;
}

label {
  font-weight: 600;
  margin-bottom: 5px;
}

input,
select {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 8px;
}

button {
  width: 100%;
  padding: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

.success {
  color: green;
  text-align: center;
  margin-top: 10px;
}

.error {
  color: red;
  text-align: center;
  margin-top: 10px;
}


---

üß† Step 4: roomservice.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á method ‡§ú‡•ã‡§°‡§æ

(‡§π‡•Ä file ‡§Ü‡§π‡•á: src/app/core/services/roomservice.ts)

createRoom(roomData: any): Observable<any> {
  return this.http.post(`${this.apiUrl}/rooms`, roomData);
}


---

üõ†Ô∏è Step 5: Route ‡§ú‡•ã‡§°‡§æ (app.routes.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á)

{ path: 'create-room', component: CreateRoomComponent },


---

‚úÖ Step 6: app.module.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á ReactiveFormsModule import ‡§ï‡§∞

import { ReactiveFormsModule } from '@angular/forms';

@NgModule({
  imports: [
    BrowserModule,
    ReactiveFormsModule
  ],
})


---

üöÄ Step 7: Run ‡§ï‡§∞‡§æ

ng serve

Browser ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ú‡§æ üëâ
üîπ http://localhost:4200/create-room

‡§§‡§ø‡§•‡•á ‡§§‡•Ç room details ‡§≠‡§∞‡•Ç‡§® Create Room click ‡§ï‡§∞
‚Üí API call ‡§π‡•ã‡§à‡§≤ ‡§Ü‡§£‡§ø success message ‡§¶‡§ø‡§∏‡•á‡§≤ ‚úÖ


---

‡§π‡§µ‡§Ç ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§™‡•Å‡§¢‡•á ‚ÄúGet All Rooms + Create Room switch buttons (navigate)‚Äù ‡§™‡§£ ‡§¶‡•á‡§ä ‡§ï‡§æ?
‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‚ÄúRooms List‚Äù ‡§µ‡§∞‡•Ç‡§® ‚ÄúCreate Room‚Äù button click ‡§ï‡•á‡§≤‡§Ç ‡§ï‡•Ä page switch ‡§π‡•ã‡§à‡§≤.

