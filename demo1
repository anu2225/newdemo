
рдПрдХрджрдо рдмрд░реЛрдмрд░ тЬЕ тАФ рдореНрд╣рдгрдЬреЗ рдЖрддрд╛ рдЖрдкрд▓реНрдпрд╛рд▓рд╛ role-based update restriction рдареЗрд╡рд╛рдпрдЪрд╛ рдЖрд╣реЗ (рдлрдХреНрдд Manager user рд▓рд╛ update рдХрд░рддрд╛ рдпреЗрдИрд▓).

рд╕рдордЬрд▓рдВ рддреБрдЭрдВ logic:

рдХреЛрдгрддрд╛рд╣реА user hotel list рдкрд╛рд╣реВ рд╢рдХрддреЛ тЬЕ

рдкрдг update (PUT) рдлрдХреНрдд Manager role рд▓рд╛ рдХрд░рддрд╛ рдпреЗрдИрд▓ тЭМ рдЗрддрд░рд╛рдВрдирд╛ рдирд╛рд╣реА



---

ЁЯФР Step-by-step Plan for Update Hotel (with role check)

1я╕ПтГг hotel.service.ts

рд╣реА file рдЖрдзреАрдЪ рдЖрд╣реЗ рдкрдг updateHotel() method рд╡рд╛рдкрд░рддреЛ рдЖрдкрдг тАФ

updateHotel(id: number, data: any, token: string): Observable<any> {
  const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
  return this.http.put(`${this.apiUrl}/${id}`, data, { headers });
}

2я╕ПтГг рдЖрддрд╛ рдирд╡реАрди folder рддрдпрд╛рд░ рдХрд░:

src/app/features/hotel/update-hotel/
 тФЬтФАтФА hotel.ts
 тФЬтФАтФА hotel.html
 тФФтФАтФА hotel.css


---

ЁЯзй File 1я╕ПтГг тАФ hotel.ts (Reactive Form + Role Check)

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { HotelService } from '../services/hotel.service';

@Component({
  selector: 'app-update-hotel',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './hotel.html',
  styleUrls: ['./hotel.css']
})
export class UpdateHotel implements OnInit {
  hotelForm!: FormGroup;
  message = '';
  hotelId!: number;
  userRole = ''; // user role (e.g. 'Manager', 'Customer', etc.)

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private hotelService: HotelService,
    private router: Router
  ) {}

  ngOnInit() {
    // form setup
    this.hotelForm = this.fb.group({
      name: ['', Validators.required],
      location: ['', Validators.required],
      amenities: ['', Validators.required],
      rating: [null, [Validators.required, Validators.max(5)]]
    });

    // role localStorage рдордзреВрди рдШреНрдпрд╛ (login рдирдВрддрд░ store рдХреЗрд▓реЗрд▓рд╛ рдЕрд╕реЗрд▓)
    this.userRole = localStorage.getItem('role') || '';

    // URL рдордзреВрди hotel id рдШреНрдпрд╛
    this.hotelId = Number(this.route.snapshot.paramMap.get('id'));

    // рдбреЗрдЯрд╛ рд▓реЛрдб рдХрд░рд╛
    this.hotelService.getHotelById(this.hotelId).subscribe({
      next: (res) => {
        this.hotelForm.patchValue(res);
      },
      error: (err) => {
        console.error(err);
        this.message = 'Failed to load hotel details!';
      }
    });
  }

  onSubmit() {
    if (this.userRole !== 'Manager') {
      this.message = 'Only Manager can update hotels!';
      return;
    }

    if (this.hotelForm.invalid) {
      this.message = 'Please fill all fields correctly!';
      return;
    }

    const token = localStorage.getItem('token') || '';
    this.hotelService.updateHotel(this.hotelId, this.hotelForm.value, token).subscribe({
      next: (res) => {
        this.message = 'Hotel updated successfully!';
        this.router.navigate(['/hotels']);
      },
      error: (err) => {
        console.error(err);
        this.message = 'Something went wrong while updating hotel!';
      }
    });
  }
}


---

ЁЯк╢ File 2я╕ПтГг тАФ hotel.html

<div class="container">
  <h2>Update Hotel</h2>

  <form [formGroup]="hotelForm" (ngSubmit)="onSubmit()">
    <label>Hotel Name:</label>
    <input type="text" formControlName="name" />

    <label>Location:</label>
    <input type="text" formControlName="location" />

    <label>Amenities:</label>
    <input type="text" formControlName="amenities" />

    <label>Rating (1-5):</label>
    <input type="number" formControlName="rating" />

    <button type="submit">Update Hotel</button>
  </form>

  <p class="message">{{ message }}</p>
</div>


---

ЁЯОи File 3я╕ПтГг тАФ hotel.css

.container {
  width: 400px;
  margin: 40px auto;
  padding: 20px;
  border-radius: 10px;
  background-color: #f8f9fa;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h2 {
  text-align: center;
}

label {
  display: block;
  margin-top: 10px;
  font-weight: 600;
}

input {
  width: 100%;
  padding: 8px;
  margin-top: 5px;
  border-radius: 5px;
  border: 1px solid #ccc;
}

button {
  width: 100%;
  margin-top: 15px;
  padding: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.message {
  margin-top: 15px;
  text-align: center;
  font-weight: 600;
  color: green;
}


---

ЁЯЫгя╕П Add route (in app.routes.ts)

import { UpdateHotel } from './features/hotel/update-hotel/hotel';

export const routes: Routes = [
  { path: 'update-hotel/:id', component: UpdateHotel }
];


---

тЬЕ рдЖрддрд╛ рдЬрд░ user рдХрдбреЗ role Manager рдЕрд╕реЗрд▓ (stored in localStorage.role),
тЖТ рддреЛ update рдХрд░реВ рд╢рдХреЗрд▓.
ЁЯЪл рдЕрдиреНрдп role рдЕрд╕реЗрд▓ (e.g. Customer, Admin),
тЖТ message рджрд┐рд╕реЗрд▓: "Only Manager can update hotels!"


---

рддрдпрд╛рд░ рдХрд╛ рдордЧ рдкреБрдврдЪрдВ step рдШреЗрдК тАФ Delete Hotel (role-based access + confirmation popup)?

