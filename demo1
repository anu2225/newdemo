import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { HotelService } from '../../../core/services/hotel.service';

@Component({
  selector: 'app-create-hotel',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './create-hotel.component.html',
  styleUrls: ['./create-hotel.component.css']
})
export class CreateHotelComponent {
  hotelForm: FormGroup;
  message = '';

  constructor(
    private fb: FormBuilder,
    private hotelService: HotelService,
    private router: Router
  ) {
    this.hotelForm = this.fb.group({
      name: ['', Validators.required],
      location: ['', Validators.required],
      amenities: ['', Validators.required],
      rating: [null, [Validators.required, Validators.min(1), Validators.max(5)]]
    });
  }

  onSubmit(): void {
    if (this.hotelForm.invalid) {
      this.message = 'Please fill all fields correctly!';
      return;
    }

    const token = localStorage.getItem('token') || '';

    this.hotelService.createHotel(this.hotelForm.value, token).subscribe({
      next: () => {
        this.message = 'Hotel created successfully!';
        setTimeout(() => this.router.navigate(['/hotels']), 1000);
      },
      error: (err) => {
        console.error(err);
        this.message = 'Something went wrong while creating hotel!';
      }
    });
  }
}
















to‡§Ö‡§∞‡•á ‡§¨‡§∞‡•ã‡§¨‡§∞, ‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ ‡§Ü‡§§‡§æ ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ existing code structure ‡§µ‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ full working role-based Hotel List + Update workflow step-by-step ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•Ç‡§® ‡§¶‡•á‡§§‡•ã. ‡§π‡•á plug-and-play ‡§Ü‡§π‡•á ‡§Ü‡§£‡§ø user/manager roles handle ‡§ï‡•á‡§≤‡•á‡§≤‡•á ‡§Ü‡§π‡•á‡§§.


---

1Ô∏è‚É£ AuthService ‚Äì Role Management

auth.service.ts:

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private apiUrl = 'http://localhost:8080/api/auth';
  private currentRole: string = 'USER'; // default

  constructor(private http: HttpClient) {}

  login(credentials: {email: string, password: string}): Observable<any> {
    return this.http.post(`${this.apiUrl}/login`, credentials);
  }

  setRole(role: string) {
    this.currentRole = role;
    localStorage.setItem('role', role);
  }

  getRole(): string {
    return this.currentRole || localStorage.getItem('role') || 'USER';
  }

  isManager(): boolean {
    return this.getRole().toLowerCase() === 'manager';
  }
}


---

2Ô∏è‚É£ HotelService ‚Äì API Calls

hotel.service.ts:

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class HotelService {
  private apiUrl = 'http://localhost:8080/api/hotels';

  constructor(private http: HttpClient) {}

  getHotelList(): Observable<any> {
    return this.http.get(`${this.apiUrl}`);
  }

  getHotelById(id: number): Observable<any> {
    return this.http.get(`${this.apiUrl}/${id}`);
  }

  updateHotel(id: number, hotel: any): Observable<any> {
    return this.http.put(`${this.apiUrl}/${id}`, hotel);
  }
}


---

3Ô∏è‚É£ GetAllHotelsComponent ‚Äì Role Based

get-all-hotels.component.ts:

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule, Router } from '@angular/router';
import { HotelService } from '../services/hotel.service';
import { AuthService } from '../services/auth.service';

@Component({
  selector: 'app-get-all-hotels',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './get-all-hotels.component.html',
  styleUrls: ['./get-all-hotels.component.css']
})
export class GetAllHotelsComponent implements OnInit {
  hotels: any[] = [];
  loading = true;
  error = '';
  role = '';

  constructor(
    private hotelService: HotelService,
    private authService: AuthService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.role = this.authService.getRole();
    this.getHotels();
  }

  getHotels() {
    this.hotelService.getHotelList().subscribe({
      next: (data) => {
        this.hotels = data;
        this.loading = false;
      },
      error: (err) => {
        this.error = 'Error fetching hotels';
        console.error(err);
        this.loading = false;
      }
    });
  }

  editHotel(id: number) {
    if (this.authService.isManager()) {
      this.router.navigate(['/update-hotel', id]);
    } else {
      alert('Only Manager can update hotels!');
    }
  }
}


---

4Ô∏è‚É£ GetAllHotels HTML

get-all-hotels.component.html:

<div class="hotel-container">
  <h2>Hotel List</h2>

  <div *ngIf="loading">Loading hotels...</div>
  <div *ngIf="error" class="error">{{ error }}</div>

  <table *ngIf="!loading && hotels.length > 0">
    <thead>
      <tr>
        <th>Name</th>
        <th>Location</th>
        <th>Amenities</th>
        <th>Rating</th>
        <th *ngIf="role.toLowerCase() === 'manager'">Manager ID</th>
        <th *ngIf="role.toLowerCase() === 'manager'">Action</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let h of hotels">
        <td>{{ h.name }}</td>
        <td>{{ h.location }}</td>
        <td>{{ h.amenities }}</td>
        <td>{{ h.rating }}</td>
        <td *ngIf="role.toLowerCase() === 'manager'">{{ h.managerId }}</td>
        <td *ngIf="role.toLowerCase() === 'manager'">
          <button (click)="editHotel(h.hotelId)">Update</button>
        </td>
      </tr>
    </tbody>
  </table>

  <p *ngIf="!loading && hotels.length === 0">No hotels found!</p>
</div>


---

5Ô∏è‚É£ UpdateHotelComponent

update-hotel.component.ts:

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { HotelService } from '../services/hotel.service';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-update-hotel',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './update-hotel.component.html',
  styleUrls: ['./update-hotel.component.css']
})
export class UpdateHotelComponent implements OnInit {
  updateForm!: FormGroup;
  hotelId!: number;
  message = '';

  constructor(
    private fb: FormBuilder,
    private hotelService: HotelService,
    private route: ActivatedRoute,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.updateForm = this.fb.group({
      name: ['', Validators.required],
      location: ['', Validators.required],
      amenities: ['', Validators.required],
      rating: ['', [Validators.required, Validators.min(1), Validators.max(5)]]
    });

    this.hotelId = Number(this.route.snapshot.paramMap.get('id'));

    if (this.hotelId) {
      this.hotelService.getHotelById(this.hotelId).subscribe({
        next: (data) => this.updateForm.patchValue(data),
        error: (err) => console.error('Error fetching hotel', err)
      });
    }
  }

  onSubmit(): void {
    if (this.updateForm.valid) {
      this.hotelService.updateHotel(this.hotelId, this.updateForm.value).subscribe({
        next: () => {
          this.message = 'Hotel updated successfully!';
          setTimeout(() => this.router.navigate(['/hotels']), 1500);
        },
        error: (err) => {
          this.message = 'Failed to update hotel.';
          console.error(err);
        }
      });
    }
  }
}


---

6Ô∏è‚É£ UpdateHotel HTML

update-hotel.component.html:

<div class="update-container">
  <h2>Update Hotel Details</h2>

  <form [formGroup]="updateForm" (ngSubmit)="onSubmit()">
    <div class="form-group">
      <label>Hotel Name:</label>
      <input formControlName="name" type="text" placeholder="Enter hotel name" />
    </div>

    <div class="form-group">
      <label>Location:</label>
      <input formControlName="location" type="text" placeholder="Enter location" />
    </div>

    <div class="form-group">
      <label>Amenities:</label>
      <input formControlName="amenities" type="text" placeholder="Enter amenities" />
    </div>

    <div class="form-group">
      <label>Rating:</label>
      <input formControlName="rating" type="number" placeholder="1 - 5" />
    </div>

    <button type="submit" [disabled]="updateForm.invalid">Update Hotel</button>
  </form>

  <p class="message">{{ message }}</p>
</div>


---

‚úÖ 7Ô∏è‚É£ App Routes

app.routes.ts:

import { Routes } from '@angular/router';
import { GetAllHotelsComponent } from './get-all-hotels/get-all-hotels.component';
import { UpdateHotelComponent } from './update-hotel/update-hotel.component';

export const routes: Routes = [
  { path: 'hotels', component: GetAllHotelsComponent },
  { path: 'update-hotel/:id', component: UpdateHotelComponent },
  { path: '', redirectTo: '/hotels', pathMatch: 'full' }
];


---

üí° Logic Summary

1. User login ‚Üí role = user ‚Üí View only hotel list


2. Manager login ‚Üí role = manager ‚Üí View + Update hotels


3. Click Update ‚Üí /update-hotel/:id route ‚Üí form pre-filled ‚Üí update ‚Üí PUT API ‚Üí database updated ‚Üí redirect back to hotel list.




---

‡§ú‡§∞ ‡§π‡§µ‡§Ç ‡§Ö‡§∏‡•á‡§≤, ‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ ‡§Ü‡§§‡§æ Swagger + Postman ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® backend verify ‡§ï‡§∞‡•Ç‡§® plug-and-play flow ready ‡§ï‡§∞‡§æ‡§Ø‡§≤‡§æ step-by-step ‡§¶‡§æ‡§ñ‡§µ‡§§‡•ã, ‡§ú‡•á‡§£‡•á‡§ï‡§∞‡•Ç‡§® Angular+Spring Boot connection perfect ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§≤.

‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§π‡§µ‡§Ç ‡§§‡•á ‡§ï‡§∞‡§§‡•ã ‡§ï‡§æ?

