Perfect üí™ ‚Äî ‡§Ü‡§§‡§æ ‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ Hotel Update Feature ‡§∏‡§æ‡§†‡•Ä ‡§∏‡§ó‡§≥‡•Ä complete files ‡§¶‡•á‡§§‡•ã ‚Äî ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§§‡•Ç direct copy-paste ‡§ï‡§∞‡•Ç‡§® ‡§ö‡§æ‡§≤‡§µ‡•Ç ‡§∂‡§ï‡§∂‡•Ä‡§≤, ‡§ï‡§æ‡§π‡•Ä error ‡§Ø‡•á‡§£‡§æ‡§∞ ‡§®‡§æ‡§π‡•Ä.
‡§π‡•á ‡§∏‡§ó‡§≥‡§Ç Standalone Angular structure ‡§∏‡§æ‡§†‡•Ä ‡§¨‡§®‡§µ‡§≤‡§Ç ‡§Ü‡§π‡•á (component-based ‡§®‡§æ‡§π‡•Ä).


---

üß© Step-by-Step Final Setup


---

1Ô∏è‚É£ hotel.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class HotelService {
  private apiUrl = 'http://localhost:8080/api/hotels';

  constructor(private http: HttpClient) {}

  // Get all hotels
  getHotelList(): Observable<any> {
    return this.http.get(`${this.apiUrl}`);
  }

  // Get hotel by ID
  getHotelById(id: number): Observable<any> {
    return this.http.get(`${this.apiUrl}/${id}`);
  }

  // Update hotel by ID
  updateHotel(id: number, hotel: any): Observable<any> {
    return this.http.put(`${this.apiUrl}/${id}`, hotel);
  }
}


---

2Ô∏è‚É£ update-hotel.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { HotelService } from '../services/hotel.service';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-update-hotel',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './update-hotel.component.html',
  styleUrls: ['./update-hotel.component.css']
})
export class UpdateHotelComponent implements OnInit {
  updateForm!: FormGroup;
  hotelId!: number;
  message = '';

  constructor(
    private fb: FormBuilder,
    private hotelService: HotelService,
    private route: ActivatedRoute,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.updateForm = this.fb.group({
      name: ['', Validators.required],
      location: ['', Validators.required],
      amenities: ['', Validators.required],
      rating: ['', [Validators.required, Validators.min(1), Validators.max(5)]]
    });

    // Get hotel ID from route
    this.hotelId = Number(this.route.snapshot.paramMap.get('id'));

    if (this.hotelId) {
      this.hotelService.getHotelById(this.hotelId).subscribe({
        next: (data) => this.updateForm.patchValue(data),
        error: (err) => console.log('Error fetching hotel', err)
      });
    }
  }

  onSubmit(): void {
    if (this.updateForm.valid) {
      this.hotelService.updateHotel(this.hotelId, this.updateForm.value).subscribe({
        next: () => {
          this.message = 'Hotel updated successfully!';
          setTimeout(() => this.router.navigate(['/hotels']), 1500);
        },
        error: (err) => {
          this.message = 'Failed to update hotel.';
          console.error(err);
        }
      });
    }
  }
}


---

3Ô∏è‚É£ update-hotel.component.html

<div class="update-container">
  <h2>Update Hotel Details</h2>

  <form [formGroup]="updateForm" (ngSubmit)="onSubmit()">
    <div class="form-group">
      <label>Hotel Name:</label>
      <input formControlName="name" type="text" placeholder="Enter hotel name" />
    </div>

    <div class="form-group">
      <label>Location:</label>
      <input formControlName="location" type="text" placeholder="Enter location" />
    </div>

    <div class="form-group">
      <label>Amenities:</label>
      <input formControlName="amenities" type="text" placeholder="Enter amenities" />
    </div>

    <div class="form-group">
      <label>Rating:</label>
      <input formControlName="rating" type="number" placeholder="1 - 5" />
    </div>

    <button type="submit" [disabled]="updateForm.invalid">Update Hotel</button>
  </form>

  <p class="message">{{ message }}</p>
</div>


---

4Ô∏è‚É£ update-hotel.component.css

.update-container {
  width: 400px;
  margin: 60px auto;
  padding: 25px;
  border: 2px solid #ddd;
  border-radius: 10px;
  background-color: #f8f9fa;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

h2 {
  text-align: center;
  color: #333;
}

.form-group {
  margin-bottom: 15px;
}

label {
  font-weight: bold;
  display: block;
  margin-bottom: 5px;
}

input {
  width: 100%;
  padding: 8px;
  border-radius: 8px;
  border: 1px solid #ccc;
}

button {
  width: 100%;
  background-color: #007bff;
  color: white;
  border: none;
  padding: 10px;
  border-radius: 8px;
  cursor: pointer;
  font-size: 15px;
}

button:disabled {
  background-color: #aaa;
}

.message {
  text-align: center;
  margin-top: 10px;
  color: green;
}


---

5Ô∏è‚É£ app.routes.ts

> ‡§π‡•Ä route ‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ main route ‡§´‡§æ‡§à‡§≤‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ü‡§æ‡§ï.



import { Routes } from '@angular/router';
import { UpdateHotelComponent } from './update-hotel/update-hotel.component';
import { GetAllHotelsComponent } from './get-all-hotels/get-all-hotels.component'; // ‡§§‡•Å‡§ù‡§Ç existing component

export const routes: Routes = [
  { path: 'hotels', component: GetAllHotelsComponent },
  { path: 'update-hotel/:id', component: UpdateHotelComponent },
  { path: '', redirectTo: '/hotels', pathMatch: 'full' }
];


---

‚öôÔ∏è Final Flow

‚úÖ Step 1: Manager login ‡§π‡•ã‡§à‡§≤.
‚úÖ Step 2: ‚ÄúHotels‚Äù list ‡§Æ‡§ß‡•Ç‡§® Edit / Update ‡§µ‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ ‚Üí /update-hotel/:id route ‡§µ‡§∞ ‡§ú‡§æ‡§à‡§≤.
‚úÖ Step 3: Form ‡§Æ‡§ß‡•ç‡§Ø‡•á hotel info ‡§¶‡§ø‡§∏‡•á‡§≤ ‚Üí user edit ‡§ï‡§∞‡•Ç‡§® Update Hotel ‡§µ‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§≤.
‚úÖ Step 4: PUT API call ‡§ú‡§æ‡§à‡§≤ backend /api/hotels/{id} ‡§≤‡§æ ‡§Ü‡§£‡§ø MySQL ‡§Æ‡§ß‡•á update ‡§π‡•ã‡§à‡§≤.
‚úÖ Step 5: Success message ‡§¶‡§ø‡§∏‡•á‡§≤ ‡§Ü‡§£‡§ø /hotels ‡§≤‡§æ redirect ‡§π‡•ã‡§à‡§≤.


---

‡§π‡§µ‡§Ç ‡§ï‡§æ ‡§Ü‡§§‡§æ ‡§Æ‡•Ä ‡§π‡•á code backend ‡§∏‡•ã‡§¨‡§§ Swagger ‡§µ‡§∞ test ‡§ï‡§∏‡§Ç ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§§‡•á ‡§™‡§£ step-by-step ‡§∏‡§æ‡§Ç‡§ó‡•Ç? (‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§§‡•Å‡§≤‡§æ confirm ‡§π‡•ã‡§à‡§≤ ‡§ï‡•Ä connection ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§Ç‡§Ø ‡§ï‡§æ ‡§®‡§æ‡§π‡•Ä?)

