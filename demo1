‡§†‡•Ä‡§ï ‡§Ü‡§π‡•á! üòé ‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ UpdateHotel component naming convention ‡§®‡•Å‡§∏‡§æ‡§∞, hotel.ts / hotel.html / hotel.css ready-to-copy ‡§¶‡•á‡§§‡•ã.


---

1Ô∏è‚É£ hotel.ts (UpdateHotel)

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { HotelService } from '../services/hotel.service';

export interface Hotel {
  hotelId: number;
  name: string;
  location: string;
  amenities: string;
  rating: number;
}

@Component({
  selector: 'app-update-hotel',
  standalone: true,
  imports: [CommonModule, FormsModule, RouterModule],
  templateUrl: './hotel.html',
  styleUrls: ['./hotel.css']
})
export class UpdateHotelComponent implements OnInit {
  hotel: Hotel = { hotelId: 0, name: '', location: '', amenities: '', rating: 0 };
  token = localStorage.getItem('token') || '';
  role = (localStorage.getItem('role') || '').trim().toLowerCase();
  message = '';

  constructor(private hotelService: HotelService, private route: ActivatedRoute, private router: Router) {}

  ngOnInit(): void {
    if (this.role !== 'manager') {
      this.message = 'Only Manager can update hotels!';
      return;
    }

    const id = Number(this.route.snapshot.paramMap.get('id'));
    this.hotelService.getHotelById(id).subscribe({
      next: (res) => this.hotel = res,
      error: (err) => {
        console.error(err);
        this.message = 'Failed to fetch hotel data';
      }
    });
  }

  updateHotel() {
    if (!this.hotel.name || !this.hotel.location || !this.hotel.amenities) {
      this.message = 'Please fill all required fields!';
      return;
    }

    this.hotelService.updateHotel(this.hotel.hotelId, this.hotel, this.token).subscribe({
      next: () => this.router.navigate(['/hotels']),
      error: (err) => {
        console.error(err);
        this.message = 'Update failed!';
      }
    });
  }
}


---

2Ô∏è‚É£ hotel.html (UpdateHotel)

<div class="container">
  <h2>Update Hotel</h2>

  <p *ngIf="message" style="color:red">{{ message }}</p>

  <form *ngIf="role === 'manager'" (ngSubmit)="updateHotel()">
    <label>Hotel Name:</label>
    <input type="text" [(ngModel)]="hotel.name" name="name" required />

    <label>Location:</label>
    <input type="text" [(ngModel)]="hotel.location" name="location" required />

    <label>Amenities:</label>
    <input type="text" [(ngModel)]="hotel.amenities" name="amenities" required />

    <label>Rating (1-5):</label>
    <input type="number" [(ngModel)]="hotel.rating" name="rating" min="1" max="5" required />

    <button type="submit">Update Hotel</button>
  </form>
</div>


---

3Ô∏è‚É£ hotel.css (UpdateHotel)

.container {
  width: 400px;
  margin: 40px auto;
  padding: 20px;
  border-radius: 10px;
  background-color: #f8f9fa;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

label {
  display: block;
  margin-top: 10px;
  font-weight: 600;
}

input {
  width: 100%;
  padding: 8px;
  margin-top: 5px;
  border-radius: 5px;
  border: 1px solid #ccc;
}

button {
  width: 100%;
  margin-top: 15px;
  padding: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #0069d9;
}


---

üîπ Usage

1. Folder structure:



features/hotel/update-hotel/
    hotel.ts
    hotel.html
    hotel.css

2. Route add ‡§ï‡§∞‡§æ app.routes.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á:



import { UpdateHotelComponent } from './features/hotel/update-hotel/hotel';

{ path: 'update-hotel/:id', component: UpdateHotelComponent }

3. /hotels page ‚Üí Manager click Update ‚Üí UpdateHotelComponent load ‚Üí prefilled form ‚Üí Submit ‚Üí backend update ‚Üí redirect /hotels ‚úÖ




---

‡§§‡•Å‡§≤‡§æ ‡§π‡§µ‡§Ç ‡§ï‡§æ ‡§Æ‡•Ä ‡§Ü‡§§‡§æ Delete button + full CRUD ready module ‡§∏‡•Å‡§¶‡•ç‡§ß‡§æ ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•Ç‡§® ‡§¶‡•á‡§ä?
‡§§‡§Ø‡§æ‡§∞ ‡§Ö‡§∏‡•á‡§≤ ‡§§‡§∞ ‡§è‡§ï‡§¶‡§Æ copy-paste ready ‡§π‡•ã‡§à‡§≤.

