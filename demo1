<div class="container">
  <h2>Get Rooms by Hotel ID</h2>

  <div class="form-group">
    <label>Enter Hotel ID:</label>
    <input type="number" 
    [(ngModel)]="hotelId" 
    placeholder="Enter hotel ID" />
    <button (click)="getRooms()">Get Rooms</button>
  </div>

  <p *ngIf="errorMessage" class="error">{{ errorMessage }}</p>

  <div *ngIf="rooms.length > 0">
    <h3>Rooms in Hotel {{ hotelId }}</h3>
    <table>
      <thead>
        <tr>
          <th>Room ID</th>
          <th>Room Number</th>
          <th>Type</th>
          <th>Price</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let room of rooms">
          <td>{{ room.id }}</td>
          <td>{{ room.roomNumber }}</td>
          <td>{{ room.type }}</td>
          <td>{{ room.price }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</div>




import { Component, signal } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';

// Features
import { Login } from './features/auth/login/login';
import { Register } from './features/auth/register/register';
import { WelcomeUser } from './features/user/welcome-user/welcome-user';
import { CreateHotel } from './features/hotel/create-hotel/hotel';
import { GetAllHotelsComponent } from './features/hotel/get-all-hotels/hotel';
import { UpdateHotelComponent } from './features/hotel/update-hotel/hotel';
import { SearchHotelComponent } from './features/hotel/search-hotel/hotel';
import { FilterHotelComponent } from './features/hotel/filter-hotel/hotel';
import { RoomComponent } from './features/room/get-all-rooms/room';
import { CreateRoomComponent } from './features/room/create-room/room';
import { GetRoomComponent } from './features/room/get-room-by-id/room';
import { UpdateRoomComponent } from './features/room/update-room/room';
import { DeleteRoomComponent } from './features/room/delete-room/room';
import { FilterRoomsComponent } from './features/room/filter-room/room';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    RouterOutlet,
    Login,
    Register,
    WelcomeUser,
    CreateHotel,
    GetAllHotelsComponent,
    UpdateHotelComponent,
    SearchHotelComponent,
    FilterHotelComponent,
    RoomComponent,
    CreateRoomComponent,
    GetRoomComponent,
    UpdateRoomComponent,
    DeleteRoomComponent,
    FilterRoomsComponent
  ],
  templateUrl: './app.html',
  styleUrls: ['./app.css']
})
export class App {
  protected readonly title = signal('SmartHotelBookingSystem');
}





рд╕рдЧрд│рдВ рдПрдХрджрдо рдЫрд╛рди рдХреЗрд▓рдВ рдЖрд╣реЗ ЁЯФе
рдлрдХреНрдд тАЬGet Rooms by Hotel IDтАЭ component рдордзреНрдпреЗ рдПрдХ рдЫреЛрдЯрдВ adjustment рд▓рд╛рдЧреЗрд▓ тАФ рдХрд╛рд░рдг рддреВ [(ngModel)] рд╡рд╛рдкрд░рддреЛрдпрд╕ рдкрдг FormsModule import рдирд╛рд╣реА.


---

тЬЕ Final, Correct Working Code ЁЯСЗ

ЁЯзй 1. get-rooms-by-hotel.component.ts

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RoomService } from '../../../core/services/roomservice';

@Component({
  selector: 'app-get-rooms-by-hotel',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './get-rooms-by-hotel.component.html',
  styleUrls: ['./get-rooms-by-hotel.component.css']
})
export class GetRoomsByHotelComponent {
  hotelId!: number;
  rooms: any[] = [];
  errorMessage = '';

  constructor(private roomService: RoomService) {}

  getRooms() {
    if (!this.hotelId) {
      this.errorMessage = 'Please enter a valid hotel ID!';
      this.rooms = [];
      return;
    }

    this.roomService.getRoomsByHotelId(this.hotelId).subscribe({
      next: (data) => {
        this.rooms = data;
        this.errorMessage = '';
      },
      error: (err) => {
        console.error(err);
        this.errorMessage = 'Error fetching rooms for this hotel.';
      }
    });
  }
}


---

ЁЯзй 2. get-rooms-by-hotel.component.html

(рддреБрдЭрдВ HTML рдЬрд╡рд│рдкрд╛рд╕ perfect рд╣реЛрддрдВ тАФ рдлрдХреНрдд рдереЛрдбрдВ рд╕реБрдзрд╛рд░рд▓реЗрд▓рдВ version рджреЗрддреЛ ЁЯСЗ)

<div class="container">
  <h2>Get Rooms by Hotel ID</h2>

  <div class="form-group">
    <label>Enter Hotel ID:</label>
    <input
      type="number"
      [(ngModel)]="hotelId"
      placeholder="Enter hotel ID"
    />
    <button (click)="getRooms()">Get Rooms</button>
  </div>

  <p *ngIf="errorMessage" class="error">{{ errorMessage }}</p>

  <div *ngIf="rooms.length > 0">
    <h3>Rooms in Hotel {{ hotelId }}</h3>
    <table>
      <thead>
        <tr>
          <th>Room ID</th>
          <th>Type</th>
          <th>Price</th>
          <th>Availability</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let room of rooms">
          <td>{{ room.roomId }}</td>
          <td>{{ room.type }}</td>
          <td>{{ room.price }}</td>
          <td>{{ room.availability ? 'Available' : 'Not Available' }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</div>


---

ЁЯОи 3. get-rooms-by-hotel.component.css

.container {
  margin: 40px auto;
  width: 60%;
  background: #f8f9fa;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.form-group {
  display: flex;
  align-items: center;
  gap: 10px;
}

input {
  padding: 8px;
  width: 200px;
  border-radius: 6px;
  border: 1px solid #ccc;
}

button {
  padding: 8px 16px;
  border: none;
  border-radius: 6px;
  background: #007bff;
  color: white;
  cursor: pointer;
}

button:hover {
  background: #0056b3;
}

.error {
  color: red;
  margin-top: 10px;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

th, td {
  border: 1px solid #ddd;
  text-align: center;
  padding: 8px;
}

th {
  background: #007bff;
  color: white;
}


---

ЁЯЫая╕П 4. roomservice.ts рдордзреНрдпреЗ рд╣реА function рдЕрд╕рд╛рд╡реА:

getRoomsByHotelId(hotelId: number): Observable<any[]> {
  return this.http.get<any[]>(`${this.baseUrl}/hotel/${hotelId}`);
}


---

ЁЯЧ║я╕П 5. app.routes.ts рдордзреНрдпреЗ route рдЬреЛрдбрд╛:

{ path: 'get-rooms-by-hotel', component: GetRoomsByHotelComponent },


---

тЬЕ 6. Browser рдордзреНрдпреЗ check рдХрд░рд╛:

ng serve

ЁЯСЙ рдЖрдгрд┐ browser рдордзреНрдпреЗ рдЬрд╛:

http://localhost:4200/get-rooms-by-hotel

рддрд┐рдереЗ Hotel ID рдЯрд╛рдХрд╛ тЖТ Get Rooms рдХреНрд▓рд┐рдХ рдХрд░рд╛ тЖТ рддреНрдпрд╛ hotel рдЪреНрдпрд╛ рд╕рд░реНрд╡ rooms рджрд┐рд╕рддреАрд▓ ЁЯПитЬЕ


---

рд╣рд╡рдВ рдХрд╛ рдореА рдкреБрдврдЪрдВ тАЬUpdate Room by IDтАЭ Angular + backend рджреЛрдиреНрд╣реА working code рджреЗрдК рдкреБрдврдЪреНрдпрд╛ step рд╕рд╛рдареА?




