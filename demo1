Perfect ЁЯТк рд╕рдордЬрд▓реЛ!
рдЖрдкрдг рдЖрддрд╛ Hotel module рдЪрдВ frontend (Angular standalone) part step-by-step рддрдпрд╛рд░ рдХрд░рдгрд╛рд░ рдЖрд╣реЛрдд ЁЯФе

рд╕рд░реНрд╡ рдлрд╛рдЗрд▓реНрд╕ рддреБрд▓рд╛ рдХреНрд░рдорд╛рдиреЗ рджреЗрддреЛ:
(1я╕ПтГг service тЖТ 2я╕ПтГг model тЖТ 3я╕ПтГг component.ts тЖТ 4я╕ПтГг html тЖТ 5я╕ПтГг css тЖТ 6я╕ПтГг route setup)


---

ЁЯзй 1я╕ПтГг hotel.service.ts

(рд╣реА рдЖрдзреАрдЪ рддрдпрд╛рд░ рдЖрд╣реЗ, рдкрдг final clean version рдЦрд╛рд▓реА рджреЗрддреЛ ЁЯСЗ)

import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class HotelService {
  private apiUrl = 'http://localhost:8080/api/hotels';

  constructor(private http: HttpClient) {}

  getHotelList(): Observable<any> {
    return this.http.get(`${this.apiUrl}`);
  }

  getHotelById(id: number): Observable<any> {
    return this.http.get(`${this.apiUrl}/${id}`);
  }

  createHotel(hotelData: any, token: string): Observable<any> {
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.post(this.apiUrl, hotelData, { headers });
  }

  updateHotel(id: number, data: any, token: string): Observable<any> {
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.put(`${this.apiUrl}/${id}`, data, { headers });
  }

  deleteHotel(id: number, token: string): Observable<any> {
    const headers = new HttpHeaders({ Authorization: `Bearer ${token}` });
    return this.http.delete(`${this.apiUrl}/${id}`, { headers });
  }
}


---

ЁЯз▒ 2я╕ПтГг hotel.model.ts

(Hotel object define рдХрд░рд╛рдпрдЪрд╛ model file)

export interface Hotel {
  hotelId?: number;
  hotelName: string;
  city: string;
  address: string;
  rating: number;
}


---

ЁЯзСтАНЁЯТ╗ 3я╕ПтГг create-hotel.component.ts

(Standalone component тАФ new hotel add рдХрд░рдгреНрдпрд╛рд╕рд╛рдареА)

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HotelService } from '../services/hotel.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-create-hotel',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './create-hotel.component.html',
  styleUrls: ['./create-hotel.component.css']
})
export class CreateHotelComponent {
  hotel = {
    hotelName: '',
    city: '',
    address: '',
    rating: 0
  };

  token = ''; // рдпреЗрдереЗ JWT token рдареЗрд╡рд╛рдпрдЪрд╛ (login рдирдВрддрд░ localStorage рдордзреВрди рдШреЗрддрд╛ рдпреЗрдИрд▓)
  message = '';

  constructor(private hotelService: HotelService, private router: Router) {}

  createHotel() {
    if (!this.hotel.hotelName || !this.hotel.city) {
      this.message = 'Please fill all fields!';
      return;
    }

    this.hotelService.createHotel(this.hotel, this.token).subscribe({
      next: (res) => {
        this.message = 'Hotel created successfully!';
        this.router.navigate(['/hotels']);
      },
      error: (err) => {
        console.error(err);
        this.message = 'Something went wrong!';
      }
    });
  }
}


---

ЁЯк╢ 4я╕ПтГг create-hotel.component.html

<div class="container">
  <h2>Add New Hotel</h2>

  <form (ngSubmit)="createHotel()">
    <label>Hotel Name:</label>
    <input type="text" [(ngModel)]="hotel.hotelName" name="hotelName" required />

    <label>City:</label>
    <input type="text" [(ngModel)]="hotel.city" name="city" required />

    <label>Address:</label>
    <input type="text" [(ngModel)]="hotel.address" name="address" required />

    <label>Rating:</label>
    <input type="number" [(ngModel)]="hotel.rating" name="rating" required />

    <button type="submit">Create Hotel</button>
  </form>

  <p class="message">{{ message }}</p>
</div>


---

ЁЯОи 5я╕ПтГг create-hotel.component.css

.container {
  width: 400px;
  margin: 40px auto;
  padding: 20px;
  border-radius: 10px;
  background-color: #f8f9fa;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

label {
  display: block;
  margin-top: 10px;
  font-weight: 600;
}

input {
  width: 100%;
  padding: 8px;
  margin-top: 5px;
  border-radius: 5px;
  border: 1px solid #ccc;
}

button {
  width: 100%;
  margin-top: 15px;
  padding: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.message {
  margin-top: 15px;
  text-align: center;
  font-weight: 600;
  color: green;
}


---

ЁЯЫгя╕П 6я╕ПтГг Route setup (app.routes.ts)

import { Routes } from '@angular/router';
import { CreateHotelComponent } from './features/hotel/create-hotel/create-hotel.component';

export const routes: Routes = [
  { path: 'create-hotel', component: CreateHotelComponent }
];


---

тЬЕ рдЖрддрд╛ рд╡рд╛рдкрд░рд╛рдпрдЪрдВ рдХрд╕рдВ:

1. рд╕рд░реНрд╡ рдлрд╛рдЗрд▓реНрд╕ рддреБрдЭреНрдпрд╛ Angular рдкреНрд░реЛрдЬреЗрдХреНрдЯрдордзреНрдпреЗ рдпреЛрдЧреНрдп рдард┐рдХрд╛рдгреА рдареЗрд╡.


2. app.routes.ts рдордзреНрдпреЗ route add рдХрд░.


3. Backend рдЪрд╛рд▓реВ рдареЗрд╡ (Spring Boot port: 8080).


4. Browser рдордзреНрдпреЗ рдЬрд╛ ЁЯСЙ http://localhost:4200/create-hotel.


5. рдлреЙрд░реНрдо рднрд░реВрди тАЬCreate HotelтАЭ рдХреНрд▓рд┐рдХ рдХрд░.




---

рд╣рд╡рдВ рдХрд╛ рдореА рдЖрддрд╛ Get All Hotels List component (standalone) рджреЗрдК рдкреБрдврдЪрдВ step рдореНрд╣рдгреВрди?
рдордЧ Create Hotel тЖТ Get All Hotels тЖТ Update тЖТ Delete рдЕрд╕рдВ full module рдкреВрд░реНрдг рдХрд░реВ.

