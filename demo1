ठीक आहे! मग मी तुला complete working UpdateHotelComponent देतो — hotelId form मध्ये नाही, फक्त बाकी fields update करता येतील, आणि manager login वरच काम करेल.


---

1️⃣ update-hotel.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { HotelService } from '../services/hotel.service';

@Component({
  selector: 'app-update-hotel',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './hotel.html',
  styleUrls: ['./hotel.css']
})
export class UpdateHotelComponent implements OnInit {
  hotelForm!: FormGroup;
  hotelId!: number;
  message: string = '';
  isManager: boolean = false;

  constructor(
    private fb: FormBuilder,
    private hotelService: HotelService,
    private route: ActivatedRoute,
    private router: Router
  ) {}

  ngOnInit(): void {
    // Check if logged-in user is manager
    const role = localStorage.getItem('role');
    this.isManager = role === 'MANAGER';

    // Get hotelId from URL
    this.hotelId = Number(this.route.snapshot.paramMap.get('id'));

    // Initialize form
    this.hotelForm = this.fb.group({
      name: ['', Validators.required],
      location: ['', Validators.required],
      amenities: ['', Validators.required],
      rating: [0, [Validators.required, Validators.min(1), Validators.max(5)]]
    });

    // Load hotel details from backend
    this.hotelService.getHotelById(this.hotelId).subscribe({
      next: (data: any) => {
        this.hotelForm.patchValue({
          name: data.name,
          location: data.location,
          amenities: data.amenities,
          rating: data.rating
        });
      },
      error: (err) => {
        console.error(err);
        this.message = 'Failed to load hotel details';
      }
    });
  }

  updateHotel(): void {
    if (!this.isManager) {
      this.message = 'Only managers can update hotels!';
      return;
    }

    if (this.hotelForm.invalid) {
      this.message = 'Please fill all fields correctly';
      return;
    }

    // Send only name, location, amenities, rating in body
    this.hotelService.updateHotel(this.hotelId, {
      name: this.hotelForm.value.name,
      location: this.hotelForm.value.location,
      amenities: this.hotelForm.value.amenities,
      rating: this.hotelForm.value.rating
    }).subscribe({
      next: () => {
        this.message = 'Hotel updated successfully!';
        this.router.navigate(['/hotels']); // Redirect to hotel list
      },
      error: (err) => {
        console.error(err);
        this.message = 'Failed to update hotel';
      }
    });
  }
}


---

2️⃣ hotel.html

<div class="container">
  <h2>Update Hotel</h2>

  <form [formGroup]="hotelForm" (ngSubmit)="updateHotel()">
    <label>Hotel Name:</label>
    <input type="text" formControlName="name" />

    <label>Location:</label>
    <input type="text" formControlName="location" />

    <label>Amenities:</label>
    <input type="text" formControlName="amenities" />

    <label>Rating (1-5):</label>
    <input type="number" formControlName="rating" />

    <button type="submit" [disabled]="!isManager">Update Hotel</button>
  </form>

  <p class="message">{{ message }}</p>
</div>


---

3️⃣ hotel.css

.container {
  width: 400px;
  margin: 40px auto;
  padding: 20px;
  border-radius: 10px;
  background-color: #f8f9fa;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

label {
  display: block;
  margin-top: 10px;
  font-weight: 600;
}

input {
  width: 100%;
  padding: 8px;
  margin-top: 5px;
  border-radius: 5px;
  border: 1px solid #ccc;
}

button {
  width: 100%;
  margin-top: 15px;
  padding: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:disabled {
  background-color: #aaa;
  cursor: not-allowed;
}

.message {
  margin-top: 15px;
  text-align: center;
  font-weight: 600;
  color: green;
}


---

4️⃣ hotel.service.ts (Update method)

updateHotel(id: number, hotelData: any) {
  const token = localStorage.getItem('token'); // JWT token saved after login
  const headers = { Authorization: `Bearer ${token}` };
  return this.http.put(`http://localhost:8080/api/hotels/${id}`, hotelData, { headers });
}


---

5️⃣ Route (app.routes.ts)

import { UpdateHotelComponent } from './features/hotel/update-hotel/hotel';

export const routes = [
  { path: 'update-hotel/:id', component: UpdateHotelComponent }
];


---

✅ Flow

1. Manager login → localStorage मध्ये token आणि role=MANAGER.


2. Browser मध्ये जा:

http://localhost:4200/update-hotel/1

(1 = hotelId)


3. Form auto-fill होईल (name, location, amenities, rating). hotelId form मध्ये नाही.


4. Manager update क्लिक → backend वर changes save होतात.




---

जर हवे असेल तर पुढे मी Get All Hotels + inline Update button per hotel तयार करून देऊ शकतो, जेवढं मागे तुला हवे होते.

तुला मी ते पुढचं step बनवून द्यावे का?

