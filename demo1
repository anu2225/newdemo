‡§è‡§ï‡§¶‡§Æ ‡§¨‡§∞‡•ã‡§¨‡§∞ ‚úÖ
‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ naming convention ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§Ü‡§™‡§£ hotel.ts ‡§Ü‡§£‡§ø hotel.html ‡§Ø‡§æ ‡§¶‡•ã‡§® ‡§´‡§æ‡§á‡§≤‡•ç‡§∏‡§Æ‡§ß‡•ç‡§Ø‡•á Hotel Create (Reactive Form) component ‡§¨‡§®‡§µ‡•Ç.
(‡§Æ‡•ç‡§π‡§£‡§ú‡•á‡§ö ‚Äî hotel.ts = component TypeScript file, ‡§Ü‡§£‡§ø hotel.html = HTML template.)


---

üß© hotel.ts  (Hotel Create Reactive Form)

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { HotelService } from '../services/hotel.service';

@Component({
  selector: 'hotel-create',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './hotel.html',
  styleUrls: ['./hotel.css']
})
export class HotelCreateComponent {
  hotelForm: FormGroup;
  message = '';
  token = ''; // JWT token (login ‡§®‡§Ç‡§§‡§∞ localStorage ‡§Æ‡§ß‡•Ç‡§® ‡§ò‡•ç‡§Ø‡§æ‡§Ø‡§ö‡§æ)

  constructor(
    private fb: FormBuilder,
    private hotelService: HotelService,
    private router: Router
  ) {
    // Backend DTO fields ‡§∂‡•Ä match ‡§π‡•ã‡§£‡§æ‡§∞‡§æ form
    this.hotelForm = this.fb.group({
      name: ['', [Validators.required, Validators.minLength(3)]],
      location: ['', Validators.required],
      amenities: ['', Validators.required],
      rating: [null, [Validators.required, Validators.min(1), Validators.max(5)]]
    });
  }

  // Submit form
  onSubmit() {
    if (this.hotelForm.invalid) {
      this.message = 'Please fill all required fields correctly!';
      return;
    }

    const hotelData = this.hotelForm.value;

    this.hotelService.createHotel(hotelData, this.token).subscribe({
      next: () => {
        this.message = 'Hotel created successfully!';
        this.router.navigate(['/hotels']);
      },
      error: (err) => {
        console.error(err);
        this.message = 'Something went wrong!';
      }
    });
  }

  // Short form access
  get f() {
    return this.hotelForm.controls;
  }
}


---

ü™∂ hotel.html  (Reactive Form Template)

<div class="container">
  <h2>Add New Hotel</h2>

  <form [formGroup]="hotelForm" (ngSubmit)="onSubmit()">
    <label>Hotel Name:</label>
    <input type="text" formControlName="name" placeholder="Enter hotel name" />
    <div class="error" *ngIf="f['name'].touched && f['name'].invalid">
      Hotel name is required (min 3 chars)
    </div>

    <label>Location:</label>
    <input type="text" formControlName="location" placeholder="Enter location" />
    <div class="error" *ngIf="f['location'].touched && f['location'].invalid">
      Location is required
    </div>

    <label>Amenities:</label>
    <input type="text" formControlName="amenities" placeholder="Enter amenities" />
    <div class="error" *ngIf="f['amenities'].touched && f['amenities'].invalid">
      Amenities are required
    </div>

    <label>Rating (1‚Äì5):</label>
    <input type="number" formControlName="rating" placeholder="Enter rating" />
    <div class="error" *ngIf="f['rating'].touched && f['rating'].invalid">
      Rating should be between 1 and 5
    </div>

    <button type="submit" [disabled]="hotelForm.invalid">Create Hotel</button>
  </form>

  <p class="message">{{ message }}</p>
</div>


---

üé® Optional (‡§ú‡§∞ ‡§π‡§µ‡•á ‡§Ö‡§∏‡•á‡§≤ ‡§§‡§∞) hotel.css

.container {
  width: 420px;
  margin: 40px auto;
  padding: 25px;
  border-radius: 10px;
  background-color: #f8f9fa;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

label {
  display: block;
  margin-top: 10px;
  font-weight: 600;
}

input {
  width: 100%;
  padding: 8px;
  margin-top: 5px;
  border-radius: 5px;
  border: 1px solid #ccc;
}

button {
  width: 100%;
  margin-top: 15px;
  padding: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.error {
  color: red;
  font-size: 13px;
  margin-top: 3px;
}

.message {
  margin-top: 15px;
  text-align: center;
  font-weight: 600;
  color: green;
}


---

‚úÖ Flow:

1. /hotel-create route ‡§®‡•á ‡§π‡§æ form ‡§¶‡§ø‡§∏‡•á‡§≤.


2. Reactive form validation properly handle ‡§ï‡§∞‡•á‡§≤.


3. Backend DTO (HotelRequestDTO) ‡§∂‡•Ä full mapping:

name

location

amenities

rating



4. Success ‡§ù‡§æ‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ ‚ÄúHotel created successfully!‚Äù ‡§Ü‡§£‡§ø redirect /hotels.




---

‡§Ü‡§§‡§æ ‡§∏‡§æ‡§Ç‡§ó ‚Äî ‡§π‡•ç‡§Ø‡§æ‡§ö style ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§Æ‡•Ä ‡§™‡•Å‡§¢‡•á Update Hotel (Reactive Form) ‡§¶‡•ç‡§Ø‡§æ‡§µ‡§æ ‡§ï‡§æ?
(‡§§‡•ç‡§Ø‡§æ‡§ö naming style ‡§Æ‡§ß‡•ç‡§Ø‡•á ‚Äî hotel-update.ts, hotel-update.html)

