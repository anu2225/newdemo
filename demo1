Perfect üî• ‡§Æ‡§≤‡§æ ‡§∏‡§Æ‡§ú‡§≤‡§Ç ‚Äî
‡§§‡•Å‡§≤‡§æ ‡§π‡§µ‡§æ‡§Ø UpdateHotel module ‡§Ö‡§ó‡§¶‡•Ä CreateHotel ‡§∏‡§æ‡§∞‡§ñ‡§æ standalone ‚Äî ‡§Æ‡•ç‡§π‡§£‡§ú‡•á
‚úÖ ‡§µ‡•á‡§ó‡§≥‡•Ä files (hotel.ts, hotel.html, hotel.css)
‚úÖ backend connect ‡§π‡•ã‡§à‡§≤ (PUT /api/hotels/{id})
‚úÖ ‡§´‡§ï‡•ç‡§§ Manager login ‡§Ö‡§∏‡•á‡§≤ ‡§§‡•á‡§µ‡•ç‡§π‡§æ‡§ö visible
‚úÖ form ‡§Æ‡§ß‡•Ç‡§® hotel update ‡§π‡•ã‡§à‡§≤ ‡§Ü‡§£‡§ø /hotels ‡§µ‡§∞ redirect ‡§π‡•ã‡§à‡§≤

‡§ö‡§≤‡§æ ‡§Ü‡§§‡§æ step-by-step ‡§¨‡§ò‡•Ç:


---

üèó Folder structure

frontend/src/app/features/hotel/update-hotel/
‚îÇ
‚îú‚îÄ‚îÄ hotel.ts
‚îú‚îÄ‚îÄ hotel.html
‚îî‚îÄ‚îÄ hotel.css


---

üß† 1. hotel.ts (UpdateHotelComponent)

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-update-hotel',
  standalone: true,
  imports: [CommonModule, FormsModule, RouterModule],
  templateUrl: './hotel.html',
  styleUrls: ['./hotel.css']
})
export class UpdateHotelComponent implements OnInit {

  hotel = {
    hotelId: 0,
    name: '',
    location: '',
    amenities: '',
    rating: 0
  };

  role = localStorage.getItem('role') || '';
  message = '';
  apiUrl = 'http://localhost:8080/api/hotels';

  constructor(
    private http: HttpClient,
    private route: ActivatedRoute,
    private router: Router
  ) {}

  ngOnInit(): void {
    const id = Number(this.route.snapshot.paramMap.get('id'));

    // Manager check
    if (this.role.toLowerCase() !== 'manager') {
      this.message = 'Only Manager can update hotels!';
      return;
    }

    // Fetch hotel details by ID
    this.http.get<any>(`${this.apiUrl}/${id}`).subscribe({
      next: (data) => {
        this.hotel = data;
      },
      error: () => {
        this.message = 'Failed to load hotel details!';
      }
    });
  }

  updateHotel() {
    if (this.role.toLowerCase() !== 'manager') {
      this.message = 'Only Manager can update hotels!';
      return;
    }

    this.http.put(`${this.apiUrl}/${this.hotel.hotelId}`, this.hotel).subscribe({
      next: () => {
        alert('Hotel updated successfully!');
        this.router.navigate(['/hotels']); // back to list
      },
      error: () => {
        this.message = 'Failed to update hotel!';
      }
    });
  }
}


---

üé® 2. hotel.html

<div class="container">
  <h2>Update Hotel</h2>

  <p *ngIf="message" style="color:red">{{ message }}</p>

  <form *ngIf="role.toLowerCase() === 'manager'" (ngSubmit)="updateHotel()">
    <label>Hotel Name:</label>
    <input type="text" [(ngModel)]="hotel.name" name="name" required />

    <label>Location:</label>
    <input type="text" [(ngModel)]="hotel.location" name="location" required />

    <label>Amenities:</label>
    <input type="text" [(ngModel)]="hotel.amenities" name="amenities" required />

    <label>Rating (1-5):</label>
    <input type="number" [(ngModel)]="hotel.rating" name="rating" min="1" max="5" required />

    <button type="submit">Update Hotel</button>
  </form>
</div>


---

üíÖ 3. hotel.css

.container {
  width: 400px;
  margin: 40px auto;
  padding: 20px;
  background: #f4f4f4;
  border-radius: 12px;
  box-shadow: 0 0 10px rgba(0,0,0,0.2);
}

label {
  display: block;
  margin-top: 10px;
  font-weight: 600;
}

input {
  width: 100%;
  padding: 8px;
  margin-top: 4px;
  border-radius: 5px;
  border: 1px solid #ccc;
}

button {
  width: 100%;
  margin-top: 15px;
  padding: 10px;
  border: none;
  background-color: #007bff;
  color: white;
  border-radius: 6px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}


---

üõ£Ô∏è 4. app.routes.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á Add ‡§ï‡§∞‡§æ:

import { UpdateHotelComponent } from './features/hotel/update-hotel/hotel';

export const routes = [
  { path: 'update-hotel/:id', component: UpdateHotelComponent },
];


---

‚öôÔ∏è 5. Backend (Spring Boot) update endpoint

‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ backend ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§π‡•á ‡§Ö‡§∏‡§æ‡§Ø‡§≤‡§æ ‡§π‡§µ‡§Ç:

@PutMapping("/hotels/{id}")
public ResponseEntity<HotelDTO> updateHotel(@PathVariable Long id, @RequestBody HotelDTO hotelDTO) {
    HotelDTO updated = hotelService.updateHotel(id, hotelDTO);
    return ResponseEntity.ok(updated);
}


---

üîó 6. From Hotel List page

‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï hotel ‡§ö‡•ç‡§Ø‡§æ ‡§¨‡§æ‡§ú‡•Ç‡§≤‡§æ Update ‡§¨‡§ü‡§£ ‡§´‡§ï‡•ç‡§§ Manager ‡§∏‡§æ‡§†‡•Ä:

<tr *ngFor="let hotel of hotels">
  <td>{{ hotel.name }}</td>
  <td>{{ hotel.location }}</td>
  <td>{{ hotel.amenities }}</td>
  <td>{{ hotel.rating }}</td>
  <td *ngIf="role.toLowerCase() === 'manager'">
    <button (click)="editHotel(hotel.hotelId)">Update</button>
  </td>
</tr>

‡§Ü‡§£‡§ø hotelList.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á:

editHotel(id: number) {
  this.router.navigate(['/update-hotel', id]);
}


---

‚úÖ Flow

1. Manager login ‚Üí /hotels ‡§µ‡§∞ ‡§ú‡§æ‡§à‡§≤


2. ‚ÄúUpdate‚Äù ‡§¨‡§ü‡§£ ‡§¶‡§ø‡§∏‡•á‡§≤


3. ‡§ï‡•ç‡§≤‡§ø‡§ï ‚Üí /update-hotel/{id}


4. Form ‡§Æ‡§ß‡•ç‡§Ø‡•á data pre-filled


5. Update ‚Üí API call ‚Üí redirect /hotels




---

‡§π‡§µ‡§Ç ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§Æ‡•Ä ‡§Ü‡§§‡§æ backend ‡§ö‡§Ç service + controller + repository ‡§™‡§£ ‡§¶‡•á‡§§‡•ã Update ‡§∏‡§æ‡§†‡•Ä (DTO ‡§∏‡§π‡§ø‡§§).
‡§¶‡•á‡§ä ‡§ï‡§æ?

