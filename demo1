‡§†‡•Ä‡§ï ‡§Ü‡§π‡•á üî• ‚Äî ‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ ‡§¶‡§ø‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ messy code ‡§µ‡§∞‡•Ç‡§® proper, clean, fully working Angular frontend module ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•Ç‡§® ‡§¶‡•á‡§§‡•ã.

‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ requirements ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§π‡§æ Get All Hotels component ‡§Ü‡§π‡•á, role-based Update button ‡§∏‡§æ‡§†‡•Ä ready, reactive-friendly, typesafe.


---

1Ô∏è‚É£ File: hotel.ts

üìç Path: src/app/features/hotel/get-all-hotels/hotel.ts

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { HotelService } from '../services/hotel.service';

export interface Hotel {
  hotelId: number;
  name: string;
  location: string;
  amenities: string;
  rating: number;
  managerId?: number;
}

@Component({
  selector: 'app-hotel',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './hotel.html',
  styleUrls: ['./hotel.css']
})
export class HotelComponent implements OnInit {
  hotels: Hotel[] = [];
  loading = true;
  error = '';
  role = ''; // user role from localStorage

  constructor(private hotelService: HotelService) {}

  ngOnInit(): void {
    // role assign
    this.role = localStorage.getItem('role') || '';

    // get hotels
    this.getHotels();
  }

  getHotels(): void {
    this.loading = true;
    this.hotelService.getHotelList().subscribe({
      next: (response: Hotel[]) => {
        console.log("Fetched hotels:", response);
        this.hotels = response;
        this.loading = false;
      },
      error: (err) => {
        console.error('Error fetching hotels:', err);
        this.error = 'Failed to load hotels';
        this.loading = false;
      }
    });
  }
}


---

2Ô∏è‚É£ File: hotel.html

üìç Path: src/app/features/hotel/get-all-hotels/hotel.html

<div class="hotel-container">
  <h2>Hotel List</h2>
  <button class="display" (click)="getHotels()">Display Hotels</button>

  <p *ngIf="loading">Loading...</p>
  <p *ngIf="error" style="color:red">{{ error }}</p>

  <table *ngIf="!loading && hotels.length > 0">
    <thead>
      <tr>
        <th>Hotel Name</th>
        <th>Location</th>
        <th>Amenities</th>
        <th>Rating</th>
        <th *ngIf="role === 'Manager'">Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let h of hotels">
        <td>{{ h.name }}</td>
        <td>{{ h.location }}</td>
        <td>{{ h.amenities }}</td>
        <td>{{ h.rating }}</td>
        <td *ngIf="role === 'Manager'">
          <button [routerLink]="['/update-hotel', h.hotelId]">Update</button>
        </td>
      </tr>
    </tbody>
  </table>

  <p *ngIf="!loading && hotels.length === 0">No hotels found</p>
</div>


---

3Ô∏è‚É£ File: hotel.css

üìç Path: src/app/features/hotel/get-all-hotels/hotel.css

.hotel-container {
  padding: 20px;
  width: 800px;
  margin: 40px auto;
  background-color: #f8f9fa;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

h2 {
  color: #007bff;
  text-align: center;
}

button.display {
  margin-bottom: 15px;
  padding: 8px 12px;
  background-color: #007bff;
  border: none;
  border-radius: 5px;
  color: white;
  cursor: pointer;
}

table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  border: 1px solid #ccc;
  padding: 10px;
  text-align: left;
}

th {
  background-color: #e9ecef;
}

button {
  padding: 5px 10px;
  border-radius: 5px;
  border: none;
  background-color: #28a745;
  color: white;
  cursor: pointer;
}


---

üîë Highlights

1. Role-based Update button:

*ngIf="role === 'Manager'"

‚Üí ‡§´‡§ï‡•ç‡§§ Manager ‡§≤‡§æ update button ‡§¶‡§ø‡§∏‡•á‡§≤.


2. Proper interface Hotel ‚Äî reactive forms friendly, clean typing.


3. Loading & Error handling included.


4. Standalone component imports: CommonModule + RouterModule


5. Console log to verify response:

console.log("Fetched hotels:", response);




---

üí° Next Step Suggestion:

‡§π‡•ç‡§Ø‡§æ component ‡§Æ‡§ß‡•Ç‡§® Delete Hotel button add ‡§ï‡§∞‡•Ç‡§® role-based delete ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡•ã.

‡§Æ‡§ó Create + GetAll + Update + Delete + Routing + Role access ‚Üí Full CRUD module ready.



---

‡§Æ‡•Ä ‡§π‡§µ‡§Ç ‡§§‡§∞ ‡§§‡•Å‡§≤‡§æ Delete Hotel feature integrated version ‡§∏‡•Å‡§¶‡•ç‡§ß‡§æ ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•Ç‡§® ‡§¶‡•á‡§ä ‡§∂‡§ï‡§§‡•ã.
‡§¶‡•á‡§ä ‡§ï‡§æ?

