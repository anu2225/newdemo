‡§Æ‡§∏‡•ç‡§§ üëå ‡§Ü‡§§‡§æ ‡§¨‡§ò ‚Äî ‡§π‡•á part ‡§Æ‡•ç‡§π‡§£‡§ú‡•á Angular frontend ‡§Æ‡§ß‡•Ç‡§® backend ‡§≤‡§æ PUT /api/hotels/{id} call ‡§ï‡§∞‡•Ç‡§® hotel update ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§Ü‡§π‡•á.
‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ ‡§π‡•á step-by-step ‡§Ü‡§£‡§ø working code ‡§¶‡•á‡§§‡•ã üî•


---

üß© Step 1: Folder structure

frontend/
‚îî‚îÄ‚îÄ src/
    ‚îî‚îÄ‚îÄ app/
        ‚îî‚îÄ‚îÄ features/
            ‚îî‚îÄ‚îÄ hotel/
                ‚îî‚îÄ‚îÄ update-hotel/
                    ‚îú‚îÄ‚îÄ hotel.ts
                    ‚îú‚îÄ‚îÄ hotel.html
                    ‚îú‚îÄ‚îÄ hotel.css


---

üß† Step 2: hotel.ts (Angular Component)

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { HttpClientModule } from '@angular/common/http';
import { HotelService } from '../../../core/services/hotelservice';

@Component({
  selector: 'app-update-hotel',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, HttpClientModule],
  templateUrl: './hotel.html',
  styleUrls: ['./hotel.css']
})
export class UpdateHotel implements OnInit {
  updateForm!: FormGroup;
  hotelId!: number;

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private hotelService: HotelService
  ) {}

  ngOnInit(): void {
    this.hotelId = Number(this.route.snapshot.paramMap.get('id'));

    this.updateForm = this.fb.group({
      name: ['', Validators.required],
      location: ['', Validators.required],
      amenities: ['', Validators.required],
      rating: ['', [Validators.required, Validators.min(1), Validators.max(5)]]
    });

    // existing hotel load kar
    this.hotelService.getHotelById(this.hotelId).subscribe({
      next: (data: any) => {
        this.updateForm.patchValue(data);
      },
      error: err => console.error('Error fetching hotel details:', err)
    });
  }

  onUpdate() {
    if (this.updateForm.valid) {
      this.hotelService.updateHotel(this.hotelId, this.updateForm.value).subscribe({
        next: () => {
          alert('‚úÖ Hotel updated successfully!');
          this.router.navigate(['/hotels']);
        },
        error: err => {
          console.error('Error updating hotel:', err);
          alert('‚ùå Failed to update hotel!');
        }
      });
    }
  }
}


---

üß© Step 3: hotel.html

<div class="update-container">
  <h2>Update Hotel</h2>

  <form [formGroup]="updateForm" (ngSubmit)="onUpdate()">
    <div class="form-group">
      <label>Hotel Name:</label>
      <input type="text" formControlName="name" placeholder="Enter hotel name" />
    </div>

    <div class="form-group">
      <label>Location:</label>
      <input type="text" formControlName="location" placeholder="Enter location" />
    </div>

    <div class="form-group">
      <label>Amenities:</label>
      <input type="text" formControlName="amenities" placeholder="Enter amenities" />
    </div>

    <div class="form-group">
      <label>Rating (1‚Äì5):</label>
      <input type="number" formControlName="rating" min="1" max="5" />
    </div>

    <button type="submit" [disabled]="updateForm.invalid">Update Hotel</button>
  </form>
</div>


---

üß© Step 4: hotel.css

.update-container {
  max-width: 450px;
  margin: 40px auto;
  background: #f9f9f9;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 0px 8px rgba(0, 0, 0, 0.1);
}

h2 {
  text-align: center;
  color: #007bff;
}

.form-group {
  margin-bottom: 15px;
}

label {
  font-weight: bold;
}

input {
  width: 100%;
  padding: 8px;
  border-radius: 6px;
  border: 1px solid #ccc;
  margin-top: 5px;
}

button {
  width: 100%;
  background-color: #007bff;
  color: white;
  padding: 10px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}

button:disabled {
  background-color: #aaa;
  cursor: not-allowed;
}


---

üß© Step 5: Update your hotelservice.ts

(frontend/src/app/core/services/hotelservice.ts)

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class HotelService {
  private apiUrl = 'http://localhost:8080/api/hotels';

  constructor(private http: HttpClient) {}

  getHotelList(): Observable<any> {
    return this.http.get(this.apiUrl);
  }

  getHotelById(id: number): Observable<any> {
    return this.http.get(`${this.apiUrl}/${id}`);
  }

  updateHotel(id: number, data: any): Observable<any> {
    return this.http.put(`${this.apiUrl}/${id}`, data);
  }
}


---

‚úÖ Step 6: Routing setup

(app.routes.ts)

import { Routes } from '@angular/router';
import { CreateHotel } from './features/hotel/create-hotel/hotel';
import GetAllHotels from './features/hotel/get-all-hotels/hotelList';
import { UpdateHotel } from './features/hotel/update-hotel/hotel';

export const routes: Routes = [
  { path: 'create-hotel', component: CreateHotel },
  { path: 'hotels', component: GetAllHotels },
  { path: 'update-hotel/:id', component: UpdateHotel },
  { path: '', redirectTo: '/hotels', pathMatch: 'full' }
];


---

üß† Flow Summary

1. ‚úÖ Manager ‡§ú‡•á‡§µ‡•ç‡§π‡§æ ‚ÄúUpdate‚Äù ‡§µ‡§∞ click ‡§ï‡§∞‡•á‡§≤ (/update-hotel/:id route ‡§µ‡§∞ ‡§ú‡§æ‡§à‡§≤)


2. Component hotel ID route ‡§Æ‡§ß‡•Ç‡§® ‡§ò‡•á‡§à‡§≤


3. Backend ‡§µ‡§∞‡•Ç‡§® hotel details load ‡§π‡•ã‡§§‡•Ä‡§≤


4. Manager fields edit ‡§ï‡§∞‡•á‡§≤ ‡§Ü‡§£‡§ø ‚ÄúUpdate Hotel‚Äù ‡§µ‡§∞ click ‡§ï‡§∞‡•á‡§≤


5. PUT request http://localhost:8080/api/hotels/{id} ‡§≤‡§æ ‡§ú‡§æ‡§à‡§≤


6. Backend hotel update ‡§ï‡§∞‡•Ç‡§® save ‡§ï‡§∞‡•á‡§≤


7. Successfully updated ‡§ù‡§æ‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ alert ‡§¶‡§ø‡§∏‡•á‡§≤ ‡§Ü‡§£‡§ø /hotels ‡§µ‡§∞ redirect ‡§π‡•ã‡§à‡§≤




---

‡§§‡•Ç ‡§∏‡§æ‡§Ç‡§ó ‚Äî backend ‡§Ü‡§ß‡•Ä‡§ö connected ‡§Ü‡§π‡•á ‡§ï‡§æ (CORS allowed ‡§Ü‡§£‡§ø API ‡§ö‡§æ‡§≤‡•Ç ‡§Ü‡§π‡•á)?
‡§ú‡§∞ ‡§Ü‡§π‡•á, ‡§§‡§∞ ‡§π‡•á code paste ‡§ï‡§∞‡•Ç‡§® direct test ‡§ï‡§∞‡§§‡§æ ‡§Ø‡•á‡§à‡§≤ ‚úÖ

