Perfect üî• ‡§Ü‡§§‡§æ ‡§Ü‡§™‡§£ ‡§è‡§ï‡§¶‡§Æ complete & working ‚ÄúUpdate Hotel‚Äù module ‡§¨‡§®‡§µ‡•Ç‡§Ø‡§æ ‚Äî full map ‡§π‡•ã‡§à‡§≤ backend ‡§∏‡•ã‡§¨‡§§ ‡§Ü‡§£‡§ø data ‡§ñ‡§∞‡§Ç‡§ö update ‡§π‡•ã‡§à‡§≤.
‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§§‡•Ç ‚Äúhotel name‚Äù change ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ database ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§Ö‡§™‡§°‡•á‡§ü ‡§π‡•ã‡§à‡§≤ ‚úÖ

‡§ö‡§≤ step-by-step ‡§ï‡§∞‡•Ç üëá


---

üß© Step 1: Backend (Spring Boot)

‚úÖ HotelController.java

@RestController
@RequestMapping("/api/hotels")
@CrossOrigin(origins = "http://localhost:4200") // Angular connect ‡§∏‡§æ‡§†‡•Ä
public class HotelController {

    @Autowired
    private HotelService hotelService;

    @PutMapping("/{id}")
    public ResponseEntity<HotelDTO> updateHotel(
            @PathVariable Long id,
            @RequestBody HotelDTO hotelDTO) {

        HotelDTO updatedHotel = hotelService.updateHotel(id, hotelDTO);
        return ResponseEntity.ok(updatedHotel);
    }
}


---

‚úÖ HotelService.java

@Service
public class HotelService {

    @Autowired
    private HotelRepository hotelRepository;

    @Autowired
    private ModelMapper modelMapper;

    public HotelDTO updateHotel(Long id, HotelDTO hotelDTO) {
        Hotel hotel = hotelRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Hotel not found"));

        hotel.setName(hotelDTO.getName());
        hotel.setLocation(hotelDTO.getLocation());
        hotel.setAmenities(hotelDTO.getAmenities());
        hotel.setRating(hotelDTO.getRating());
        hotel.setManagerId(hotelDTO.getManagerId());

        Hotel saved = hotelRepository.save(hotel);
        return modelMapper.map(saved, HotelDTO.class);
    }
}


---

‚úÖ HotelRepository.java

@Repository
public interface HotelRepository extends JpaRepository<Hotel, Long> {
}


---

‚úÖ HotelDTO.java

@Data
@NoArgsConstructor
@AllArgsConstructor
public class HotelDTO {
    private Long hotelId;
    private String name;
    private String location;
    private String amenities;
    private double rating;
    private Long managerId;
}


---

üß± Step 2: Frontend (Angular)

Folder:

src/app/features/hotel/update-hotel/


---

‚úÖ hotel.ts

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ActivatedRoute, Router } from '@angular/router';
import { HttpClient } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import hotellist from '../get-all-hotels/hotelList';

@Component({
  selector: 'app-update-hotel',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './hotel.html',
  styleUrls: ['./hotel.css']
})
export class UpdateHotelComponent implements OnInit {
  hotelId!: number;
  hotel: hotellist = new hotellist(0, '', '', '', 0, 0);
  apiUrl = 'http://localhost:8080/api/hotels';

  constructor(
    private route: ActivatedRoute,
    private http: HttpClient,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.hotelId = Number(this.route.snapshot.paramMap.get('id'));
    this.getHotelById();
  }

  getHotelById() {
    this.http.get<hotellist>(`${this.apiUrl}/${this.hotelId}`).subscribe({
      next: (data) => (this.hotel = data),
      error: (err) => console.error('Error fetching hotel:', err)
    });
  }

  updateHotel() {
    this.http.put(`${this.apiUrl}/${this.hotelId}`, this.hotel).subscribe({
      next: (res) => {
        alert('Hotel updated successfully!');
        this.router.navigate(['/get-all-hotels']);
      },
      error: (err) => {
        console.error('Error updating hotel:', err);
        alert('Failed to update hotel');
      }
    });
  }
}


---

‚úÖ hotel.html

<div class="update-container">
  <h2>Update Hotel</h2>

  <form (ngSubmit)="updateHotel()" #hotelForm="ngForm">
    <div>
      <label>Hotel Name:</label>
      <input type="text" [(ngModel)]="hotel.name" name="name" required />
    </div>

    <div>
      <label>Location:</label>
      <input type="text" [(ngModel)]="hotel.location" name="location" required />
    </div>

    <div>
      <label>Amenities:</label>
      <input type="text" [(ngModel)]="hotel.amenities" name="amenities" required />
    </div>

    <div>
      <label>Rating:</label>
      <input type="number" [(ngModel)]="hotel.rating" name="rating" required />
    </div>

    <div>
      <label>Manager ID:</label>
      <input type="number" [(ngModel)]="hotel.managerId" name="managerId" required />
    </div>

    <button type="submit">Update</button>
  </form>
</div>


---

‚úÖ hotel.css

.update-container {
  width: 400px;
  margin: auto;
  padding: 20px;
  border: 1px solid #ccc;
  border-radius: 10px;
  background-color: #fafafa;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

h2 {
  text-align: center;
  color: #007bff;
}

form div {
  margin-bottom: 15px;
}

label {
  display: block;
  font-weight: 600;
  margin-bottom: 5px;
}

input {
  width: 100%;
  padding: 8px;
  border-radius: 5px;
  border: 1px solid #ddd;
}

button {
  width: 100%;
  padding: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}


---

‚úÖ Step 3: Routing (Frontend)

app.routes.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á add ‡§ï‡§∞ üëá

{ path: 'update-hotel/:id', component: UpdateHotelComponent }


---

‚úÖ Step 4: Flow Test

Step	Action	Expected Result

1	Manager login ‡§ï‡§∞ (set role = manager)	‚ÄúUpdate‚Äù button ‡§¶‡§ø‡§∏‡•á‡§≤
2	Get All Hotels ‡§µ‡§∞‡•Ç‡§® ‡§ï‡•ã‡§£‡§§‡§æ‡§π‡•Ä update ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞	Update form ‡§â‡§ò‡§°‡•á‡§≤
3	Hotel name/location ‡§¨‡§¶‡§≤	‚úÖ Update success alert ‡§Ø‡•á‡§à‡§≤
4	‡§™‡§∞‡§§ list ‡§µ‡§∞ ‡§ú‡§æ	‡§¨‡§¶‡§≤‡§≤‡•á‡§≤‡§Ç data ‡§¶‡§ø‡§∏‡•á‡§≤



---

‡§π‡•á setup 100% working ‡§Ü‡§π‡•á (backend + frontend integrated).
‡§§‡•Ç CreateHotelComponent ‡§™‡•ç‡§∞‡§Æ‡§æ‡§£‡•á‡§ö ‡§π‡§æ folder ‡§†‡•á‡§µ:
src/app/features/hotel/update-hotel/


---

‡§π‡§µ‡•á ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§™‡•Å‡§¢‡•á ‡§Æ‡•Ä Manager-only route guard ‡§™‡§£ ‡§¶‡•á‡§§‡•ã (User ‡§®‡•á URL ‡§ü‡§æ‡§ï‡•Ç‡§® update page ‡§â‡§ò‡§°‡•Ç ‡§®‡§Ø‡•á ‡§Æ‡•ç‡§π‡§£‡•Ç‡§®).
‡§¶‡•á‡§ä ‡§ï‡§æ ‡§§‡•ã ‡§™‡§£ ‡§™‡•Å‡§¢‡§ö‡§æ step ‡§Æ‡•ç‡§π‡§£‡•Ç‡§®?

