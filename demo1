Perfect ‚úÖ ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ‡§ï‡§°‡•á ‡§Ü‡§§‡§æ folder structure ‡§Ö‡§∏‡§Ç ‡§¶‡§ø‡§∏‡§§‡§Ç‡§Ø:

frontend > SmartHotelBookingSystem > src > app > features > hotel > get-all-hotels
‚îÇ
‚îú‚îÄ‚îÄ hotel.ts        ‚úÖ (component logic)
‚îú‚îÄ‚îÄ hotel.html      ‚úÖ (template)
‚îú‚îÄ‚îÄ hotel.css       ‚úÖ (style)
‚îî‚îÄ‚îÄ hotelList.ts    ‚úÖ (model class)

‡§π‡•á ‡§Ö‡§ó‡§¶‡•Ä ‡§¨‡§∞‡•ã‡§¨‡§∞ ‡§Ü‡§π‡•á üëè
‡§Ü‡§§‡§æ ‡§ñ‡§æ‡§≤‡•Ä‡§≤ ‡§¶‡•ã‡§® ‡§ó‡•ã‡§∑‡•ç‡§ü‡•Ä confirm ‡§ï‡§∞:


---

üîπ Step 1: app.routes.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§π‡§æ route add ‡§Ü‡§π‡•á ‡§ï‡§æ?

> ‡§®‡§∏‡•á‡§≤ ‡§§‡§∞ ‡§π‡§æ route ‡§®‡§ï‡•ç‡§ï‡•Ä ‡§ü‡§æ‡§ï ‚¨áÔ∏è



import { Routes } from '@angular/router';
import { GetAllHotelsComponent } from './features/hotel/get-all-hotels/hotel';

export const routes: Routes = [
  { path: 'hotels', component: GetAllHotelsComponent },
  { path: '', redirectTo: '/hotels', pathMatch: 'full' }
];


---

üîπ Step 2: main.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á routes connect ‡§Ü‡§π‡•á‡§§ ‡§ï‡§æ?

> ‡§ú‡§∞ standalone app ‡§Ö‡§∏‡•á‡§≤ ‡§§‡§∞ ‡§Ö‡§∏‡§Ç ‡§Ö‡§∏‡§æ‡§Ø‡§≤‡§æ ‡§π‡§µ‡§Ç üëá



import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app';
import { provideRouter } from '@angular/router';
import { routes } from './app.routes';
import { provideHttpClient } from '@angular/common/http';

bootstrapApplication(AppComponent, {
  providers: [provideRouter(routes), provideHttpClient()]
});


---

üîπ Step 3: ‡§Ü‡§§‡§æ hotel.ts (component logic)

‡§§‡•Ç ‡§Ü‡§ß‡•Ä‡§ö ‡§†‡•á‡§µ‡§≤‡•á‡§≤‡§æ file replace ‡§ï‡§∞‡•Ç‡§® ‡§ñ‡§æ‡§≤‡•Ä‡§≤ code ‡§ü‡§æ‡§ï üëá
(‡§π‡§æ backend ‡§∂‡•Ä connect ‡§π‡•ã‡§§‡•ã ‡§Ü‡§£‡§ø manager ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏ update button ‡§¶‡§æ‡§ñ‡§µ‡§§‡•ã)

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { Router, RouterModule } from '@angular/router';
import hotellist from '../get-all-hotels/hotelList';

@Component({
  selector: 'app-get-all-hotels',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './hotel.html',
  styleUrls: ['./hotel.css']
})
export class GetAllHotelsComponent implements OnInit {
  hotels: hotellist[] = [];
  loading = true;
  error = '';
  role = localStorage.getItem('role') || ''; // manager or user
  apiUrl = 'http://localhost:8080/api/hotels';

  constructor(private http: HttpClient, private router: Router) {}

  ngOnInit(): void {
    this.getHotels();
  }

  getHotels() {
    this.http.get<hotellist[]>(this.apiUrl).subscribe({
      next: (response) => {
        this.hotels = response;
        this.loading = false;
      },
      error: (err) => {
        console.error('Error fetching hotels:', err);
        this.error = 'Failed to load hotels!';
        this.loading = false;
      }
    });
  }

  editHotel(id: number) {
    if (this.role.toLowerCase() === 'manager') {
      this.router.navigate(['/update-hotel', id]);
    } else {
      alert('Only Manager can update hotels!');
    }
  }
}


---

üîπ Step 4: hotel.html

<div class="hotel-container">
  <h2>Hotel List</h2>

  <div *ngIf="loading">Loading hotels...</div>
  <div *ngIf="error" class="error">{{ error }}</div>

  <table *ngIf="!loading && hotels.length > 0">
    <thead>
      <tr>
        <th>Hotel ID</th>
        <th>Name</th>
        <th>Location</th>
        <th>Amenities</th>
        <th>Rating</th>
        <th>Manager ID</th>
        <th *ngIf="role.toLowerCase() === 'manager'">Action</th>
      </tr>
    </thead>

    <tbody>
      <tr *ngFor="let h of hotels">
        <td>{{ h.hotelId }}</td>
        <td>{{ h.name }}</td>
        <td>{{ h.location }}</td>
        <td>{{ h.amenities }}</td>
        <td>{{ h.rating }}</td>
        <td>{{ h.managerId }}</td>
        <td *ngIf="role.toLowerCase() === 'manager'">
          <button (click)="editHotel(h.hotelId)">Update</button>
        </td>
      </tr>
    </tbody>
  </table>

  <p *ngIf="!loading && hotels.length === 0">No hotels found!</p>
</div>


---

üîπ Step 5: hotelList.ts (Model)

export default class hotellist {
  hotelId!: number;
  name!: string;
  location!: string;
  amenities!: string;
  rating!: number;
  managerId!: number;

  constructor(hotelId: number, name: string, location: string, amenities: string, rating: number, managerId: number) {
    this.hotelId = hotelId;
    this.name = name;
    this.location = location;
    this.amenities = amenities;
    this.rating = rating;
    this.managerId = managerId;
  }
}


---

üîπ Step 6: hotel.css

.hotel-container {
  padding: 20px;
}

h2 {
  color: #007bff;
  text-align: center;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 10px;
}

th, td {
  padding: 10px;
  border-bottom: 1px solid #ddd;
}

tr:hover {
  background-color: #f9f9f9;
}

button {
  padding: 6px 10px;
  border: none;
  border-radius: 5px;
  background-color: #007bff;
  color: white;
}

button:hover {
  background-color: #0056b3;
}


---

‚úÖ Output:

‡§∏‡§∞‡•ç‡§µ hotel list ‡§¶‡§ø‡§∏‡•á‡§≤.

‡§ú‡§∞ localStorage ‡§Æ‡§ß‡•ç‡§Ø‡•á "role" = "manager" ‡§Ö‡§∏‡•á‡§≤ ‚Üí Update ‡§¨‡§ü‡§£ ‡§¶‡§ø‡§∏‡•á‡§≤.

Update ‡§µ‡§∞ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ /update-hotel/{id} route ‡§®‡•á‡§§‡•ã.



---

‡§Ü‡§§‡§æ ‡§§‡•Ç confirm ‡§ï‡§∞:

> ‡§™‡•Å‡§¢‡•á ‡§Æ‡•Ä update-hotel module ‡§¶‡•á‡§ä ‡§ï‡§æ ‚Äî ‡§ú‡•ã manager ‡§®‡•á ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ form ‡§â‡§ò‡§°‡•á‡§≤ ‡§Ü‡§£‡§ø update ‡§ï‡§∞‡•á‡§≤ (backend PUT call)?



