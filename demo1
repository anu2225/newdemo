Excellent üí™ ‡§π‡•á ‡§è‡§ï‡§¶‡§Æ perfect requirement ‡§Ü‡§π‡•á!
‡§ö‡§≤ ‡§Æ‡§ó ‚Äî ‡§§‡•Å‡§ù‡§Ç Get All Hotels page ‡§Æ‡•Ä ‡§Ü‡§§‡§æ final correct logic ‡§∏‡§π ‡§¶‡•á‡§§‡•ã‡§Ø
(Manager login ‡§Ö‡§∏‡•á‡§≤ ‚Üí Manager ID + Update Button ‡§¶‡§ø‡§∏‡•á‡§≤,
User login ‡§Ö‡§∏‡•á‡§≤ ‚Üí ‡§´‡§ï‡•ç‡§§ Name, Location, Amenities, Rating ‡§¶‡§ø‡§∏‡§§‡•Ä‡§≤)


---

‚úÖ Final get-all-hotels (Frontend + Backend ready)

üß± hotel.ts

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { Router, RouterModule } from '@angular/router';
import hotellist from '../get-all-hotels/hotelList';

@Component({
  selector: 'app-get-all-hotels',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './hotel.html',
  styleUrls: ['./hotel.css']
})
export class GetAllHotelsComponent implements OnInit {
  hotels: hotellist[] = [];
  loading = true;
  error = '';
  role = localStorage.getItem('role') || ''; // 'manager' ‡§ï‡§ø‡§Ç‡§µ‡§æ 'user'
  apiUrl = 'http://localhost:8080/api/hotels';

  constructor(private http: HttpClient, private router: Router) {}

  ngOnInit(): void {
    this.getHotels();
  }

  getHotels() {
    this.http.get<hotellist[]>(this.apiUrl).subscribe({
      next: (response) => {
        this.hotels = response;
        this.loading = false;
      },
      error: (err) => {
        console.error('Error fetching hotels:', err);
        this.error = 'Failed to load hotels!';
        this.loading = false;
      }
    });
  }

  editHotel(id: number) {
    if (this.role.toLowerCase() === 'manager') {
      this.router.navigate(['/update-hotel', id]);
    } else {
      alert('Only Manager can update hotels!');
    }
  }
}


---

üé® hotel.html

<div class="hotel-container">
  <h2>Hotel List</h2>

  <div *ngIf="loading">Loading hotels...</div>
  <div *ngIf="error" class="error">{{ error }}</div>

  <table *ngIf="!loading && hotels.length > 0">
    <thead>
      <tr>
        <th>Name</th>
        <th>Location</th>
        <th>Amenities</th>
        <th>Rating</th>
        <!-- ‡§π‡•á ‡§´‡§ï‡•ç‡§§ manager ‡§≤‡§æ ‡§¶‡§ø‡§∏‡•á‡§≤ -->
        <th *ngIf="role.toLowerCase() === 'manager'">Manager ID</th>
        <th *ngIf="role.toLowerCase() === 'manager'">Action</th>
      </tr>
    </thead>

    <tbody>
      <tr *ngFor="let h of hotels">
        <td>{{ h.name }}</td>
        <td>{{ h.location }}</td>
        <td>{{ h.amenities }}</td>
        <td>{{ h.rating }}</td>

        <!-- ‡§´‡§ï‡•ç‡§§ manager ‡§∏‡§æ‡§†‡•Ä ‡§π‡•á ‡§¶‡•ã‡§® ‡§ï‡•â‡§≤‡§Æ -->
        <td *ngIf="role.toLowerCase() === 'manager'">{{ h.managerId }}</td>
        <td *ngIf="role.toLowerCase() === 'manager'">
          <button (click)="editHotel(h.hotelId)">Update</button>
        </td>
      </tr>
    </tbody>
  </table>

  <p *ngIf="!loading && hotels.length === 0">No hotels found!</p>
</div>


---

üß© hotelList.ts (model)

export default class hotellist {
  hotelId!: number;
  name!: string;
  location!: string;
  amenities!: string;
  rating!: number;
  managerId!: number;

  constructor(
    hotelId: number,
    name: string,
    location: string,
    amenities: string,
    rating: number,
    managerId: number
  ) {
    this.hotelId = hotelId;
    this.name = name;
    this.location = location;
    this.amenities = amenities;
    this.rating = rating;
    this.managerId = managerId;
  }
}


---

üíÖ hotel.css

.hotel-container {
  padding: 20px;
}

h2 {
  color: #007bff;
  text-align: center;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 10px;
}

th, td {
  padding: 10px;
  border-bottom: 1px solid #ddd;
  text-align: left;
}

tr:hover {
  background-color: #f9f9f9;
}

button {
  padding: 6px 10px;
  border: none;
  border-radius: 5px;
  background-color: #007bff;
  color: white;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}


---

‚öôÔ∏è Logic summary:

Role	Columns ‡§¶‡§ø‡§∏‡§£‡§æ‡§∞‡•á	Update Button

Manager	Name, Location, Amenities, Rating, Manager ID	‚úÖ ‡§¶‡§ø‡§∏‡§§‡•ã
User	Name, Location, Amenities, Rating	‚ùå ‡§≤‡§™‡§§‡•ã



---

üîë Role ‡§ï‡§∏‡§Ç set ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç:

Login ‡§ù‡§æ‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ ‚Äî
localStorage.setItem("role", "manager");
‡§ï‡§ø‡§Ç‡§µ‡§æ
localStorage.setItem("role", "user");


---

‡§§‡§∏‡§Ç ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ UI ‡§Ü‡§™‡•ã‡§Ü‡§™ ‡§¨‡§¶‡§≤‡§§‡•ã üëá

üßç‚Äç‚ôÇÔ∏è User login: ‡§´‡§ï‡•ç‡§§ hotels list ‡§¶‡§ø‡§∏‡§§‡•á.
üë®‚Äçüíº Manager login: "Manager ID" ‡§Ü‡§£‡§ø "Update" ‡§¨‡§ü‡§£ ‡§¶‡§ø‡§∏‡§§‡§Ç.


---

‡§Ü‡§§‡§æ confirm ‡§ï‡§∞ ‚Üí ‡§Æ‡•Ä ‡§Ø‡§æ‡§µ‡§∞ ‡§Ü‡§ß‡§æ‡§∞‡§ø‡§§ Update Hotel (separate form component) ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§§‡•ã ‡§ï‡§æ?
(Manager ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ hotel ‡§ö‡§Ç pre-filled form ‡§â‡§ò‡§°‡•á‡§≤ ‡§Ü‡§£‡§ø PUT API call ‡§π‡•ã‡§à‡§≤ ‚úÖ)

