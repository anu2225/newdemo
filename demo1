рдЦреВрдк рдЫрд╛рди ЁЯСМ рдЖрддрд╛ рдЖрдкрдг рдЕрдЧрджреА step-by-step practically рддреБрдЭрд╛ Hotel Module (Frontend + Backend) рдиреАрдЯ рдЪрд╛рд▓реВ рдХрд░рдгрд╛рд░ рдЖрд╣реЛрдд тАФ рдореА рддреБрд▓рд╛ рдПрдХрджрдо simple language рдордзреНрдпреЗ рд╕рд╛рдВрдЧрддреЛ.

рддреБрдЭреНрдпрд╛ zip рдордзреНрдпреЗ рд╕рдЧрд│рдВ рдЖрд╣реЗ (Angular frontend + Spring Boot backend), рдлрдХреНрдд рдХрд╛рд╣реА рдЬрд╛рдЧреА рдЫреЛрдЯреЗ connections set рдХрд░рдгрдВ рдмрд╛рдХреА рдЖрд╣реЗ тАФ рддреЗрдЪ рдЖрдкрдг рдХрд░реВрдпрд╛.


---

ЁЯзй Step 1 тАФ Backend рдиреАрдЯ рдЪрд╛рд▓реВ рдХрд░

1. MySQL рдЙрдШрдб.

CREATE DATABASE hotelDB;


2. рдЬрд╛ рдЗрдереЗ:

backend/smarthotelbooking/src/main/resources/application.properties

DB username/password рдмрджрд▓ (рддреБрдЭреНрдпрд╛ рдорд╢реАрдирдкреНрд░рдорд╛рдгреЗ):

spring.datasource.url=jdbc:mysql://localhost:3306/hotelDB
spring.datasource.username=root
spring.datasource.password=YOUR_PASSWORD
spring.jpa.hibernate.ddl-auto=update
server.port=8080


3. Run backend:

cd backend/smarthotelbooking
mvn spring-boot:run


4. Browser рдордзреНрдпреЗ рдмрдШ:

http://localhost:8080/hotels

(рдЬрд░ JSON рджрд┐рд╕рд▓рдВ, рддрд░ backend ready тЬЕ)




---

тЪЩя╕П Step 2 тАФ Angular frontend configure рдХрд░

Frontend path:

frontend/SmartHotelBookingSystem/

1. Terminal рдЙрдШрдб:

cd frontend/SmartHotelBookingSystem
npm install


2. рдЖрддрд╛ backend URL рдЬреЛрдб: рдЬрд╛ ЁЯСЙ

src/environments/environment.ts

(рдЬрд░ рд╣рд╛ file рдирд╕реЗрд▓, рддрдпрд╛рд░ рдХрд░.)

export const environment = {
  production: false,
  apiBaseUrl: 'http://localhost:8080'
};

рдЖрдгрд┐ prod рд╕рд╛рдареА:

src/environments/environment.prod.ts

export const environment = {
  production: true,
  apiBaseUrl: 'http://localhost:8080'
};


3. рдордЧ HotelService рддрдпрд╛рд░ рдХрд░ (рдХрд┐рдВрд╡рд╛ edit рдХрд░):
ЁЯСЙ path: src/app/core/services/hotel.service.ts

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { environment } from '../../../environments/environment';

@Injectable({ providedIn: 'root' })
export class HotelService {
  private base = `${environment.apiBaseUrl}`;

  constructor(private http: HttpClient) {}

  getAllHotels() {
    return this.http.get(`${this.base}/hotels`);
  }

  getHotelById(id: number) {
    return this.http.get(`${this.base}/hotels/${id}`);
  }

  addHotel(hotel: any) {
    return this.http.post(`${this.base}/hotels`, hotel);
  }

  updateHotel(id: number, hotel: any) {
    return this.http.put(`${this.base}/hotels/${id}`, hotel);
  }

  deleteHotel(id: number) {
    return this.http.delete(`${this.base}/hotels/${id}`);
  }
}


4. рдордЧ component рдордзреНрдпреЗ рд╡рд╛рдкрд░: ЁЯСЙ path: src/app/modules/hotel/hotel-list.component.ts

import { Component, OnInit } from '@angular/core';
import { HotelService } from 'src/app/core/services/hotel.service';

@Component({
  selector: 'app-hotel-list',
  templateUrl: './hotel-list.component.html',
})
export class HotelListComponent implements OnInit {
  hotels: any[] = [];

  constructor(private hotelService: HotelService) {}

  ngOnInit() {
    this.loadHotels();
  }

  loadHotels() {
    this.hotelService.getAllHotels().subscribe({
      next: (res) => (this.hotels = res),
      error: (err) => console.error('Error loading hotels', err),
    });
  }
}

рдЖрдгрд┐ рддреНрдпрд╛рдЪреНрдпрд╛ HTML рдордзреНрдпреЗ (hotel-list.component.html)

<div class="container">
  <h2>Hotel List</h2>
  <table>
    <thead>
      <tr><th>ID</th><th>Name</th><th>City</th><th>Actions</th></tr>
    </thead>
    <tbody>
      <tr *ngFor="let h of hotels">
        <td>{{h.id}}</td>
        <td>{{h.name}}</td>
        <td>{{h.city}}</td>
        <td>
          <button (click)="delete(h.id)">Delete</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>




---

ЁЯза Step 3 тАФ Run frontend

ng serve --open

Browser:
ЁЯСЙ http://localhost:4200
рдЬрд░ backend 8080 рд╡рд░ рдЪрд╛рд▓реВ рдЕрд╕реЗрд▓, рддрд░ рдЖрддрд╛ hotel list рджрд┐рд╕рд╛рдпрд▓рд╛ рдкрд╛рд╣рд┐рдЬреЗ тЬЕ


---

ЁЯФз Step 4 тАФ Optional (Proxy file for CORS)

рдЬрд░ рдХрд╛рд╣реА error рдЖрд▓рд╛ CORS рдЪрд╛, рддрд░ Angular root рдордзреНрдпреЗ proxy.conf.json рддрдпрд╛рд░ рдХрд░:

{
  "/": {
    "target": "http://localhost:8080",
    "secure": false,
    "changeOrigin": true
  }
}

рдЖрдгрд┐ рдордЧ рдЪрд╛рд▓рд╡рд╛:

ng serve --proxy-config proxy.conf.json


---

тЬЕ Step 5 тАФ Test

1. Backend logs рдкрд╣рд╛ (Spring console рд╡рд░ queries рджрд┐рд╕рддрд╛рдд).


2. Angular network tab рдордзреНрдпреЗ check рдХрд░рд╛ рдХреА request http://localhost:8080/hotels рд▓рд╛ рдЬрд╛рддреЛрдп рдХрд╛.


3. JSON рдбреЗрдЯрд╛ browser рд╡рд░ рджрд┐рд╕рддреЛрдп рдХрд╛.




---

рдЕрд╕рдВ рдХреЗрд▓реНрдпрд╛рд╡рд░ рддреБрдЭрдВ hotel module (frontend + backend) proper connect рд╣реЛрдИрд▓ рдЖрдгрд┐ add/update/delete рд╕рд░реНрд╡ рдиреАрдЯ рдЪрд╛рд▓рддреАрд▓ ЁЯФе


---

рд╣рд╡рдВ рдЕрд╕рд▓реНрдпрд╛рд╕ рдореА рдЖрддрд╛ ready-to-use hotel.service.ts + environment files + proxy.conf.json + test curl commands рдЕрд╕рдВ full pack рддрдпрд╛рд░ рдХрд░реВрди рджреЗрддреЛ (copy-paste ready).
рдХрд░реВ рдХрд╛?

