‡§†‡•Ä‡§ï ‡§Ü‡§π‡•á! üòé ‡§ö‡§≤‡§æ ‡§Ü‡§™‡§£ Rating ‡§µ‡§∞ Filter Hotels ‡§∏‡§æ‡§†‡•Ä Angular full setup ‡§¶‡•á‡§§‡•ã ‚Äì TS + HTML + CSS + Service.


---

1Ô∏è‚É£ hotel.service.ts (Rating filter)

import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class HotelService {
  private apiUrl = 'http://localhost:8080/api/hotels';

  constructor(private http: HttpClient) {}

  // Filter hotels by rating
  filterHotelsByRating(minRating: number): Observable<any> {
    const params = new HttpParams().set('minRating', minRating.toString());
    return this.http.get(`${this.apiUrl}/filter`, { params });
  }
}


---

2Ô∏è‚É£ filter-hotel.component.ts

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { HotelService } from '../services/hotel.service';

@Component({
  selector: 'app-filter-hotel',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './filter-hotel.component.html',
  styleUrls: ['./filter-hotel.component.css']
})
export class FilterHotelComponent implements OnInit {
  filterForm!: FormGroup;
  hotels: any[] = [];
  message = '';

  constructor(private fb: FormBuilder, private hotelService: HotelService) {}

  ngOnInit(): void {
    this.filterForm = this.fb.group({
      minRating: ['']
    });
  }

  onFilterByRating(): void {
    const minRating = this.filterForm.value.minRating;
    if (!minRating) return;

    this.hotelService.filterHotelsByRating(minRating).subscribe({
      next: res => {
        this.hotels = res;
        this.message = this.hotels.length === 0 ? 'No hotels found!' : '';
      },
      error: err => {
        console.error(err);
        this.message = 'Error fetching hotels!';
      }
    });
  }
}


---

3Ô∏è‚É£ filter-hotel.component.html

<div class="filter-container">
  <h2>Filter Hotels by Rating</h2>

  <form [formGroup]="filterForm" (ngSubmit)="onFilterByRating()">
    <div class="form-group">
      <label>Minimum Rating (1-5):</label>
      <input formControlName="minRating" type="number" placeholder="Enter rating" />
    </div>

    <button type="submit">Filter</button>
  </form>

  <p class="message">{{ message }}</p>

  <table *ngIf="hotels.length > 0">
    <thead>
      <tr>
        <th>Name</th>
        <th>Location</th>
        <th>Amenities</th>
        <th>Rating</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let hotel of hotels">
        <td>{{ hotel.name }}</td>
        <td>{{ hotel.location }}</td>
        <td>{{ hotel.amenities }}</td>
        <td>{{ hotel.rating }}</td>
      </tr>
    </tbody>
  </table>
</div>


---

4Ô∏è‚É£ filter-hotel.component.css

.filter-container {
  width: 400px;
  margin: 50px auto;
  padding: 20px;
  border: 2px solid #ddd;
  border-radius: 10px;
  background-color: #f8f9fa;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

h2 { text-align: center; color: #333; }

.form-group { margin-bottom: 15px; }
label { display: block; font-weight: bold; margin-bottom: 5px; }
input { width: 100%; padding: 8px; border-radius: 5px; border: 1px solid #ccc; }

button {
  width: 100%;
  padding: 10px;
  border-radius: 8px;
  border: none;
  background-color: #007bff;
  color: white;
  cursor: pointer;
}

button:hover { background-color: #005663; }

.message { text-align: center; margin-top: 10px; color: green; }

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 15px;
}

th, td { padding: 10px; border-bottom: 1px solid #ddd; text-align: left; }
tr:hover { background-color: #f9f9f9; }


---

‚úÖ ‡§Ü‡§§‡§æ flow:

1. User rating input ‡§ï‡§∞‡§§‡•ã ‚Üí submit / filter button click.


2. Angular GET /api/hotels/filter?minRating=X call.


3. Backend findByRatingGreaterThanEqual(minRating) ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® hotels return ‡§ï‡§∞‡§§‡•ã.


4. Table ‡§Æ‡§ß‡•ç‡§Ø‡•á filtered hotels display.




---

‡§ú‡§∞ ‡§π‡§µ‡§Ç, ‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ Rating + Location + Amenities combo filter ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•Ç‡§® copy-paste ready Angular + backend ‡§¶‡•á‡§ä ‡§∂‡§ï‡§§‡•ã ‡§ú‡•á ‡§≤‡§ó‡•á‡§ö ‡§ö‡§æ‡§≤‡•á‡§≤.

‡§§‡•Å‡§≤‡§æ ‡§Æ‡•Ä ‡§§‡•á ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•Ç‡§® ‡§¶‡•ç‡§Ø‡§æ‡§µ‡•á ‡§ï‡§æ?

