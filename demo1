ठीक आहे, Anurag. तुला get all rooms functionality हवी आहे backend DTOs (RoomRequestDTO + RoomResponseDTO) सोबत आणि frontend मध्ये hotel-wise + type-wise summary nit तयार करायचे आहे. मी तुला full code step-by-step देतो, backend DTOs nit map करून Angular component + service ready-to-use style मध्ये.


---

1️⃣ RoomService (Angular)

import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Room } from '../models/room.model';

@Injectable({
  providedIn: 'root'
})
export class RoomService {

  private apiUrl = 'http://localhost:8080/api/rooms';
  private hotelApiUrl = 'http://localhost:8080/api/hotels';

  constructor(private http: HttpClient) {}

  // Get all rooms
  getRoomList(): Observable<Room[]> {
    return this.http.get<Room[]>(`${this.apiUrl}`);
  }

  // Optional: Get all hotels (for mapping hotelId → name)
  getHotelList(): Observable<any[]> {
    return this.http.get<any[]>(`${this.hotelApiUrl}`);
  }
}


---

2️⃣ RoomComponent (Angular)

import { Component, OnInit } from '@angular/core';
import { RoomService } from '../../../services/roomservice';
import { Room } from '../../../models/room.model';

@Component({
  selector: 'app-room',
  templateUrl: './room.html',
  styleUrls: ['./room.css']
})
export class RoomComponent implements OnInit {

  rooms: Room[] = [];
  hotelSummary: any[] = [];
  hotels: any[] = [];

  constructor(private roomService: RoomService) {}

  ngOnInit(): void {
    this.loadRooms();
    this.loadHotels();
  }

  loadRooms() {
    this.roomService.getRoomList().subscribe({
      next: (res) => {
        this.rooms = res;
        this.generateSummary();
      },
      error: (err) => console.error(err)
    });
  }

  loadHotels() {
    this.roomService.getHotelList().subscribe({
      next: (res) => this.hotels = res,
      error: (err) => console.error(err)
    });
  }

  generateSummary() {
    const summary: any = {};

    this.rooms.forEach(room => {
      const hotelId = room.hotelId;
      const type = room.type;

      if (!summary[hotelId]) summary[hotelId] = {};
      if (!summary[hotelId][type]) summary[hotelId][type] = 0;

      summary[hotelId][type]++;
    });

    // Convert object to array for template + include hotel name if available
    this.hotelSummary = Object.keys(summary).map(hotelId => {
      const hotelName = this.hotels.find(h => h.id == +hotelId)?.name || `Hotel ${hotelId}`;
      return {
        hotelId,
        hotelName,
        types: Object.keys(summary[hotelId]).map(type => ({
          type,
          count: summary[hotelId][type]
        }))
      };
    });
  }

}


---

3️⃣ Template (room.html)

<h2>Rooms Summary by Hotel</h2>

<div *ngFor="let hotel of hotelSummary">
  <h3>{{hotel.hotelName}}</h3>
  <ul>
    <li *ngFor="let t of hotel.types">
      {{t.type}} : {{t.count}}
    </li>
  </ul>
</div>


---

4️⃣ Room Model (room.model.ts)

export interface Room {
  roomId?: number;      // matches RoomResponseDTO.roomId
  type: string;
  price: number;
  availability: boolean;
  features: string;
  hotelId: number;
}


---

✅ Notes

1. Room interface nit RoomResponseDTO fields map केली आहेत.


2. getRoomList() call backend /api/rooms → returns RoomResponseDTO[].


3. generateSummary() hotel-wise + type-wise count तयार करतो.


4. Optional: getHotelList() call करून hotel name map केली.




---

तुला हवे तर मी Room create + edit + delete सुद्धा HotelService style ready-to-use Angular component nit देऊ शकतो, जे full CRUD backend सोबत nit काम करेल.

तू ready आहेस का मी ते देऊ?

