рдкрд░рдлреЗрдХреНрдЯ! ЁЯФе
рдЬрд░ Angular 20 рдЖрд╣реЗ рддрд░ рддреБрдЭреНрдпрд╛рдХрдбреЗ рдирд╡реАрдирддрдо тАЬsignalsтАЭ, тАЬstandalone componentsтАЭ рдЖрдгрд┐ тАЬinjectable servicesтАЭ рд╕рд░реНрд╡ features рдЙрдкрд▓рдмреНрдз рдЖрд╣реЗрдд.
рдореНрд╣рдгрдЬреЗ тАФ рдореА рдЖрдзреА рджрд┐рд▓реЗрд▓рд╛ signal() рд╡рд╛рдкрд░рд▓реЗрд▓рд╛ рдХреЛрдб (HotelComponent рдЪрд╛ рдкрд╣рд┐рд▓рд╛ version) рдмрд┐рд▓рдХреБрд▓ рдмрд░реЛрдмрд░ рдЪрд╛рд▓реЗрд▓. тЬЕ

рдкрдг рддрд░реАрд╣реА рдХрд╛рд╣реА рд▓реЛрдХрд▓ рд╕реЗрдЯрдЕрдк issue рдореБрд│реЗ рддреБрд▓рд╛ error рджрд┐рд╕рддреЛрдп рдЕрд╕рдВ рд╡рд╛рдЯрддрдВ, рддреНрдпрд╛рдореБрд│реЗ рдЪрд▓рд╛ step-by-step verify рдХрд░реВрдпрд╛ ЁЯСЗ


---

тЬЕ Step-by-Step Check (Angular 20 рд╕рд╛рдареА)

ЁЯзй 1я╕ПтГг hotelService.ts

Path: src/app/core/services/hotelService.ts

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class Hotel {
  private apiUrl = 'http://localhost:8080/api/hotels';

  constructor(private http: HttpClient) {}

  getAll(): Observable<any> {
    return this.http.get(`${this.apiUrl}`);
  }

  getById(id: number): Observable<any> {
    return this.http.get(`${this.apiUrl}/${id}`);
  }

  searchByLocation(location: string): Observable<any> {
    return this.http.get(`${this.apiUrl}/search?location=${encodeURIComponent(location)}`);
  }

  filterByRating(rating: number): Observable<any> {
    return this.http.get(`${this.apiUrl}/filter?rating=${rating}`);
  }
}


---

ЁЯПи 2я╕ПтГг hotel.ts

Path: src/app/features/hotel/hotel.ts

import { CommonModule } from '@angular/common';
import { Component, signal } from '@angular/core';
import { HttpClientModule } from '@angular/common/http';
import { Hotel } from '../../core/services/hotelService';

@Component({
  selector: 'app-hotel',
  standalone: true,
  imports: [CommonModule, HttpClientModule],
  templateUrl: './hotel.html',
  styleUrl: './hotel.css'
})
export class HotelComponent {
  hotels = signal<any[]>([]);
  message = signal('');
  loading = signal(false);

  constructor(private hotelService: Hotel) {}

  fetchAll() {
    this.loading.set(true);
    this.hotelService.getAll().subscribe({
      next: (res: any) => {
        this.hotels.set(res);
        this.message.set('Fetched all hotels');
        this.loading.set(false);
      },
      error: (err) => {
        console.error('Error fetching hotels', err);
        this.message.set('Error fetching hotels: ' + (err?.error?.message || err.message || err.statusText));
        this.loading.set(false);
      }
    });
  }

  fetchById(idInput: string) {
    const id = Number(idInput);
    if (!id) {
      this.message.set('Please enter a valid numeric id');
      return;
    }
    this.loading.set(true);
    this.hotelService.getById(id).subscribe({
      next: (res: any) => {
        this.hotels.set([res]);
        this.message.set('Fetched hotel id ' + id);
        this.loading.set(false);
      },
      error: (err) => {
        console.error('Error fetching hotel by id', err);
        this.message.set('Error fetching hotel by id: ' + (err?.error?.message || err.message || err.statusText));
        this.loading.set(false);
      }
    });
  }

  search(location: string) {
    if (!location) {
      this.message.set('Enter location');
      return;
    }
    this.loading.set(true);
    this.hotelService.searchByLocation(location).subscribe({
      next: (res: any) => {
        this.hotels.set(res);
        this.message.set('Search results for "' + location + '"');
        this.loading.set(false);
      },
      error: (err) => {
        console.error('Search error', err);
        this.message.set('Search error: ' + (err?.error?.message || err.message || err.statusText));
        this.loading.set(false);
      }
    });
  }

  clear() {
    this.hotels.set([]);
    this.message.set('');
  }
}


---

тЪЩя╕П 3я╕ПтГг app.ts

Path: src/app/app.ts

import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { Login } from './features/auth/login/login';
import { HotelComponent } from './features/hotel/hotel';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet, Login, HotelComponent],
  templateUrl: './app.html',
  styleUrl: './app.css'
})
export class AppComponent {
  title = 'SmartHotelBookingSystem';
}


---

ЁЯз╛ 4я╕ПтГг app.html

Path: src/app/app.html

<app-login></app-login>
<app-hotel></app-hotel>


---

ЁЯТб рдЖрддрд╛ рд╣реЗ рд╕рд░реНрд╡ рддрдкрд╛рд╕реВрди рдкрд╛рд╣рд╛:

1. VS Code рдордзреНрдпреЗ рд╕рд░реНрд╡ рдлрд╛рдЗрд▓реНрд╕ рд╕реЗрд╡реНрд╣ рдХрд░рд╛.


2. рдЯрд░реНрдорд┐рдирд▓рдордзреНрдпреЗ рдЬрд╛ тЖТ

npm install
ng serve --open


3. рдЬрд░ рдЕрдЬреВрди error рдпреЗрддреЛрдп рддрд░ рдорд▓рд╛ рдЦрд╛рд▓реАрд▓ рдорд╛рд╣рд┐рддреА рджреЗ:

Full error message (рд▓рд╛рд▓ рдордЬрдХреВрд░)

рдХреЛрдгрддреНрдпрд╛ рдлрд╛рдИрд▓рдордзреНрдпреЗ (hotelService.ts / hotel.ts / app.ts)




рдордЧ рдореА рддреБрд▓рд╛ рдереЗрдЯ error line-by-line fix рджреЗрдИрди (Angular 20 рд╕рд╛рдареА exact syntax рд╡рд╛рдкрд░реВрди).

рддреВ error message рдЗрдереЗ paste рдХрд░рд╢реАрд▓ рдХрд╛ рдЖрддрд╛?

