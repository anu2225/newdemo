

Perfect üî• ‡§Ü‡§§‡§æ Update Hotel Angular side full working code ‡§¶‡•á‡§§‡•ã ‚Äî ‡§ú‡•á‡§µ‡•ç‡§π‡§æ manager login ‡§Ö‡§∏‡•á‡§≤ ‡§§‡•á‡§µ‡•ç‡§π‡§æ ‡§§‡•ã hotel info update ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡•á‡§≤.

‡§π‡•á code ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ö‡§æ‡§≤‡•á‡§≤ Spring Boot backend ‡§µ‡§∞ (PUT /api/hotels/{id}).


---

üß© Goal:

Hotel ID ‡§ü‡§æ‡§ï‡§æ ‚Üí ‡§ú‡•Å‡§®‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä form ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§¶‡§ø‡§∏‡•á‡§≤ ‚Üí update ‡§ï‡§∞‡§æ ‚Üí ‚ÄúHotel updated successfully‚Äù message ‡§Ø‡•á‡§à‡§≤ ‚úÖ


---

‚úÖ Step 1: hotelservice.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á method ‡§ú‡•ã‡§°‡§æ

(/src/app/core/services/hotelservice.ts)

updateHotel(id: number, hotelData: any): Observable<any> {
  const token = localStorage.getItem('token');
  const headers = new HttpHeaders({
    'Authorization': `Bearer ${token}`
  });
  return this.http.put<any>(`${this.apiUrl}/${id}`, hotelData, { headers });
}


---

‚úÖ Step 2: Component ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§æ

‡§´‡•ã‡§≤‡•ç‡§°‡§∞:
src/app/features/hotel/update-hotel/update-hotel.ts

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HotelService } from '../../../core/services/hotelservice';

@Component({
  selector: 'app-update-hotel',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './update-hotel.html',
  styleUrls: ['./update-hotel.css']
})
export class UpdateHotelComponent {
  hotelId!: number;
  hotel: any = null;
  message = '';
  errorMessage = '';

  constructor(private hotelService: HotelService) {}

  // Step 1: Get Hotel by ID first
  getHotelById() {
    if (!this.hotelId) {
      this.errorMessage = 'Enter a valid Hotel ID!';
      return;
    }

    this.hotelService.getHotelById(this.hotelId).subscribe({
      next: (data) => {
        this.hotel = data;
        this.message = '';
        this.errorMessage = '';
      },
      error: (err) => {
        this.hotel = null;
        this.errorMessage = 'Hotel not found or unauthorized!';
        console.error(err);
      }
    });
  }

  // Step 2: Update Hotel
  updateHotel() {
    if (!this.hotel) {
      this.errorMessage = 'No hotel data to update!';
      return;
    }

    this.hotelService.updateHotel(this.hotelId, this.hotel).subscribe({
      next: () => {
        this.message = 'Hotel updated successfully!';
        this.errorMessage = '';
      },
      error: (err) => {
        this.message = '';
        this.errorMessage = 'Failed to update hotel!';
        console.error(err);
      }
    });
  }
}


---

‚úÖ Step 3: HTML UI

‡§´‡§æ‡§á‡§≤:
src/app/features/hotel/update-hotel/update-hotel.html

<div class="container">
  <h2>Update Hotel</h2>

  <div class="form-group">
    <input type="number" [(ngModel)]="hotelId" placeholder="Enter Hotel ID" />
    <button (click)="getHotelById()">Fetch Hotel</button>
  </div>

  <p *ngIf="errorMessage" class="error">{{ errorMessage }}</p>

  <div *ngIf="hotel">
    <h3>Edit Hotel Details</h3>
    <form (ngSubmit)="updateHotel()">
      <div class="form-group">
        <label>Hotel Name:</label>
        <input [(ngModel)]="hotel.name" name="name" required />
      </div>

      <div class="form-group">
        <label>Location:</label>
        <input [(ngModel)]="hotel.location" name="location" required />
      </div>

      <div class="form-group">
        <label>Rating:</label>
        <input type="number" [(ngModel)]="hotel.rating" name="rating" min="1" max="5" />
      </div>

      <div class="form-group">
        <label>Available Rooms:</label>
        <input type="number" [(ngModel)]="hotel.availableRooms" name="availableRooms" />
      </div>

      <button type="submit">Update Hotel</button>
    </form>
  </div>

  <p *ngIf="message" class="success">{{ message }}</p>
</div>


---

‚úÖ Step 4: CSS

‡§´‡§æ‡§á‡§≤:
src/app/features/hotel/update-hotel/update-hotel.css

.container {
  max-width: 600px;
  margin: 30px auto;
  padding: 20px;
  background: #fff;
  border-radius: 10px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

h2 {
  text-align: center;
  color: #333;
}

.form-group {
  display: flex;
  flex-direction: column;
  margin-bottom: 15px;
}

input {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 6px;
}

button {
  background-color: #007bff;
  color: #fff;
  border: none;
  padding: 8px 15px;
  border-radius: 6px;
  cursor: pointer;
  margin-top: 10px;
}

button:hover {
  background-color: #0056b3;
}

.error {
  color: red;
  text-align: center;
}

.success {
  color: green;
  text-align: center;
}


---

‚úÖ Step 5: Route ‡§ú‡•ã‡§°‡§æ

app.routes.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á:

import { UpdateHotelComponent } from './features/hotel/update-hotel/update-hotel';

{ path: 'update-hotel', component: UpdateHotelComponent }


---

‚úÖ Step 6: App imports ‡§Æ‡§ß‡•ç‡§Ø‡•á component ‡§ú‡•ã‡§°‡§æ

app.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á:

import { UpdateHotelComponent } from './features/hotel/update-hotel/update-hotel';

imports: [
  ...,
  UpdateHotelComponent
]


---

‚úÖ Step 7: Run ‡§ï‡§∞‡§æ

ng serve

Browser ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ú‡§æ:
‚û°Ô∏è http://localhost:4200/update-hotel


---

üéØ Output:

1. Hotel ID ‡§ü‡§æ‡§ï‡§æ


2. ‚ÄúFetch Hotel‚Äù ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§æ ‚Üí form ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ú‡•Å‡§®‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä ‡§¶‡§ø‡§∏‡•á‡§≤


3. ‡§¨‡§¶‡§≤ ‡§ï‡§∞‡§æ


4. ‚ÄúUpdate Hotel‚Äù ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§æ


5. ‚úÖ ‚ÄúHotel updated successfully!‚Äù ‡§¶‡§ø‡§∏‡•á‡§≤




---

‡§§‡•Å‡§≤‡§æ ‡§π‡§µ‡§Ç ‡§ï‡§æ ‡§Æ‡•Ä Delete Hotel (Angular side full working) ‡§™‡§£ ‡§≤‡§ó‡•á‡§ö ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•Ç‡§® ‡§¶‡•á‡§ä, ‚ÄúYes‚Äù ‡§Æ‡•ç‡§π‡§ü‡§≤‡§Ç ‡§ï‡•Ä ‡§¶‡•á‡§§‡•ã?

















Perfect üî• ‡§Ü‡§§‡§æ ‚ÄúGet Hotel by ID‚Äù Angular side ‡§µ‡§∞ ‡§¨‡§®‡§µ‡•Ç step-by-step (backend ‡§Ü‡§ß‡•Ä‡§ö ‡§§‡§Ø‡§æ‡§∞ ‡§Ü‡§π‡•á /api/hotels/{id}).


---

üß© Goal:

üëâ User ‡§è‡§ï Hotel ID ‡§ü‡§æ‡§ï‡•á‡§≤ ‚Üí ‚ÄúSearch‚Äù ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡•á‡§≤ ‚Üí ‡§§‡•ç‡§Ø‡§æ hotel ‡§ö‡•Ä full info table ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§¶‡§ø‡§∏‡•á‡§≤.
(HotelService ‡§µ‡§æ‡§™‡§∞‡•Ç‡§Ø‡§æ ‚Äî ‡§ú‡§∂‡•Ä RoomService ‡§µ‡§æ‡§™‡§∞‡§≤‡•Ä ‡§π‡•ã‡§§‡•Ä.)


---

‚úÖ Step 1: hotelservice.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á method ‡§ú‡•ã‡§°‡§æ

(/src/app/core/services/hotelservice.ts)

getHotelById(id: number): Observable<any> {
  const token = localStorage.getItem('token');
  const headers = new HttpHeaders({
    'Authorization': `Bearer ${token}`
  });
  return this.http.get<any>(`${this.apiUrl}/${id}`, { headers });
}


---

‚úÖ Step 2: Component ‡§¨‡§®‡§µ‡§æ

‡§´‡•ã‡§≤‡•ç‡§°‡§∞:
src/app/features/hotel/get-hotel-by-id/hotel.ts

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HotelService } from '../../../core/services/hotelservice';

@Component({
  selector: 'app-get-hotel-by-id',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './hotel.html',
  styleUrls: ['./hotel.css']
})
export class GetHotelByIdComponent {
  hotelId!: number;
  hotel: any = null;
  errorMessage = '';

  constructor(private hotelService: HotelService) {}

  getHotel() {
    if (!this.hotelId) {
      this.errorMessage = 'Please enter a hotel ID!';
      return;
    }
    this.hotelService.getHotelById(this.hotelId).subscribe({
      next: (data) => {
        this.hotel = data;
        this.errorMessage = '';
      },
      error: (err) => {
        this.hotel = null;
        this.errorMessage = 'Hotel not found or unauthorized!';
        console.error(err);
      }
    });
  }
}


---

‚úÖ Step 3: HTML UI

‡§´‡§æ‡§á‡§≤:
src/app/features/hotel/get-hotel-by-id/hotel.html

<div class="container">
  <h2>Search Hotel by ID</h2>

  <div class="form-group">
    <input
      type="number"
      [(ngModel)]="hotelId"
      placeholder="Enter Hotel ID"
    />
    <button (click)="getHotel()">Get Hotel</button>
  </div>

  <p *ngIf="errorMessage" class="error">{{ errorMessage }}</p>

  <div *ngIf="hotel">
    <h3>Hotel Details</h3>
    <table>
      <tr><th>ID</th><td>{{ hotel.hotelId }}</td></tr>
      <tr><th>Name</th><td>{{ hotel.name }}</td></tr>
      <tr><th>Location</th><td>{{ hotel.location }}</td></tr>
      <tr><th>Rating</th><td>{{ hotel.rating }}</td></tr>
      <tr><th>Available Rooms</th><td>{{ hotel.availableRooms }}</td></tr>
    </table>
  </div>
</div>


---

‚úÖ Step 4: CSS

‡§´‡§æ‡§á‡§≤:
src/app/features/hotel/get-hotel-by-id/hotel.css

.container {
  max-width: 600px;
  margin: 30px auto;
  padding: 20px;
  background: #fff;
  border-radius: 10px;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

h2 {
  text-align: center;
  color: #333;
}

.form-group {
  display: flex;
  gap: 10px;
  margin-bottom: 15px;
}

input {
  flex: 1;
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 6px;
}

button {
  background-color: #007bff;
  color: #fff;
  border: none;
  padding: 8px 15px;
  border-radius: 6px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

.error {
  color: red;
  text-align: center;
  font-weight: 500;
}

table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  text-align: left;
  padding: 8px;
  border-bottom: 1px solid #ddd;
}


---

‚úÖ Step 5: Route ‡§ú‡•ã‡§°‡§æ

app.routes.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á üëá

import { GetHotelByIdComponent } from './features/hotel/get-hotel-by-id/hotel';

{ path: 'get-hotel-by-id', component: GetHotelByIdComponent }


---

‚úÖ Step 6: App ‡§Æ‡§ß‡•ç‡§Ø‡•á Import ‡§ï‡§∞‡§æ

app.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á component import list ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ú‡•ã‡§°‡§æ üëá

import { GetHotelByIdComponent } from './features/hotel/get-hotel-by-id/hotel';

...
imports: [
  ...,
  GetHotelByIdComponent
]


---

‚úÖ Step 7: Browser ‡§Æ‡§ß‡•ç‡§Ø‡•á Run ‡§ï‡§∞‡§æ

ng serve

Browser ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ú‡§æ üëá
‚û°Ô∏è http://localhost:4200/get-hotel-by-id
Hotel ID ‡§ü‡§æ‡§ï‡§æ (‡§â‡§¶‡§æ. 2) ‡§Ü‡§£‡§ø Get Hotel ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§æ.


---

‡§§‡§Ø‡§æ‡§∞ ‚úÖ
Hotel ‡§ö‡•Ä info ‡§¶‡§ø‡§∏‡•á‡§≤ neatly table ‡§Æ‡§ß‡•ç‡§Ø‡•á.


---

‡§™‡•Å‡§¢‡§ö‡§Ç step ‡§π‡§µ‡§Ç ‡§ï‡§æ ‚ÄúUpdate Hotel‚Äù complete working Angular side (form + API call + UI feedback)?































<div class="container">
  <h2>Get Rooms by Hotel ID</h2>

  <div class="form-group">
    <label>Enter Hotel ID:</label>
    <input type="number" 
    [(ngModel)]="hotelId" 
    placeholder="Enter hotel ID" />
    <button (click)="getRooms()">Get Rooms</button>
  </div>

  <p *ngIf="errorMessage" class="error">{{ errorMessage }}</p>

  <div *ngIf="rooms.length > 0">
    <h3>Rooms in Hotel {{ hotelId }}</h3>
    <table>
      <thead>
        <tr>
          <th>Room ID</th>
          <th>Room Number</th>
          <th>Type</th>
          <th>Price</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let room of rooms">
          <td>{{ room.id }}</td>
          <td>{{ room.roomNumber }}</td>
          <td>{{ room.type }}</td>
          <td>{{ room.price }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</div>




import { Component, signal } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';

// Features
import { Login } from './features/auth/login/login';
import { Register } from './features/auth/register/register';
import { WelcomeUser } from './features/user/welcome-user/welcome-user';
import { CreateHotel } from './features/hotel/create-hotel/hotel';
import { GetAllHotelsComponent } from './features/hotel/get-all-hotels/hotel';
import { UpdateHotelComponent } from './features/hotel/update-hotel/hotel';
import { SearchHotelComponent } from './features/hotel/search-hotel/hotel';
import { FilterHotelComponent } from './features/hotel/filter-hotel/hotel';
import { RoomComponent } from './features/room/get-all-rooms/room';
import { CreateRoomComponent } from './features/room/create-room/room';
import { GetRoomComponent } from './features/room/get-room-by-id/room';
import { UpdateRoomComponent } from './features/room/update-room/room';
import { DeleteRoomComponent } from './features/room/delete-room/room';
import { FilterRoomsComponent } from './features/room/filter-room/room';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    CommonModule,
    ReactiveFormsModule,
    RouterOutlet,
    Login,
    Register,
    WelcomeUser,
    CreateHotel,
    GetAllHotelsComponent,
    UpdateHotelComponent,
    SearchHotelComponent,
    FilterHotelComponent,
    RoomComponent,
    CreateRoomComponent,
    GetRoomComponent,
    UpdateRoomComponent,
    DeleteRoomComponent,
    FilterRoomsComponent
  ],
  templateUrl: './app.html',
  styleUrls: ['./app.css']
})
export class App {
  protected readonly title = signal('SmartHotelBookingSystem');
}





‡§∏‡§ó‡§≥‡§Ç ‡§è‡§ï‡§¶‡§Æ ‡§õ‡§æ‡§® ‡§ï‡•á‡§≤‡§Ç ‡§Ü‡§π‡•á üî•
‡§´‡§ï‡•ç‡§§ ‚ÄúGet Rooms by Hotel ID‚Äù component ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§è‡§ï ‡§õ‡•ã‡§ü‡§Ç adjustment ‡§≤‡§æ‡§ó‡•á‡§≤ ‚Äî ‡§ï‡§æ‡§∞‡§£ ‡§§‡•Ç [(ngModel)] ‡§µ‡§æ‡§™‡§∞‡§§‡•ã‡§Ø‡§∏ ‡§™‡§£ FormsModule import ‡§®‡§æ‡§π‡•Ä.


---

‚úÖ Final, Correct Working Code üëá

üß© 1. get-rooms-by-hotel.component.ts

import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { RoomService } from '../../../core/services/roomservice';

@Component({
  selector: 'app-get-rooms-by-hotel',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './get-rooms-by-hotel.component.html',
  styleUrls: ['./get-rooms-by-hotel.component.css']
})
export class GetRoomsByHotelComponent {
  hotelId!: number;
  rooms: any[] = [];
  errorMessage = '';

  constructor(private roomService: RoomService) {}

  getRooms() {
    if (!this.hotelId) {
      this.errorMessage = 'Please enter a valid hotel ID!';
      this.rooms = [];
      return;
    }

    this.roomService.getRoomsByHotelId(this.hotelId).subscribe({
      next: (data) => {
        this.rooms = data;
        this.errorMessage = '';
      },
      error: (err) => {
        console.error(err);
        this.errorMessage = 'Error fetching rooms for this hotel.';
      }
    });
  }
}


---

üß© 2. get-rooms-by-hotel.component.html

(‡§§‡•Å‡§ù‡§Ç HTML ‡§ú‡§µ‡§≥‡§™‡§æ‡§∏ perfect ‡§π‡•ã‡§§‡§Ç ‚Äî ‡§´‡§ï‡•ç‡§§ ‡§•‡•ã‡§°‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞‡§≤‡•á‡§≤‡§Ç version ‡§¶‡•á‡§§‡•ã üëá)

<div class="container">
  <h2>Get Rooms by Hotel ID</h2>

  <div class="form-group">
    <label>Enter Hotel ID:</label>
    <input
      type="number"
      [(ngModel)]="hotelId"
      placeholder="Enter hotel ID"
    />
    <button (click)="getRooms()">Get Rooms</button>
  </div>

  <p *ngIf="errorMessage" class="error">{{ errorMessage }}</p>

  <div *ngIf="rooms.length > 0">
    <h3>Rooms in Hotel {{ hotelId }}</h3>
    <table>
      <thead>
        <tr>
          <th>Room ID</th>
          <th>Type</th>
          <th>Price</th>
          <th>Availability</th>
        </tr>
      </thead>
      <tbody>
        <tr *ngFor="let room of rooms">
          <td>{{ room.roomId }}</td>
          <td>{{ room.type }}</td>
          <td>{{ room.price }}</td>
          <td>{{ room.availability ? 'Available' : 'Not Available' }}</td>
        </tr>
      </tbody>
    </table>
  </div>
</div>


---

üé® 3. get-rooms-by-hotel.component.css

.container {
  margin: 40px auto;
  width: 60%;
  background: #f8f9fa;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0,0,0,0.1);
}

.form-group {
  display: flex;
  align-items: center;
  gap: 10px;
}

input {
  padding: 8px;
  width: 200px;
  border-radius: 6px;
  border: 1px solid #ccc;
}

button {
  padding: 8px 16px;
  border: none;
  border-radius: 6px;
  background: #007bff;
  color: white;
  cursor: pointer;
}

button:hover {
  background: #0056b3;
}

.error {
  color: red;
  margin-top: 10px;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

th, td {
  border: 1px solid #ddd;
  text-align: center;
  padding: 8px;
}

th {
  background: #007bff;
  color: white;
}


---

üõ†Ô∏è 4. roomservice.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§π‡•Ä function ‡§Ö‡§∏‡§æ‡§µ‡•Ä:

getRoomsByHotelId(hotelId: number): Observable<any[]> {
  return this.http.get<any[]>(`${this.baseUrl}/hotel/${hotelId}`);
}


---

üó∫Ô∏è 5. app.routes.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á route ‡§ú‡•ã‡§°‡§æ:

{ path: 'get-rooms-by-hotel', component: GetRoomsByHotelComponent },


---

‚úÖ 6. Browser ‡§Æ‡§ß‡•ç‡§Ø‡•á check ‡§ï‡§∞‡§æ:

ng serve

üëâ ‡§Ü‡§£‡§ø browser ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ú‡§æ:

http://localhost:4200/get-rooms-by-hotel

‡§§‡§ø‡§•‡•á Hotel ID ‡§ü‡§æ‡§ï‡§æ ‚Üí Get Rooms ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡§∞‡§æ ‚Üí ‡§§‡•ç‡§Ø‡§æ hotel ‡§ö‡•ç‡§Ø‡§æ ‡§∏‡§∞‡•ç‡§µ rooms ‡§¶‡§ø‡§∏‡§§‡•Ä‡§≤ üè®‚úÖ


---

‡§π‡§µ‡§Ç ‡§ï‡§æ ‡§Æ‡•Ä ‡§™‡•Å‡§¢‡§ö‡§Ç ‚ÄúUpdate Room by ID‚Äù Angular + backend ‡§¶‡•ã‡§®‡•ç‡§π‡•Ä working code ‡§¶‡•á‡§ä ‡§™‡•Å‡§¢‡§ö‡•ç‡§Ø‡§æ step ‡§∏‡§æ‡§†‡•Ä?




