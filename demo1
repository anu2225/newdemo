import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Room } from '../models/room.model';

@Injectable({
  providedIn: 'root'
})
export class RoomService {

  private apiUrl = 'http://localhost:8080/api/rooms';
  private hotelApiUrl = 'http://localhost:8080/api/hotels';

  constructor(private http: HttpClient) {}

  // Get all rooms
  getAllRooms(): Observable<Room[]> {
    return this.http.get<Room[]>(this.apiUrl);
  }

  // Get room by id
  getRoomById(id: number): Observable<Room> {
    return this.http.get<Room>(`${this.apiUrl}/${id}`);
  }

  // Create room (with token for auth if required)
  createRoom(roomData: Room, token?: string): Observable<Room> {
    let headers = new HttpHeaders();
    if (token) {
      headers = headers.set('Authorization', `Bearer ${token}`);
    }
    return this.http.post<Room>(this.apiUrl, roomData, { headers });
  }

  // Update room
  updateRoom(id: number, roomData: Room, token?: string): Observable<Room> {
    let headers = new HttpHeaders();
    if (token) {
      headers = headers.set('Authorization', `Bearer ${token}`);
    }
    return this.http.put<Room>(`${this.apiUrl}/${id}`, roomData, { headers });
  }

  // Delete room
  deleteRoom(id: number, token?: string): Observable<any> {
    let headers = new HttpHeaders();
    if (token) {
      headers = headers.set('Authorization', `Bearer ${token}`);
    }
    return this.http.delete(`${this.apiUrl}/${id}`, { headers });
  }

  // Get rooms by hotel
  getRoomsByHotel(hotelId: number): Observable<Room[]> {
    const params = new HttpParams().set('hotelId', hotelId.toString());
    return this.http.get<Room[]>(`${this.apiUrl}/filter`, { params });
  }

  // Get all hotels for dropdown
  getAllHotels(): Observable<any[]> {
    return this.http.get<any[]>(this.hotelApiUrl);
  }
}
