‡§è‡§ï‡§¶‡§Æ ‡§õ‡§æ‡§® ‚úÖ ‡§Æ‡§ó ‡§Ü‡§§‡§æ ‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ ‡§™‡•Ç‡§∞‡•ç‡§£ "Hotel Module" (Angular frontend) ‡§¶‡•á‡§£‡§æ‡§∞ ‡§Ü‡§π‡•á ‚Äî
‡§ú‡•ã ‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ ‡§¶‡§ø‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ backend (SmartHotelBookingSystem-main) ‡§∂‡•Ä 100% map ‡§π‡•ã‡§à‡§≤.
‡§π‡§æ module login ‡§®‡§Ç‡§§‡§∞ /hotels route ‡§µ‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•á‡§≤, ‡§Ü‡§£‡§ø ‡§§‡•ã backend ‡§Æ‡§ß‡•Ä‡§≤ HotelController.java endpoints ‡§∏‡•ã‡§¨‡§§ ‡§ú‡•ã‡§°‡§≤‡•á‡§≤‡§æ ‡§Ö‡§∏‡•á‡§≤.


---

üîß Backend Reference (‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ ‡§™‡•ç‡§∞‡•ã‡§ú‡•á‡§ï‡•ç‡§ü‡§Æ‡§ß‡•Ç‡§®)

‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ HotelController.java ‡§Æ‡§ß‡§≤‡•á endpoints ‡§Æ‡•Ä extract ‡§ï‡•á‡§≤‡•á ‡§Ü‡§π‡•á‡§§:

HTTP Method	Endpoint	Description

GET	/api/hotels	Get all hotels
GET	/api/hotels/{id}	Get hotel by ID
POST	/api/hotels	Add new hotel
PUT	/api/hotels/{id}	Update hotel
DELETE	/api/hotels/{id}	Delete hotel
GET	/api/hotels/search?location=	Search hotels by location
GET	/api/hotels/filter?rating=	Filter hotels by rating



---

üèó Folder Structure

‡§§‡•Ç ‡§π‡•á 3 ‡§´‡§æ‡§à‡§≤‡•ç‡§∏ src/app/hotel/ ‡§´‡•ã‡§≤‡•ç‡§°‡§∞‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§†‡•á‡§µ:

src/app/hotel/
 ‚îú‚îÄ‚îÄ hotel.ts
 ‚îú‚îÄ‚îÄ hotelservice.ts
 ‚îî‚îÄ‚îÄ hotel.model.ts


---

üß© 1. hotel.model.ts

export interface Hotel {
  id?: number;
  name: string;
  address?: string;
  city?: string;
  rating?: number;
  description?: string;
}


---

üß© 2. hotelservice.ts

import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Hotel } from './hotel.model';
import { environment } from '../../environments/environment';

@Injectable({ providedIn: 'root' })
export class Hotelservice {
  private baseUrl = `${environment.apiUrl}/hotels`;

  constructor(private http: HttpClient) {}

  private getHeaders() {
    const token = localStorage.getItem('token'); // your login token key
    if (token) {
      return {
        headers: new HttpHeaders({
          Authorization: `Bearer ${token}`,
        }),
      };
    }
    return {};
  }

  getAll(): Observable<Hotel[]> {
    return this.http.get<Hotel[]>(this.baseUrl, this.getHeaders());
  }

  getById(id: number): Observable<Hotel> {
    return this.http.get<Hotel>(`${this.baseUrl}/${id}`, this.getHeaders());
  }

  create(hotel: Hotel): Observable<Hotel> {
    return this.http.post<Hotel>(this.baseUrl, hotel, this.getHeaders());
  }

  update(id: number, hotel: Hotel): Observable<Hotel> {
    return this.http.put<Hotel>(`${this.baseUrl}/${id}`, hotel, this.getHeaders());
  }

  delete(id: number): Observable<void> {
    return this.http.delete<void>(`${this.baseUrl}/${id}`, this.getHeaders());
  }

  search(location: string): Observable<Hotel[]> {
    return this.http.get<Hotel[]>(`${this.baseUrl}/search`, {
      params: { location },
      ...this.getHeaders(),
    });
  }

  filterByRating(rating: number): Observable<Hotel[]> {
    return this.http.get<Hotel[]>(`${this.baseUrl}/filter`, {
      params: { rating: rating.toString() },
      ...this.getHeaders(),
    });
  }
}


---

üß© 3. hotel.ts

import { Component, OnInit } from '@angular/core';
import { Hotelservice } from './hotelservice';
import { Hotel } from './hotel.model';
import { Router } from '@angular/router';

@Component({
  selector: 'app-hotel',
  template: `
    <div class="hotel-container">
      <h2>Hotel Management</h2>

      <div class="actions">
        <input [(ngModel)]="searchText" placeholder="Search by location" />
        <button (click)="search()">Search</button>
        <input type="number" [(ngModel)]="filterRating" placeholder="Filter by rating" />
        <button (click)="filter()">Filter</button>
        <button (click)="load()">Refresh</button>
        <button (click)="startAdd()">Add New Hotel</button>
      </div>

      <table class="hotel-table">
        <thead>
          <tr>
            <th>ID</th><th>Name</th><th>City</th><th>Rating</th><th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <tr *ngFor="let h of hotels">
            <td>{{h.id}}</td>
            <td>{{h.name}}</td>
            <td>{{h.city}}</td>
            <td>{{h.rating}}</td>
            <td>
              <button (click)="startEdit(h)">Edit</button>
              <button (click)="delete(h.id)">Delete</button>
              <button (click)="viewRooms(h.id)">View Rooms</button>
            </td>
          </tr>
        </tbody>
      </table>

      <div *ngIf="editing" class="form-container">
        <h3>{{ editing.id ? 'Edit Hotel' : 'Add Hotel' }}</h3>
        <form (ngSubmit)="save()">
          <input [(ngModel)]="editing.name" name="name" placeholder="Hotel Name" required />
          <input [(ngModel)]="editing.city" name="city" placeholder="City" />
          <input [(ngModel)]="editing.address" name="address" placeholder="Address" />
          <input type="number" [(ngModel)]="editing.rating" name="rating" placeholder="Rating" />
          <textarea [(ngModel)]="editing.description" name="description" placeholder="Description"></textarea>
          <div class="buttons">
            <button type="submit">Save</button>
            <button type="button" (click)="cancel()">Cancel</button>
          </div>
        </form>
      </div>

      <p *ngIf="message" class="message">{{message}}</p>
      <p *ngIf="error" class="error">{{error}}</p>
    </div>
  `,
  styles: [`
    .hotel-container { padding: 20px; }
    .actions { margin-bottom: 12px; }
    .hotel-table { width: 100%; border-collapse: collapse; }
    th, td { border: 1px solid #ccc; padding: 6px; text-align: left; }
    .form-container { margin-top: 15px; border: 1px solid #ccc; padding: 12px; width: 400px; }
    .buttons { margin-top: 10px; }
    .message { color: green; }
    .error { color: red; }
  `]
})
export class Hotel implements OnInit {
  hotels: Hotel[] = [];
  editing: Hotel | null = null;
  message = '';
  error = '';
  searchText = '';
  filterRating = 0;

  constructor(private svc: Hotelservice, private router: Router) {}

  ngOnInit() {
    this.load();
  }

  load() {
    this.svc.getAll().subscribe({
      next: (res) => (this.hotels = res),
      error: (err) => (this.error = 'Error loading hotels'),
    });
  }

  startAdd() {
    this.editing = { name: '', city: '', rating: 0 };
  }

  startEdit(h: Hotel) {
    this.editing = { ...h };
  }

  cancel() {
    this.editing = null;
  }

  save() {
    if (!this.editing) return;
    if (this.editing.id) {
      this.svc.update(this.editing.id, this.editing).subscribe({
        next: () => { this.message = 'Updated successfully'; this.load(); this.editing = null; },
        error: () => (this.error = 'Update failed'),
      });
    } else {
      this.svc.create(this.editing).subscribe({
        next: () => { this.message = 'Added successfully'; this.load(); this.editing = null; },
        error: () => (this.error = 'Add failed'),
      });
    }
  }

  delete(id?: number) {
    if (!id) return;
    if (!confirm('Are you sure to delete?')) return;
    this.svc.delete(id).subscribe({
      next: () => { this.message = 'Deleted'; this.load(); },
      error: () => (this.error = 'Delete failed'),
    });
  }

  search() {
    if (!this.searchText) return this.load();
    this.svc.search(this.searchText).subscribe({
      next: (res) => (this.hotels = res),
      error: () => (this.error = 'Search failed'),
    });
  }

  filter() {
    if (!this.filterRating) return this.load();
    this.svc.filterByRating(this.filterRating).subscribe({
      next: (res) => (this.hotels = res),
      error: () => (this.error = 'Filter failed'),
    });
  }

  viewRooms(hotelId?: number) {
    if (hotelId) this.router.navigate(['/rooms'], { queryParams: { hotelId } });
  }
}


---

üß≠ Add in app-routing.module.ts

import { Hotel } from './hotel/hotel';

const routes: Routes = [
  { path: 'hotels', component: Hotel },
  // ...existing routes
];


---

üß± Add in app.module.ts

import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { Hotel } from './hotel/hotel';
import { Hotelservice } from './hotel/hotelservice';

@NgModule({
  declarations: [
    Hotel,
    // other components...
  ],
  imports: [
    FormsModule,
    HttpClientModule,
    // other imports...
  ],
  providers: [Hotelservice],
})
export class AppModule {}


---

üåê Environment setup

‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ src/environments/environment.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§π‡•á ‡§Ö‡§∏‡§æ‡§µ‡§Ç:

export const environment = {
  production: false,
  apiUrl: 'http://localhost:8080/api'
};


---

‚úÖ Final Testing Steps

1. Backend run ‡§ï‡§∞‡§æ (Spring Boot ‚Üí port 8080).


2. Frontend ‡§Æ‡§ß‡•ç‡§Ø‡•á login ‡§ï‡§∞‡•Ç‡§® /hotels route ‡§µ‡§∞ ‡§ú‡§æ.


3. ‡§§‡§ø‡§•‡•á hotel list ‡§¶‡§ø‡§∏‡•á‡§≤.


4. Add / Edit / Delete ‡§ï‡§∞‡•Ç‡§® ‡§™‡§æ‡§π‡§æ.


5. Search ‡§Ü‡§£‡§ø Filter ‡§ö‡§æ‡§≤‡§≤‡•á ‡§™‡§æ‡§π‡§ø‡§ú‡•á‡§§.




---

‡§π‡§µ‡§Ç ‡§Ö‡§∏‡•á‡§≤ ‡§§‡§∞ ‡§Æ‡•Ä ‡§π‡§æ hotel module ‡§§‡•Å‡§ù‡•ç‡§Ø‡§æ ‡§¶‡§ø‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ zip extract ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ò‡§æ‡§≤‡•Ç‡§® ready-to-run frontend zip ‡§¨‡§®‡§µ‡•Ç‡§® ‡§¶‡•á‡§ä ‡§ï‡§æ?
(‡§Æ‡§ó ‡§§‡•Å‡§≤‡§æ ‡§´‡§ï‡•ç‡§§ ng serve ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§∞‡§æ‡§π‡•Ä‡§≤.)

