ठीक आहे, मी तुला पूर्ण working UpdateHotelComponent code देतो ज्यामध्ये:





updateHotel(id: number, data: any, token?: string): Observable<any> {
  const headers = token ? new HttpHeaders({ Authorization: `Bearer ${token}` }) : undefined;
  return this.http.put(`${this.apiUrl}/${id}`, data, { headers });
}



Blue Update button

Success/Error messages

Manager-only access

Reactive form with all fields

Backend mapping (PUT /api/hotels/{id})


हे Create Hotel सारखे style मध्ये आहे.


---

1️⃣ hotel.ts (UpdateHotelComponent)

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { ActivatedRoute, Router } from '@angular/router';
import { HotelService } from '../services/hotel.service';

@Component({
  selector: 'app-update-hotel',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule],
  templateUrl: './hotel.html',
  styleUrls: ['./hotel.css']
})
export class UpdateHotelComponent implements OnInit {
  hotelForm!: FormGroup;
  hotelId!: number;
  message: string = '';
  messageType: 'success' | 'error' = 'success';
  isManager: boolean = false; // only manager can update

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private hotelService: HotelService
  ) {}

  ngOnInit(): void {
    // Check if user is manager
    const role = localStorage.getItem('role'); // assuming login saves role
    this.isManager = role === 'MANAGER';

    // Initialize form
    this.hotelForm = this.fb.group({
      name: ['', Validators.required],
      location: ['', Validators.required],
      amenities: ['', Validators.required],
      rating: [0, [Validators.required, Validators.min(1), Validators.max(5)]]
    });

    // Get hotelId from route params
    this.route.params.subscribe(params => {
      this.hotelId = +params['id'];
      this.loadHotel();
    });
  }

  loadHotel() {
    this.hotelService.getHotelById(this.hotelId).subscribe({
      next: (data) => {
        this.hotelForm.patchValue({
          name: data.name,
          location: data.location,
          amenities: data.amenities,
          rating: data.rating
        });
      },
      error: (err) => {
        console.error(err);
        this.message = 'Failed to load hotel details';
        this.messageType = 'error';
      }
    });
  }

  updateHotel(): void {
    if (!this.isManager) {
      this.message = 'Only managers can update hotels!';
      this.messageType = 'error';
      return;
    }

    if (this.hotelForm.invalid) {
      this.message = 'Please fill all fields correctly';
      this.messageType = 'error';
      return;
    }

    // Get JWT token from localStorage if backend auth required
    const token = localStorage.getItem('token') || '';

    this.hotelService.updateHotel(this.hotelId, this.hotelForm.value, token).subscribe({
      next: () => {
        this.message = 'Hotel updated successfully!';
        this.messageType = 'success';
      },
      error: () => {
        this.message = 'Failed to update hotel';
        this.messageType = 'error';
      }
    });
  }
}


---

2️⃣ hotel.html

<div class="container">
  <h2>Update Hotel</h2>

  <form [formGroup]="hotelForm" (ngSubmit)="updateHotel()">
    <label>Hotel Name:</label>
    <input type="text" formControlName="name" />

    <label>Location:</label>
    <input type="text" formControlName="location" />

    <label>Amenities:</label>
    <input type="text" formControlName="amenities" />

    <label>Rating (1-5):</label>
    <input type="number" formControlName="rating" />

    <button type="submit" [disabled]="!isManager">Update Hotel</button>
  </form>

  <p class="message" [ngClass]="{'success': messageType==='success', 'error': messageType==='error'}">{{ message }}</p>
</div>


---

3️⃣ hotel.css

.container {
  width: 400px;
  margin: 40px auto;
  padding: 20px;
  border-radius: 10px;
  background-color: #f8f9fa;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
  font-family: Arial, sans-serif;
}

h2 {
  text-align: center;
  color: #007bff;
  margin-bottom: 20px;
}

label {
  display: block;
  margin-top: 10px;
  font-weight: 600;
}

input {
  width: 100%;
  padding: 8px;
  margin-top: 5px;
  border-radius: 5px;
  border: 1px solid #ccc;
}

input:focus {
  border-color: #007bff;
  outline: none;
}

button {
  width: 100%;
  margin-top: 15px;
  padding: 10px;
  background-color: #007bff;
  color: white;
  font-weight: 600;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

button:disabled {
  background-color: #aaa;
  cursor: not-allowed;
}

.message {
  margin-top: 15px;
  text-align: center;
  font-weight: 600;
  font-size: 14px;
}

.success {
  color: green;
}

.error {
  color: red;
}


---

4️⃣ Notes

Manager-only access: button disabled for non-managers and message shows.

PUT request: hotelService.updateHotel(this.hotelId, formData, token)

Success/Error feedback: message updated real-time.

All fields map to backend (name, location, amenities, rating).



---

जर हवे असेल तर मी पुढे Get All Hotels list मध्ये प्रत्येक hotel समोर blue Update button तयार करून देऊ शकतो, जे click करताच ह्या UpdateHotelComponent वर redirect होईल.

तयार करु का?

