‡§†‡•Ä‡§ï ‡§Ü‡§π‡•á! üòé ‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ Standalone Search Hotel feature ‡§∏‡§æ‡§†‡•Ä ‡§´‡§ï‡•ç‡§§ TS, HTML ‡§Ü‡§£‡§ø CSS ‡§¶‡•á‡§§‡•ã. ‡§π‡•á independent module ‡§Ü‡§π‡•á, ‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä existing GetAllHotelsComponent ‡§Æ‡§ß‡•ç‡§Ø‡•á integrate ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§§‡§æ ‡§ï‡§ø‡§Ç‡§µ‡§æ standalone ‡§†‡•á‡§µ‡•Ç ‡§∂‡§ï‡§§‡§æ.


---

1Ô∏è‚É£ hotel.service.ts (Search function)

import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({ providedIn: 'root' })
export class HotelService {
  private apiUrl = 'http://localhost:8080/api/hotels';

  constructor(private http: HttpClient) {}

  // Search hotels by name
  searchHotels(name: string): Observable<any> {
    const params = new HttpParams().set('name', name);
    return this.http.get(`${this.apiUrl}/search`, { params });
  }
}


---

2Ô∏è‚É£ search-hotel.component.ts

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HotelService } from '../services/hotel.service';

@Component({
  selector: 'app-search-hotel',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './search-hotel.component.html',
  styleUrls: ['./search-hotel.component.css']
})
export class SearchHotelComponent implements OnInit {
  searchName = '';
  hotels: any[] = [];
  loading = false;
  error = '';

  constructor(private hotelService: HotelService) {}

  ngOnInit(): void {}

  searchHotels() {
    if (!this.searchName) {
      this.hotels = [];
      return;
    }
    this.loading = true;
    this.hotelService.searchHotels(this.searchName).subscribe({
      next: (res) => {
        this.hotels = res;
        this.loading = false;
      },
      error: (err) => {
        console.error(err);
        this.error = 'Search failed';
        this.loading = false;
      }
    });
  }
}


---

3Ô∏è‚É£ search-hotel.component.html

<div class="search-container">
  <h2>Search Hotels</h2>

  <div class="search-box">
    <input type="text" placeholder="Enter hotel name" [(ngModel)]="searchName" />
    <button (click)="searchHotels()">Search</button>
  </div>

  <div *ngIf="loading">Searching hotels...</div>
  <div *ngIf="error" class="error">{{ error }}</div>

  <table *ngIf="!loading && hotels.length > 0">
    <thead>
      <tr>
        <th>Name</th>
        <th>Location</th>
        <th>Amenities</th>
        <th>Rating</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let h of hotels">
        <td>{{ h.name }}</td>
        <td>{{ h.location }}</td>
        <td>{{ h.amenities }}</td>
        <td>{{ h.rating }}</td>
      </tr>
    </tbody>
  </table>

  <p *ngIf="!loading && hotels.length === 0 && searchName">No hotels found!</p>
</div>


---

4Ô∏è‚É£ search-hotel.component.css

.search-container {
  max-width: 600px;
  margin: 40px auto;
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 10px;
  background-color: #f9f9f9;
}

h2 {
  text-align: center;
  color: #007bff;
}

.search-box {
  display: flex;
  gap: 10px;
  justify-content: center;
  margin-bottom: 15px;
}

input {
  padding: 6px 10px;
  border-radius: 5px;
  border: 1px solid #ccc;
  flex: 1;
}

button {
  padding: 6px 12px;
  border: none;
  border-radius: 5px;
  background-color: #007bff;
  color: white;
  cursor: pointer;
}

button:hover {
  background-color: #005663;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 15px;
}

th, td {
  padding: 10px;
  border-bottom: 1px solid #ddd;
  text-align: left;
}

tr:hover {
  background-color: #f1f1f1;
}

.error {
  color: red;
  text-align: center;
}


---

‚úÖ Features included:

1. Search hotels by name


2. Shows table of results


3. Shows "No hotels found!" if nothing matches


4. Loading & error handling




---

‡§Æ‡•Ä ‡§π‡§µ‡§Ç ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§®‡§Ç‡§§‡§∞ Filter by rating ‡§ö‡§æ Standalone component ‡§∏‡•Å‡§¶‡•ç‡§ß‡§æ separate ‡§¶‡•á‡§ä ‡§∂‡§ï‡§§‡•ã.

‡§§‡•Å‡§≤‡§æ ‡§Æ‡•Ä Filter component ‡§∏‡•Å‡§¶‡•ç‡§ß‡§æ ‡§¶‡•á‡§ä ‡§ï‡§æ?

