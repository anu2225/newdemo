import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { RoomService } from '../../../core/services/roomservice';

@Component({
  selector: 'app-create-room',
  standalone: true, // üëà standalone
  imports: [CommonModule, ReactiveFormsModule], // üëà ‡§á‡§•‡•á import ‡§ï‡§∞‡§æ
  templateUrl: './create-room.component.html',
  styleUrls: ['./create-room.component.css']
})
export class CreateRoomComponent implements OnInit {
  roomForm!: FormGroup;
  successMessage = '';
  errorMessage = '';

  constructor(private fb: FormBuilder, private roomService: RoomService) {}

  ngOnInit(): void {
    this.roomForm = this.fb.group({
      type: ['', Validators.required],
      price: [null, [Validators.required, Validators.min(1)]],
      availability: [true, Validators.required],
      features: ['', Validators.required],
      hotelId: [null, Validators.required]
    });
  }

  createRoom(): void {
    if (this.roomForm.valid) {
      this.roomService.createRoom(this.roomForm.value).subscribe({
        next: () => {
          this.successMessage = 'Room created successfully!';
          this.errorMessage = '';
          this.roomForm.reset();
        },
        error: () => {
          this.errorMessage = 'Failed to create room.';
          this.successMessage = '';
        }
      });
    } else {
      this.errorMessage = 'Please fill all required fields.';
      this.successMessage = '';
    }
  }
}







import { Component, signal } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { BrowserModule } from '@angular/platform-browser';
import { ReactiveFormsModule } from '@angular/forms';

// Features
import { Login } from './features/auth/login/login';
import { WelcomeUser } from './features/user/welcome-user/welcome-user';
import { Register } from './features/auth/register/register';
import { CreateHotel } from './features/hotel/create-hotel/hotel';
import { GetAllHotelsComponent } from './features/hotel/get-all-hotels/hotel';
import { UpdateHotelComponent } from './features/hotel/update-hotel/hotel';
import { SearchHotelComponent } from './features/hotel/search-hotel/hotel';
import { FilterHotelComponent } from './features/hotel/filter-hotel/hotel';
import { RoomComponent } from './features/room/get-all-rooms/room';
import { CreateRoomComponent } from './features/room/create-room/room';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [
    BrowserModule,
    ReactiveFormsModule,
    RouterOutlet,
    Login,
    Register,
    WelcomeUser,
    CreateHotel,
    GetAllHotelsComponent,
    UpdateHotelComponent,
    SearchHotelComponent,
    FilterHotelComponent,
    RoomComponent,
    CreateRoomComponent
  ],
  templateUrl: './app.html',
  styleUrls: ['./app.css']
})
export class App {
  protected readonly title = signal('SmartHotelBookingSystem');
}







Perfect üî• ‡§§‡•Å‡§ù‡§Ç ‡§Æ‡•ç‡§π‡§£‡§£‡§Ç ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‚Äî ‚ÄúRoom create‚Äù ‡§ö‡§Ç code ‡§ï‡•ã‡§£‡§§‡•ç‡§Ø‡§æ file ‡§Æ‡§ß‡•ç‡§Ø‡•á add ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§π‡•á direct ‡§∏‡§æ‡§Ç‡§ó.
‡§ö‡§≤, step-by-step clear ‡§∏‡§æ‡§Ç‡§ó‡§§‡•ã üëá


---

üß≠ ‡§§‡•Å‡§≤‡§æ ‡§π‡•á file create ‡§ï‡§∞‡§æ‡§Ø‡§ö‡§Ç ‡§Ü‡§π‡•á

üìÅ Path (Angular frontend):

frontend/
 ‚îî‚îÄ‚îÄ SmartHotelBookingSystem/
     ‚îî‚îÄ‚îÄ src/
         ‚îî‚îÄ‚îÄ app/
             ‚îî‚îÄ‚îÄ features/
                 ‚îî‚îÄ‚îÄ room/
                     ‚îî‚îÄ‚îÄ create-room/
                         ‚û§ create-room.component.ts
                         ‚û§ create-room.component.html
                         ‚û§ create-room.component.css


---

üß© Step 1: create-room.component.ts  (üëâ ‡§π‡•Ä file copy ‡§ï‡§∞)

import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { RoomService } from '../../../core/services/roomservice';

@Component({
  selector: 'app-create-room',
  templateUrl: './create-room.component.html',
  styleUrls: ['./create-room.component.css']
})
export class CreateRoomComponent implements OnInit {
  roomForm!: FormGroup;
  successMessage: string = '';
  errorMessage: string = '';

  constructor(private fb: FormBuilder, private roomService: RoomService) {}

  ngOnInit(): void {
    this.roomForm = this.fb.group({
      type: ['', Validators.required],
      price: [null, [Validators.required, Validators.min(1)]],
      availability: [true, Validators.required],
      features: ['', Validators.required],
      hotelId: [null, Validators.required]
    });
  }

  createRoom(): void {
    if (this.roomForm.valid) {
      this.roomService.createRoom(this.roomForm.value).subscribe({
        next: (response) => {
          this.successMessage = 'Room created successfully!';
          this.errorMessage = '';
          this.roomForm.reset();
        },
        error: (err) => {
          console.error(err);
          this.errorMessage = 'Failed to create room. Please try again.';
          this.successMessage = '';
        }
      });
    } else {
      this.errorMessage = 'Please fill all required fields correctly.';
      this.successMessage = '';
    }
  }
}


---

üñºÔ∏è Step 2: create-room.component.html

<div class="room-container">
  <h2>Create New Room</h2>

  <form [formGroup]="roomForm" (ngSubmit)="createRoom()">
    <div class="form-group">
      <label>Room Type:</label>
      <input type="text" formControlName="type" placeholder="e.g. Deluxe, Suite, Standard" />
    </div>

    <div class="form-group">
      <label>Price:</label>
      <input type="number" formControlName="price" placeholder="Enter room price" />
    </div>

    <div class="form-group">
      <label>Availability:</label>
      <select formControlName="availability">
        <option [value]="true">Available</option>
        <option [value]="false">Not Available</option>
      </select>
    </div>

    <div class="form-group">
      <label>Features:</label>
      <input type="text" formControlName="features" placeholder="AC, WiFi, TV, etc." />
    </div>

    <div class="form-group">
      <label>Hotel ID:</label>
      <input type="number" formControlName="hotelId" placeholder="Enter associated hotel ID" />
    </div>

    <button type="submit" [disabled]="roomForm.invalid">Create Room</button>
  </form>

  <p class="success" *ngIf="successMessage">{{ successMessage }}</p>
  <p class="error" *ngIf="errorMessage">{{ errorMessage }}</p>
</div>


---

üé® Step 3: create-room.component.css

.room-container {
  max-width: 450px;
  margin: 40px auto;
  padding: 25px;
  border-radius: 12px;
  box-shadow: 0 0 12px rgba(0, 0, 0, 0.1);
  background-color: #fff;
}

h2 {
  text-align: center;
  color: #333;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 15px;
  display: flex;
  flex-direction: column;
}

label {
  font-weight: 600;
  margin-bottom: 5px;
}

input,
select {
  padding: 8px;
  border: 1px solid #ccc;
  border-radius: 8px;
}

button {
  width: 100%;
  padding: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 8px;
  font-size: 16px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

.success {
  color: green;
  text-align: center;
  margin-top: 10px;
}

.error {
  color: red;
  text-align: center;
  margin-top: 10px;
}


---

üß† Step 4: roomservice.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á method ‡§ú‡•ã‡§°‡§æ

(‡§π‡•Ä file ‡§Ü‡§π‡•á: src/app/core/services/roomservice.ts)

createRoom(roomData: any): Observable<any> {
  return this.http.post(`${this.apiUrl}/rooms`, roomData);
}


---

üõ†Ô∏è Step 5: Route ‡§ú‡•ã‡§°‡§æ (app.routes.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á)

{ path: 'create-room', component: CreateRoomComponent },


---

‚úÖ Step 6: app.module.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á ReactiveFormsModule import ‡§ï‡§∞

import { ReactiveFormsModule } from '@angular/forms';

@NgModule({
  imports: [
    BrowserModule,
    ReactiveFormsModule
  ],
})


---

üöÄ Step 7: Run ‡§ï‡§∞‡§æ

ng serve

Browser ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ú‡§æ üëâ
üîπ http://localhost:4200/create-room

‡§§‡§ø‡§•‡•á ‡§§‡•Ç room details ‡§≠‡§∞‡•Ç‡§® Create Room click ‡§ï‡§∞
‚Üí API call ‡§π‡•ã‡§à‡§≤ ‡§Ü‡§£‡§ø success message ‡§¶‡§ø‡§∏‡•á‡§≤ ‚úÖ


---

‡§π‡§µ‡§Ç ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§™‡•Å‡§¢‡•á ‚ÄúGet All Rooms + Create Room switch buttons (navigate)‚Äù ‡§™‡§£ ‡§¶‡•á‡§ä ‡§ï‡§æ?
‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‚ÄúRooms List‚Äù ‡§µ‡§∞‡•Ç‡§® ‚ÄúCreate Room‚Äù button click ‡§ï‡•á‡§≤‡§Ç ‡§ï‡•Ä page switch ‡§π‡•ã‡§à‡§≤.

