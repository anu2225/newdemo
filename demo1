‡§Ö‡§∞‡•á ‡§Ö‡§ó‡§¶‡•Ä ‡§¨‡§∞‡•ã‡§¨‡§∞! üòé ‡§§‡•Å‡§≤‡§æ ‡§´‡§ï‡•ç‡§§ ‡§π‡•á ‡§π‡§µ‡•á ‡§Ü‡§π‡•á ‡§ï‡•Ä:

/hotels page ‡§µ‡§∞ ‡§∏‡§∞‡•ç‡§µ hotels table ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§¶‡§ø‡§∏‡§§‡•Ä‡§≤

‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï row ‡§Æ‡§ß‡•ç‡§Ø‡•á Update button ‡§´‡§ï‡•ç‡§§ Manager ‡§∏‡§æ‡§†‡•Ä

‡§ñ‡§æ‡§≤‡•Ä ‡§µ‡•á‡§ó‡§≥‡•Ä Update form ‡§®‡§ï‡•ã, click ‚Üí Update page load


‡§Æ‡•ç‡§π‡§£‡§ú‡•á GetAllHotels component ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§´‡§ï‡•ç‡§§ table + Update button ‡§†‡•á‡§µ‡§æ‡§Ø‡§ö‡§æ ‡§Ü‡§£‡§ø UpdateHotel component standalone ‡§Æ‡•ç‡§π‡§£‡•Ç‡§® ‡§∞‡§æ‡§π‡•Ä‡§≤.


---

üîπ GetAllHotels Component (Manager-only Update button)

hotel.ts

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { HotelService } from '../services/hotel.service';

export interface Hotel {
  hotelId: number;
  name: string;
  location: string;
  amenities: string;
  rating: number;
}

@Component({
  selector: 'app-hotel',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './hotel.html',
  styleUrls: ['./hotel.css']
})
export class HotelComponent implements OnInit {
  hotels: Hotel[] = [];
  loading = true;
  error = '';
  role = '';

  constructor(private hotelService: HotelService) {}

  ngOnInit(): void {
    this.role = (localStorage.getItem('role') || '').trim().toLowerCase();
    this.getHotels();
  }

  getHotels(): void {
    this.loading = true;
    this.hotelService.getHotelList().subscribe({
      next: (res: Hotel[]) => {
        this.hotels = res;
        this.loading = false;
      },
      error: (err) => {
        console.error(err);
        this.error = 'Failed to load hotels';
        this.loading = false;
      }
    });
  }
}

hotel.html

<div class="hotel-container">
  <h2>Hotel List</h2>

  <p *ngIf="loading">Loading hotels...</p>
  <p *ngIf="error" style="color:red">{{ error }}</p>

  <table *ngIf="!loading && hotels.length > 0">
    <thead>
      <tr>
        <th>Name</th>
        <th>Location</th>
        <th>Amenities</th>
        <th>Rating</th>
        <th *ngIf="role === 'manager'">Update</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let h of hotels">
        <td>{{ h.name }}</td>
        <td>{{ h.location }}</td>
        <td>{{ h.amenities }}</td>
        <td>{{ h.rating }}</td>
        <td *ngIf="role === 'manager'">
          <button [routerLink]="['/update-hotel', h.hotelId]">Update</button>
        </td>
      </tr>
    </tbody>
  </table>

  <p *ngIf="!loading && hotels.length === 0">No hotels found</p>
  <p *ngIf="role !== 'manager'">Only Manager can update hotels!</p>
</div>

hotel.css (‡§∏‡§æ‡§ß‡•á table style)

.hotel-container {
  width: 900px;
  margin: 40px auto;
  padding: 20px;
  background-color: #f8f9fa;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

h2 {
  text-align: center;
  color: #007bff;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

th, td {
  border: 1px solid #ccc;
  padding: 10px;
  text-align: left;
}

th {
  background-color: #e9ecef;
}

button {
  padding: 5px 10px;
  background-color: #28a745;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #218838;
}


---

üí° Key points

Update button row-wise, ‡§´‡§ï‡•ç‡§§ Manager role ‡§∏‡§æ‡§†‡•Ä

Click ‚Üí /update-hotel/:id ‚Üí UpdateHotel component load

‡§ñ‡§æ‡§≤‡•Ä separate Update form ‡§®‡§ï‡•ã

Non-manager ‚Üí message Only Manager can update hotels!



---

‡§ú‡§∞ ‡§π‡§µ‡§Ç ‡§§‡§∞ ‡§Æ‡•Ä Create + Get + Update + Delete ‡§∏‡§ó‡§≥‡§Ç full CRUD ready module ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•Ç‡§® ‡§§‡•Å‡§≤‡§æ ‡§¶‡•á‡§ä ‡§∂‡§ï‡§§‡•ã, ‡§ú‡•á folder + naming convention ‡§®‡•Å‡§∏‡§æ‡§∞ copy-paste ready ‡§Ö‡§∏‡•á‡§≤ üî•

‡§§‡§Ø‡§æ‡§∞ ‡§Ü‡§π‡•á‡§∏ ‡§ï‡§æ?

