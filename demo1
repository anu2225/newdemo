‡§Ö‡§∞‡•á ‡§õ‡§æ‡§®! üòé ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§§‡•Å‡§≤‡§æ ‡§π‡§µ‡§æ ‡§Ü‡§π‡•á ‡§ï‡•Ä UpdateHotel ‡§∏‡§æ‡§†‡•Ä ‡§∏‡•ç‡§µ‡§§‡§Ç‡§§‡•ç‡§∞ standalone form ‡§Ö‡§∏‡§æ‡§µ‡§æ, ‡§ú‡§∏‡§æ CreateHotel ‡§∏‡§æ‡§†‡•Ä ‡§Ü‡§π‡•á, ‡§Ü‡§£‡§ø ‡§§‡•ã ‡§´‡§ï‡•ç‡§§ Manager login ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ ‡§¶‡§ø‡§∏‡•á‡§≤ ‡§Ü‡§£‡§ø update ‡§ï‡§∞‡§§‡§æ ‡§Ø‡•á‡§à‡§≤.

‡§Ü‡§§‡§æ ‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ UpdateHotel standalone component ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•Ç‡§® ‡§¶‡•á‡§§‡•ã, copy-paste ready, CreateHotel ‡§∏‡§æ‡§∞‡§ñ‡§æ‡§ö structure:


---

1Ô∏è‚É£ Folder structure

features/hotel/update-hotel/
    hotel.ts       <-- UpdateHotelComponent
    hotel.html
    hotel.css


---

2Ô∏è‚É£ hotel.ts (UpdateHotelComponent)

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { HotelService } from '../services/hotel.service';

export interface Hotel {
  hotelId: number;
  name: string;
  location: string;
  amenities: string;
  rating: number;
}

@Component({
  selector: 'app-update-hotel',
  standalone: true,
  imports: [CommonModule, FormsModule, RouterModule],
  templateUrl: './hotel.html',
  styleUrls: ['./hotel.css']
})
export class UpdateHotelComponent implements OnInit {
  hotel: Hotel = { hotelId: 0, name: '', location: '', amenities: '', rating: 0 };
  token = localStorage.getItem('token') || '';
  role = (localStorage.getItem('role') || '').trim().toLowerCase();
  message = '';

  constructor(
    private hotelService: HotelService,
    private route: ActivatedRoute,
    private router: Router
  ) {}

  ngOnInit(): void {
    if (this.role !== 'manager') {
      this.message = 'Only Manager can update hotels!';
      return;
    }

    const id = Number(this.route.snapshot.paramMap.get('id'));
    this.hotelService.getHotelById(id).subscribe({
      next: (res) => this.hotel = res,
      error: (err) => this.message = 'Failed to fetch hotel data'
    });
  }

  updateHotel() {
    if (!this.hotel.name || !this.hotel.location || !this.hotel.amenities) {
      this.message = 'Please fill all fields!';
      return;
    }

    this.hotelService.updateHotel(this.hotel.hotelId, this.hotel, this.token).subscribe({
      next: () => this.router.navigate(['/hotels']),
      error: () => this.message = 'Update failed!'
    });
  }
}


---

3Ô∏è‚É£ hotel.html

<div class="container">
  <h2>Update Hotel</h2>

  <p *ngIf="message" style="color:red">{{ message }}</p>

  <!-- Only Manager can see form -->
  <form *ngIf="role === 'manager'" (ngSubmit)="updateHotel()">
    <label>Hotel Name:</label>
    <input type="text" [(ngModel)]="hotel.name" name="name" required />

    <label>Location:</label>
    <input type="text" [(ngModel)]="hotel.location" name="location" required />

    <label>Amenities:</label>
    <input type="text" [(ngModel)]="hotel.amenities" name="amenities" required />

    <label>Rating (1-5):</label>
    <input type="number" [(ngModel)]="hotel.rating" name="rating" min="1" max="5" required />

    <button type="submit">Update Hotel</button>
  </form>
</div>


---

4Ô∏è‚É£ hotel.css

.container {
  width: 400px;
  margin: 40px auto;
  padding: 20px;
  border-radius: 10px;
  background-color: #f8f9fa;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

label {
  display: block;
  margin-top: 10px;
  font-weight: 600;
}

input {
  width: 100%;
  padding: 8px;
  margin-top: 5px;
  border-radius: 5px;
  border: 1px solid #ccc;
}

button {
  width: 100%;
  margin-top: 15px;
  padding: 10px;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #0069d9;
}


---

5Ô∏è‚É£ Route add ‡§ï‡§∞‡§æ (app.routes.ts)

import { UpdateHotelComponent } from './features/hotel/update-hotel/hotel';

{ path: 'update-hotel/:id', component: UpdateHotelComponent }


---

‚úÖ Workflow

1. /hotels table ‚Üí ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï row ‡§Æ‡§ß‡•ç‡§Ø‡•á Update button (Manager only)


2. Click ‚Üí /update-hotel/:id ‚Üí UpdateHotel standalone component load


3. Form pre-filled ‚Üí Manager edits ‚Üí Submit ‚Üí PUT /api/hotels/{id} ‚Üí redirect /hotels


4. Non-manager ‚Üí UpdateHotel page load ‡§ï‡§∞‡§§‡§æ‡§ö message ‚ÄúOnly Manager can update hotels!‚Äù




---

‡§ú‡§∞ ‡§π‡§µ‡§Ç ‡§§‡§∞ ‡§Æ‡•Ä ‡§Ü‡§§‡§æ Create + GetAll + Update + Delete full CRUD ready-to-copy module ‡§¶‡•á‡§ä ‡§∂‡§ï‡§§‡•ã, ‡§ú‡•á backend-ready ‡§Ö‡§∏‡•á‡§≤.

‡§§‡§Ø‡§æ‡§∞ ‡§Ü‡§π‡•á‡§∏ ‡§ï‡§æ?

