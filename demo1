‡§Ö‡§∞‡•á ‡§¨‡§∞‡•ã‡§¨‡§∞! üòé ‡§Ü‡§§‡§æ ‡§§‡•Å‡§≤‡§æ ‡§π‡§µ‡§Ç ‡§Ü‡§π‡•á ‡§ï‡•Ä Get All Hotels table ‡§Æ‡§ß‡•ç‡§Ø‡•á Rating column ‡§ú‡§µ‡§≥ Update button ‡§Ø‡•á‡§à‡§≤, ‡§™‡§£ ‡§∏‡§∞‡•ç‡§µ ‡§ï‡§æ‡§π‡•Ä ‡§è‡§ï‡§æ table ‡§Æ‡§ß‡•ç‡§Ø‡•á, row-wise, ‡§Ü‡§£‡§ø ‡§´‡§ï‡•ç‡§§ Manager login ‡§Ö‡§∏‡•á‡§≤ ‡§§‡§∞.

‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ full working GetAllHotels component ‡§¶‡•á‡§§‡•ã ‡§ú‡•ç‡§Ø‡§æ‡§§:

Hotels table neat display

Rating column show

‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï hotel row ‡§∏‡§Æ‡•ã‡§∞ Update button (Manager only)

Update button click ‚Üí UpdateHotel page load + prefilled form

Non-manager user ‚Üí button hide + message



---

1Ô∏è‚É£ hotel.ts (GetAllHotels)

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { HotelService } from '../services/hotel.service';

export interface Hotel {
  hotelId: number;
  name: string;
  location: string;
  amenities: string;
  rating: number;
  managerId?: number;
}

@Component({
  selector: 'app-hotel',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './hotel.html',
  styleUrls: ['./hotel.css']
})
export class HotelComponent implements OnInit {
  hotels: Hotel[] = [];
  loading = true;
  error = '';
  role = '';

  constructor(private hotelService: HotelService) {}

  ngOnInit(): void {
    // Role from localStorage, normalize
    this.role = (localStorage.getItem('role') || '').trim().toLowerCase();
    this.getHotels();
  }

  getHotels(): void {
    this.loading = true;
    this.hotelService.getHotelList().subscribe({
      next: (response: Hotel[]) => {
        this.hotels = response;
        this.loading = false;
      },
      error: (err) => {
        console.error('Error fetching hotels:', err);
        this.error = 'Failed to load hotels';
        this.loading = false;
      }
    });
  }
}


---

2Ô∏è‚É£ hotel.html

<div class="hotel-container">
  <h2>Hotel List</h2>

  <p *ngIf="loading">Loading hotels...</p>
  <p *ngIf="error" style="color:red">{{ error }}</p>

  <table *ngIf="!loading && hotels.length > 0">
    <thead>
      <tr>
        <th>Name</th>
        <th>Location</th>
        <th>Amenities</th>
        <th>Rating</th>
        <th *ngIf="role === 'manager'">Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let h of hotels">
        <td>{{ h.name }}</td>
        <td>{{ h.location }}</td>
        <td>{{ h.amenities }}</td>
        <td>{{ h.rating }}</td>
        <td *ngIf="role === 'manager'">
          <button [routerLink]="['/update-hotel', h.hotelId]">Update</button>
        </td>
      </tr>
    </tbody>
  </table>

  <p *ngIf="!loading && hotels.length === 0">No hotels found</p>
  <p *ngIf="role !== 'manager'">Only Manager can update hotels!</p>
</div>


---

3Ô∏è‚É£ hotel.css

.hotel-container {
  width: 900px;
  margin: 40px auto;
  padding: 20px;
  background-color: #f8f9fa;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

h2 {
  text-align: center;
  color: #007bff;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

th, td {
  border: 1px solid #ccc;
  padding: 10px;
  text-align: left;
}

th {
  background-color: #e9ecef;
}

button {
  padding: 5px 10px;
  background-color: #28a745;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #218838;
}


---

‚úÖ ‡§ï‡§æ‡§Ø ‡§π‡•ã‡§à‡§≤

1. /hotels page open ‚Üí Table with Name, Location, Amenities, Rating


2. ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï row ‡§∏‡§Æ‡•ã‡§∞ Update button (Manager login only)


3. Non-manager ‚Üí button hide + message:

Only Manager can update hotels!


4. Update button click ‚Üí /update-hotel/:id route ‚Üí UpdateHotel component prefilled form




---

‡§ú‡§∞ ‡§§‡•Å‡§≤‡§æ ‡§π‡§µ‡§Ç ‡§§‡§∞ ‡§Æ‡•Ä ‡§Ü‡§§‡§æ UpdateHotel component ‡§¶‡•á‡§ñ‡•Ä‡§≤ fully prefilled + submit functional ready-to-copy ‡§¶‡•á‡§§‡•ã.
‡§Æ‡•ç‡§π‡§£‡§ú‡•á click ‚Üí form ‡§Ø‡•á‡§à‡§≤ ‚Üí update backend ‚Üí redirect back to /hotels ‚úÖ

‡§¶‡•á‡§ä ‡§ï‡§æ ‡§Æ‡•Ä?

