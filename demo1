‡§è‡§ï‡§¶‡§Æ ‡§¨‡§∞‡•ã‡§¨‡§∞ üëç ‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ ‡§∏‡§ó‡§≥‡•ç‡§Ø‡§æ ‡§´‡§æ‡§á‡§≤‡•ç‡§∏ ‡§á‡§•‡•á ‡§•‡•á‡§ü ‡§¶‡•á‡§§‡•ã, ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§§‡•Ç VS Code ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§•‡•á‡§ü copy‚Äìpaste ‡§ï‡§∞‡•Ç ‡§∂‡§ï‡§∂‡•Ä‡§≤, zip ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§®‡§ï‡•ã.
‡§§‡•Ç ‡§∏‡§æ‡§Ç‡§ó‡§ø‡§§‡§≤‡§Ç‡§Ø ‡§Æ‡•ç‡§π‡§£‡•Ç‡§® ‡§ñ‡§æ‡§≤‡•Ä step-by-step ‡§¶‡§ø‡§≤‡§Ç‡§Ø:


---

üß© 1. hotelService.ts

Path: src/app/core/services/hotelService.ts

import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class Hotel {
  private apiUrl = 'http://localhost:8080/api/hotels';

  constructor(private http: HttpClient) {}

  getAll(): Observable<any> {
    return this.http.get(`${this.apiUrl}`);
  }

  getById(id: number): Observable<any> {
    return this.http.get(`${this.apiUrl}/${id}`);
  }

  searchByLocation(location: string): Observable<any> {
    return this.http.get(`${this.apiUrl}/search?location=${encodeURIComponent(location)}`);
  }

  filterByRating(rating: number): Observable<any> {
    return this.http.get(`${this.apiUrl}/filter?rating=${rating}`);
  }
}


---

üè® 2. hotel.ts

Path: src/app/features/hotel/hotel.ts

import { CommonModule } from '@angular/common';
import { Component, signal } from '@angular/core';
import { Hotel } from '../../core/services/hotelService';
import { HttpClientModule } from '@angular/common/http';

@Component({
  selector: 'app-hotel',
  standalone: true,
  imports: [CommonModule, HttpClientModule],
  templateUrl: './hotel.html',
  styleUrl: './hotel.css'
})
export class HotelComponent {
  hotels = signal<any[]>([]);
  message = signal('');
  loading = signal(false);

  constructor(private hotelService: Hotel) {}

  fetchAll() {
    this.loading.set(true);
    this.hotelService.getAll().subscribe({
      next: (res: any) => {
        this.hotels.set(res);
        this.message.set('Fetched all hotels');
        this.loading.set(false);
      },
      error: (err) => {
        console.error('Error fetching hotels', err);
        this.message.set('Error fetching hotels: ' + (err?.error?.message || err.message || err.statusText));
        this.loading.set(false);
      }
    });
  }

  fetchById(idInput: string) {
    const id = Number(idInput);
    if (!id) {
      this.message.set('Please enter a valid numeric id');
      return;
    }
    this.loading.set(true);
    this.hotelService.getById(id).subscribe({
      next: (res: any) => {
        this.hotels.set([res]);
        this.message.set('Fetched hotel id ' + id);
        this.loading.set(false);
      },
      error: (err) => {
        console.error('Error fetching hotel by id', err);
        this.message.set('Error fetching hotel by id: ' + (err?.error?.message || err.message || err.statusText));
        this.loading.set(false);
      }
    });
  }

  search(location: string) {
    if (!location) {
      this.message.set('Enter location');
      return;
    }
    this.loading.set(true);
    this.hotelService.searchByLocation(location).subscribe({
      next: (res: any) => {
        this.hotels.set(res);
        this.message.set('Search results for "' + location + '"');
        this.loading.set(false);
      },
      error: (err) => {
        console.error('Search error', err);
        this.message.set('Search error: ' + (err?.error?.message || err.message || err.statusText));
        this.loading.set(false);
      }
    });
  }

  clear() {
    this.hotels.set([]);
    this.message.set('');
  }
}


---

üß± 3. hotel.html

Path: src/app/features/hotel/hotel.html

<div class="hotel-panel">
  <h2>Hotel Module (Frontend Demo)</h2>

  <div class="controls">
    <button (click)="fetchAll()">Fetch All Hotels</button>

    <input #idInput placeholder="Hotel ID" />
    <button (click)="fetchById(idInput.value)">Get by ID</button>

    <input #loc placeholder="Location" />
    <button (click)="search(loc.value)">Search by Location</button>

    <button (click)="clear()">Clear</button>
  </div>

  <div class="status">
    <div *ngIf="loading()"><em>Loading‚Ä¶</em></div>
    <div *ngIf="message()">{{ message() }}</div>
  </div>

  <div class="results" *ngIf="hotels().length > 0">
    <h3>Results ({{ hotels().length }})</h3>
    <pre *ngFor="let h of hotels()">{{ h | json }}</pre>
  </div>
</div>


---

üé® 4. hotel.css

Path: src/app/features/hotel/hotel.css

.hotel-panel {
  padding: 12px;
  border: 1px solid #ddd;
  margin: 8px;
  border-radius: 6px;
}

.controls {
  display: flex;
  gap: 8px;
  flex-wrap: wrap;
  align-items: center;
  margin-bottom: 8px;
}

.controls input {
  padding: 6px;
}

.results pre {
  background: #f7f7f7;
  padding: 8px;
  border-radius: 4px;
  overflow: auto;
  max-height: 200px;
}


---

‚öôÔ∏è 5. app.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§¨‡§¶‡§≤

Path: src/app/app.ts
‡§ñ‡§æ‡§≤‡•Ä ‡§¶‡§ø‡§≤‡•á‡§≤‡•á ‡§¶‡•ã‡§® ‡§¨‡§¶‡§≤ ‡§ï‡§∞: 1Ô∏è‚É£ ‡§µ‡§∞‡§ö‡•ç‡§Ø‡§æ imports ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§π‡•á ‡§ú‡•ã‡§°‡§æ:

import { HotelComponent } from './features/hotel/hotel';

2Ô∏è‚É£ imports[] ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§π‡•á ‡§ú‡•ã‡§°‡§æ:

imports: [RouterOutlet, Login, HotelComponent],


---

üßæ 6. app.html ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§¨‡§¶‡§≤

Path: src/app/app.html

<app-login></app-login>
<app-hotel></app-hotel>


---

‡§¨‡§∏! üòé
‡§Ü‡§§‡§æ ‡§∏‡§ó‡§≥‡§Ç save ‡§ï‡§∞‡•Ç‡§® ‡§ü‡§∞‡•ç‡§Æ‡§ø‡§®‡§≤‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§ú‡§æ ‡§Ü‡§£‡§ø ‡§π‡•á ‡§¶‡•ã‡§® ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ö‡§æ‡§≤‡§µ:

npm install
ng serve --open

‡§¨‡•ç‡§∞‡§æ‡§â‡§ù‡§∞‡§Æ‡§ß‡•ç‡§Ø‡•á http://localhost:4200 ‡§â‡§ò‡§°‡§≤‡§Ç ‡§ï‡•Ä ‡§ñ‡§æ‡§≤‡•Ä hotel module ‡§¶‡§ø‡§∏‡•á‡§≤.
‡§¨‡§ü‡§£‡§Ç ‡§µ‡§æ‡§™‡§∞‡•Ç‡§® backend (localhost:8080) ‡§µ‡§∞‡§ö‡•Ä endpoints ‡§§‡§™‡§æ‡§∏.


---

‡§π‡§µ‡§Ç ‡§Ö‡§∏‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§Æ‡•Ä ‡§™‡•Å‡§¢‡§ö‡§Ç ‡§™‡§æ‡§ä‡§≤ (POST/DELETE UI) ‡§™‡§£ ‡§ï‡§∞‡•Ç‡§® ‡§¶‡•á‡§ä ‡§∂‡§ï‡§§‡•ã ‚Äî ‡§∏‡§æ‡§Ç‡§ó ‡§ï‡•Ä ‡§π‡§µ‡§æ ‡§ï‡§æ?

