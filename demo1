‡§†‡•Ä‡§ï ‡§Ü‡§π‡•á! üî•

‡§Æ‡•Ä ‡§§‡•Å‡§≤‡§æ ‡§Ü‡§§‡§æ full proper working GetAllHotels component ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡•Ç‡§® ‡§¶‡•á‡§§‡•ã ‡§ú‡•á:

‡§∏‡§∞‡•ç‡§µ hotels list show ‡§ï‡§∞‡•á‡§≤

Update button ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï hotel row ‡§∏‡§Æ‡•ã‡§∞ ‡§¶‡§ø‡§∏‡•á‡§≤ (Manager role check included)

Token + role logic included

Clean TypeScript + Angular standalone component style



---

1Ô∏è‚É£ hotel.ts (GetAllHotels component)

import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { HotelService } from '../services/hotel.service';

export interface Hotel {
  hotelId: number;
  name: string;
  location: string;
  amenities: string;
  rating: number;
  managerId?: number;
}

@Component({
  selector: 'app-hotel',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './hotel.html',
  styleUrls: ['./hotel.css']
})
export class HotelComponent implements OnInit {
  hotels: Hotel[] = [];
  loading = true;
  error = '';
  role = ''; // user role

  constructor(private hotelService: HotelService) {}

  ngOnInit(): void {
    // fetch role from localStorage and normalize
    this.role = (localStorage.getItem('role') || '').trim().toLowerCase();

    // fetch hotels
    this.getHotels();
  }

  getHotels(): void {
    this.loading = true;
    this.hotelService.getHotelList().subscribe({
      next: (response: Hotel[]) => {
        console.log("Hotels fetched:", response);
        this.hotels = response;
        this.loading = false;
      },
      error: (err) => {
        console.error('Error fetching hotels:', err);
        this.error = 'Failed to load hotels';
        this.loading = false;
      }
    });
  }
}


---

2Ô∏è‚É£ hotel.html

<div class="hotel-container">
  <h2>Hotel List</h2>

  <p *ngIf="loading">Loading hotels...</p>
  <p *ngIf="error" style="color:red">{{ error }}</p>

  <table *ngIf="!loading && hotels.length > 0">
    <thead>
      <tr>
        <th>Name</th>
        <th>Location</th>
        <th>Amenities</th>
        <th>Rating</th>
        <th *ngIf="role === 'manager'">Actions</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let h of hotels">
        <td>{{ h.name }}</td>
        <td>{{ h.location }}</td>
        <td>{{ h.amenities }}</td>
        <td>{{ h.rating }}</td>
        <td *ngIf="role === 'manager'">
          <button [routerLink]="['/update-hotel', h.hotelId]">Update</button>
        </td>
      </tr>
    </tbody>
  </table>

  <p *ngIf="!loading && hotels.length === 0">No hotels found</p>
</div>


---

3Ô∏è‚É£ hotel.css

.hotel-container {
  width: 800px;
  margin: 40px auto;
  padding: 20px;
  background-color: #f8f9fa;
  border-radius: 10px;
  box-shadow: 0 0 10px rgba(0,0,0,0.1);
}

h2 {
  text-align: center;
  color: #007bff;
}

table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

th, td {
  border: 1px solid #ccc;
  padding: 10px;
  text-align: left;
}

th {
  background-color: #e9ecef;
}

button {
  padding: 5px 10px;
  background-color: #28a745;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #218838;
}


---

üîë Key Points

1. Update button ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï row ‡§Æ‡§ß‡•ç‡§Ø‡•á visible (Manager role only).


2. Role check robust ‚Äî localStorage.getItem('role')?.trim().toLowerCase()


3. Hotels fetched from backend via HotelService.getHotelList().


4. Loading + error handling included.


5. Standalone component ‚Äî just import into routes.




---

üîÑ Usage

1. Ensure login sets role:



localStorage.setItem('role', 'Manager');
localStorage.setItem('token', 'JWT_TOKEN_HERE');

2. Route in app.routes.ts:



import { HotelComponent } from './features/hotel/get-all-hotels/hotel';

{ path: 'hotels', component: HotelComponent }

3. Browser ‚Üí /hotels ‚Üí ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï hotel ‡§∏‡§Æ‡•ã‡§∞ Update button ‡§¶‡§ø‡§∏‡•á‡§≤.




---

‡§ú‡§∞ ‡§§‡•Ç ‡§π‡§µ‡§Ç ‡§§‡§∞ ‡§Æ‡•Ä ‡§Ü‡§§‡§æ Delete button ‡§∏‡•Å‡§¶‡•ç‡§ß‡§æ add ‡§ï‡§∞‡•Ç‡§® full CRUD ready version ‡§¶‡•á‡§ä ‡§∂‡§ï‡§§‡•ã üî•

‡§§‡•Ç Delete feature ‡§∏‡§æ‡§†‡•Ä ‡§§‡§Ø‡§æ‡§∞ ‡§Ü‡§π‡•á‡§∏ ‡§ï‡§æ?

