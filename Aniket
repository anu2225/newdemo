Ahh got it! üòé Right now you want just the ‚ÄúCreate Medical Record‚Äù feature fully working in Angular‚ÄîTS, HTML, CSS, routing, model, service‚Äînothing else for now. Let‚Äôs do it cleanly.


---

1Ô∏è‚É£ Model (medical-record.model.ts)

export interface PrescriptionDTO {
  medicineName: string;
  dosage: string;
}

export interface MedicalRecordDTO {
  appointmentId: number;
  patientId: number;
  doctorId: number;
  reason?: string;
  diagnosis?: string;
  notes?: string;
  prescriptions?: PrescriptionDTO[];
}

export interface MedicalRecordResponseDTO {
  recordId: number;
  patientId: number;
  doctorId: number;
  patientName: string;
  doctorName: string;
  reason?: string;
  diagnosis?: string;
  notes?: string;
  prescriptions?: PrescriptionDTO[];
  createdAt: string;
}


---

2Ô∏è‚É£ Service (medical-record.service.ts)

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { MedicalRecordDTO, MedicalRecordResponseDTO } from '../models/medical-record.model';

@Injectable({ providedIn: 'root' })
export class MedicalRecordService {
  private apiUrl = 'http://localhost:8080/api/medical-records';

  constructor(private http: HttpClient) {}

  createRecord(dto: MedicalRecordDTO): Observable<MedicalRecordResponseDTO> {
    return this.http.post<MedicalRecordResponseDTO>(this.apiUrl, dto);
  }
}


---

3Ô∏è‚É£ Component TS (medical-record-create.ts)

import { Component } from '@angular/core';
import { FormBuilder, FormGroup, FormArray } from '@angular/forms';
import { MedicalRecordService } from '../../services/medical-record.service';

@Component({
  selector: 'app-medical-record-create',
  templateUrl: './medical-record-create.html',
  styleUrls: ['./medical-record-create.css']
})
export class MedicalRecordCreate {
  recordForm: FormGroup;

  constructor(private fb: FormBuilder, private recordService: MedicalRecordService) {
    this.recordForm = this.fb.group({
      appointmentId: [''],
      patientId: [''],
      doctorId: [''],
      reason: [''],
      diagnosis: [''],
      notes: [''],
      prescriptions: this.fb.array([])
    });
  }

  get prescriptions(): FormArray {
    return this.recordForm.get('prescriptions') as FormArray;
  }

  addPrescription() {
    this.prescriptions.push(this.fb.group({
      medicineName: [''],
      dosage: ['']
    }));
  }

  removePrescription(index: number) {
    this.prescriptions.removeAt(index);
  }

  submit() {
    this.recordService.createRecord(this.recordForm.value).subscribe({
      next: res => alert('Medical record created successfully!'),
      error: err => alert('Error creating medical record')
    });
  }
}


---

4Ô∏è‚É£ Component HTML (medical-record-create.html)

<div class="create-form">
  <h2>Create Medical Record</h2>
  <form [formGroup]="recordForm" (ngSubmit)="submit()">

    <input formControlName="appointmentId" placeholder="Appointment ID" required>
    <input formControlName="patientId" placeholder="Patient ID" required>
    <input formControlName="doctorId" placeholder="Doctor ID" required>
    <input formControlName="reason" placeholder="Reason">
    <input formControlName="diagnosis" placeholder="Diagnosis">
    <textarea formControlName="notes" placeholder="Notes"></textarea>

    <h3>Prescriptions</h3>
    <div formArrayName="prescriptions">
      <div *ngFor="let pres of prescriptions.controls; let i=index" [formGroupName]="i" class="prescription">
        <input formControlName="medicineName" placeholder="Medicine Name">
        <input formControlName="dosage" placeholder="Dosage">
        <button type="button" (click)="removePrescription(i)">Remove</button>
      </div>
    </div>

    <button type="button" (click)="addPrescription()">Add Prescription</button>
    <button type="submit">Create Record</button>
  </form>
</div>


---

5Ô∏è‚É£ Component CSS (medical-record-create.css)

.create-form {
  max-width: 600px;
  margin: 20px auto;
  padding: 20px;
  border: 1px solid #ddd;
  border-radius: 8px;
  background: #f9f9f9;
}

.create-form h2 {
  text-align: center;
  margin-bottom: 20px;
}

.create-form input, 
.create-form textarea {
  width: 100%;
  margin-bottom: 10px;
  padding: 8px;
  border-radius: 4px;
  border: 1px solid #ccc;
}

.prescription {
  display: flex;
  gap: 10px;
  margin-bottom: 10px;
}

.prescription input {
  flex: 1;
}

button {
  padding: 6px 12px;
  border: none;
  border-radius: 4px;
  background-color: #1976d2;
  color: white;
  cursor: pointer;
}

button:hover {
  background-color: #115293;
}


---

6Ô∏è‚É£ Route Setup

app-routing.module.ts

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { MedicalRecordCreate } from './features/medical-record/medical-record-create';

const routes: Routes = [
  { path: 'medical-record/create', component: MedicalRecordCreate },
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }


---

‚úÖ Now you have a fully working ‚ÄúCreate Medical Record‚Äù feature with:

TS logic for dynamic prescriptions

FormGroup + FormArray

HTML + CSS styling

Route /medical-record/create

Model & Service fully connected to backend



---

If you want, I can next make the ‚ÄúView Created Record immediately after creation‚Äù page in the same clean style so doctor/patient can see it instantly.

Do you want me to do that?

