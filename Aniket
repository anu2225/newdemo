Perfect üëå ‡§∏‡§Æ‡§ú‡§≤‡§Ç ‚Äî ‡§Æ‡•ç‡§π‡§£‡§ú‡•á ‡§§‡•Ç‡§ö‡§æ folder structure ‡§Ö‡§∏‡§æ ‡§Ü‡§π‡•á:

features/payment/
  ‚îú‚îÄ‚îÄ create-payment/
  ‚îú‚îÄ‚îÄ get-all-payments/
  ‚îú‚îÄ‚îÄ get-payment-by-booking-id/
  ‚îú‚îÄ‚îÄ get-payment-by-id/

‡§Ü‡§™‡§£ ‡§∏‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•Ç‡§Ø‡§æ üîπ Step 1 ‚Üí create-payment (‡§ú‡•á backend ‡§Æ‡§ß‡§≤‡•ç‡§Ø‡§æ /process API ‡§∂‡•Ä ‡§ú‡•ã‡§°‡§≤‡•á‡§≤‡§Ç ‡§Ü‡§π‡•á).


---

üü¢ Step 1 ‚Äî create-payment

üìÅ File 1: src/app/features/payment/create-payment/payment.ts

import { Component } from '@angular/core';
import { PaymentService } from '../../../services/payment.service';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-create-payment',
  standalone: true,
  imports: [FormsModule, CommonModule],
  templateUrl: './payment.html',
  styleUrls: ['./payment.css']
})
export class CreatePayment {
  bookingId!: number;
  paymentMethod: string = '';
  message: string = '';

  constructor(private paymentService: PaymentService) {}

  processPayment() {
    const data = {
      bookingId: this.bookingId,
      paymentMethod: this.paymentMethod
    };

    this.paymentService.processPayment(data).subscribe({
      next: (res) => {
        this.message = `‚úÖ Payment Successful! Status: ${res.paymentStatus}`;
      },
      error: (err) => {
        this.message = `‚ùå Payment Failed: ${err.error?.message || 'Try again'}`;
      }
    });
  }
}


---

üìÅ File 2: src/app/features/payment/create-payment/payment.html

<div class="payment-container">
  <h2>üí≥ Process Payment</h2>

  <label>Booking ID:</label>
  <input type="number" [(ngModel)]="bookingId" placeholder="Enter Booking ID" />

  <label>Payment Method:</label>
  <input type="text" [(ngModel)]="paymentMethod" placeholder="e.g. CARD / UPI" />

  <button (click)="processPayment()">Pay Now</button>

  <p class="message">{{ message }}</p>
</div>


---

üìÅ File 3: src/app/features/payment/create-payment/payment.css

.payment-container {
  width: 400px;
  margin: 50px auto;
  background: #f8f9fa;
  padding: 25px;
  border-radius: 10px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

label {
  font-weight: bold;
  display: block;
  margin-top: 10px;
}

input {
  width: 100%;
  padding: 8px;
  margin-top: 5px;
  margin-bottom: 15px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

button {
  width: 100%;
  background: #007bff;
  color: white;
  border: none;
  padding: 10px;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background: #0056b3;
}

.message {
  margin-top: 15px;
  font-weight: bold;
  text-align: center;
}


---

üìÅ File 4: src/app/services/payment.service.ts

(‡§ú‡§∞ ‡§§‡•Ç‡§ù‡•ç‡§Ø‡§æ‡§ï‡§°‡•á ‡§Ü‡§ß‡•Ä‡§ö ‡§®‡§∏‡•á‡§≤ ‡§§‡§∞ ‡§π‡•á ‡§è‡§ï‡§¶‡§æ‡§ö ‡§§‡§Ø‡§æ‡§∞ ‡§ï‡§∞.)

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class PaymentService {
  private baseUrl = 'http://localhost:8080/api/payments';

  constructor(private http: HttpClient) {}

  processPayment(paymentData: any): Observable<any> {
    return this.http.post(`${this.baseUrl}/process`, paymentData);
  }

  getAllPayments(): Observable<any[]> {
    return this.http.get<any[]>(`${this.baseUrl}/get-payments`);
  }

  getPaymentById(paymentId: number): Observable<any> {
    return this.http.get(`${this.baseUrl}/${paymentId}`);
  }

  getPaymentByBookingId(bookingId: number): Observable<any> {
    return this.http.get(`${this.baseUrl}/booking/${bookingId}`);
  }
}


---

üìÅ Step 5: Route Add ‡§ï‡§∞ app.routes.ts ‡§Æ‡§ß‡•ç‡§Ø‡•á

import { Routes } from '@angular/router';
import { CreatePayment } from './features/payment/create-payment/payment';

export const routes: Routes = [
  { path: 'create-payment', component: CreatePayment }
];


---

‚úÖ ‡§Ü‡§§‡§æ run ‡§ï‡§∞‡•Ç‡§® ‡§™‡§æ‡§π‡§æ:
üëâ http://localhost:4200/create-payment

‡§§‡•Ç Booking ID ‡§Ü‡§£‡§ø Payment Method ‡§ü‡§æ‡§ï‡§∂‡•Ä‡§≤, ‚ÄúPay Now‚Äù ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ï‡•á‡§≤‡•ç‡§Ø‡§æ‡§µ‡§∞ API call ‡§π‡•ã‡§à‡§≤
(http://localhost:8080/api/payments/process)
‡§Ü‡§£‡§ø success / fail message ‡§¶‡§ø‡§∏‡•á‡§≤.


---

‡§™‡•Å‡§¢‡§ö‡§æ step ‡§¶‡•á‡§ä ‡§ï‡§æ?
üî∏ ‡§Æ‡•ç‡§π‡§£‡§ú‡•á get-all-payments (‡§∏‡§∞‡•ç‡§µ payments list table ‡§Æ‡§ß‡•ç‡§Ø‡•á ‡§¶‡§æ‡§ñ‡§µ‡§æ‡§Ø‡§ö‡§æ component)?

